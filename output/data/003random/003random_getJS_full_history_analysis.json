{
  "project_name": "003random",
  "repository_url": "https://github.com/003random/getJS",
  "repository_name": "getJS",
  "ecosystem": "github",
  "repo_category": "all",
  "analysis_period": {
    "start_date": "2018-11-09",
    "end_date": "2024-07-30",
    "full_history": false
  },
  "commits": [
    {"hash": "0dcc9d110aa788443fc354ec8ee1f194918ab045", "msg": "Add files via upload", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 17:51:58+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 17:51:58+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": [], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 0, "insertions": 194, "lines": 194, "files": 1, "modified_files": [{"old_path": null, "new_path": "main.go", "filename": "main.go", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,194 @@\n+package main\r\n+\r\n+import (\r\n+  \"fmt\"\r\n+  \"log\"\r\n+  \"bufio\"\r\n+  \"flag\"\r\n+  \"os\"\r\n+  \"net/http\"\r\n+  \"strings\"\r\n+  urlpkg \"net/url\"\r\n+\r\n+  \"github.com/PuerkitoBio/goquery\"\r\n+)\r\n+\r\n+func main() {\r\n+  url := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\r\n+  outputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\r\n+  inputFile := flag.String(\"input\", \"\", \"Input file with urls\")\r\n+  resolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\r\n+  complete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\r\n+  plain := flag.Bool(\"plain\", false, \"Output only the results\")\r\n+  silent := flag.Bool(\"silent\", false, \"Dont output anything\")\r\n+  flag.Parse()\r\n+\r\n+  var urls []string\r\n+  var allSources []string\r\n+\r\n+  stat, _ := os.Stdin.Stat()\r\n+  if (stat.Mode() & os.ModeCharDevice) == 0 {\r\n+    scanner := bufio.NewScanner(os.Stdin)\r\n+    for scanner.Scan() {\r\n+      urls = append(urls, scanner.Text())\r\n+    }\r\n+    if err := scanner.Err(); err != nil {\r\n+      fmt.Fprintln(os.Stderr, \"reading standard input:\", err)\r\n+    }\r\n+    if len(urls) > 0 {\r\n+      if !*plain && !*silent { fmt.Println(\"[+] Received urls from Stdin\") }\r\n+    }\r\n+  }\r\n+\r\n+  if *inputFile != \"\" {\r\n+    lines, err := readLines(*inputFile)\r\n+    if err != nil {\r\n+      log.Fatal(err)\r\n+    }\r\n+    if !*plain && !*silent { fmt.Println(\"[+] Set url file to\", *inputFile) }\r\n+    urls = append(urls, lines...)\r\n+  }\r\n+\r\n+  if *url != \"\" {\r\n+    if !*plain && !*silent { fmt.Println(\"[+] Set url to\", *url) }\r\n+    urls = append(urls, *url)\r\n+  }\r\n+\r\n+  if len(urls) == 0 {\r\n+    if !*plain && !*silent { fmt.Println(\"[!] No urls supplied\") }\r\n+    os.Exit(3)\r\n+  }\r\n+\r\n+  if *resolve && !*complete {\r\n+    if !*plain && !*silent { fmt.Println(\"[!] Resolve can only be used in combination with -complete\") }\r\n+    os.Exit(3)\r\n+  }\r\n+\r\n+  for _, e := range urls {\r\n+    if !*plain && !*silent { fmt.Println(\"[+] Getting sources from\", e) }\r\n+    sources := getScriptSrc(e)\r\n+\r\n+    if *complete {\r\n+      sources = completeUrls(sources, e)\r\n+    }\r\n+\r\n+    if *resolve {\r\n+      if *complete {\r\n+        if !*plain && !*silent { fmt.Println(\"[+] Resolving files\") }\r\n+        sources = resolveUrls(sources)\r\n+      } else {\r\n+        if !*plain && !*silent { fmt.Println(\"[-] Resolve can only be used in combination with -complete\") }\r\n+      }\r\n+    }\r\n+\r\n+    if !*silent {\r\n+      for _, i := range sources {\r\n+        fmt.Println(i)\r\n+      }\r\n+    }\r\n+\r\n+    if *outputFile != \"\" {\r\n+      allSources = append(allSources, sources...)\r\n+    }\r\n+\r\n+  }\r\n+\r\n+  // Save to file\r\n+  if *outputFile != \"\" {\r\n+    if !*plain && !*silent { fmt.Println(\"[+] Saving output to \", *outputFile) }\r\n+    if err := saveToFile(allSources, *outputFile); err != nil {\r\n+      log.Fatalf(\"saveToFile: %s\", err)\r\n+    }\r\n+  }\r\n+\r\n+}\r\n+\r\n+func saveToFile(sources []string, path string) error {\r\n+  file, err := os.Create(path)\r\n+  if err != nil {\r\n+    return err\r\n+  }\r\n+  defer file.Close()\r\n+\r\n+  w := bufio.NewWriter(file)\r\n+  for _, line := range sources {\r\n+    fmt.Fprintln(w, line)\r\n+  }\r\n+  return w.Flush()\r\n+}\r\n+\r\n+func getScriptSrc(url string) []string {\r\n+  // Request the HTML page.\r\n+  res, err := http.Get(url)\r\n+  if err != nil {\r\n+    log.Fatal(err)\r\n+  }\r\n+  defer res.Body.Close()\r\n+  if res.StatusCode != 200 {\r\n+    log.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)\r\n+  }\r\n+\r\n+  // Load the HTML document\r\n+  doc, err := goquery.NewDocumentFromReader(res.Body)\r\n+  if err != nil {\r\n+    log.Fatal(err)\r\n+  }\r\n+\r\n+  var sources []string\r\n+\r\n+  // Find the script tags, and get the src\r\n+  doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\r\n+    src, _ := s.Attr(\"src\")\r\n+    if src != \"\" {\r\n+      sources = append(sources, src)\r\n+    }\r\n+  })\r\n+\r\n+  return sources\r\n+}\r\n+\r\n+func readLines(path string) ([]string, error) {\r\n+  file, err := os.Open(path)\r\n+  if err != nil {\r\n+    return nil, err\r\n+  }\r\n+  defer file.Close()\r\n+\r\n+  var lines []string\r\n+  scanner := bufio.NewScanner(file)\r\n+  for scanner.Scan() {\r\n+    lines = append(lines, scanner.Text())\r\n+  }\r\n+  return lines, scanner.Err()\r\n+}\r\n+\r\n+func resolveUrls(s []string) ([]string) {\r\n+  for i := len(s)-1; i >= 0; i-- {\r\n+    resp, err := http.Get(s[i])\r\n+    if err != nil {\r\n+      log.Fatal(err)\r\n+    }\r\n+    if resp.StatusCode != 200 && resp.StatusCode != 304 {\r\n+      s = append(s[:i], s[i+1:]...)\r\n+    }\r\n+  }\r\n+  return s\r\n+}\r\n+\r\n+func completeUrls(s []string, url string) ([]string) {\r\n+  u, err := urlpkg.Parse(url)\r\n+  if err != nil {\r\n+    log.Fatal(err)\r\n+  }\r\n+\r\n+  for i, _ := range s {\r\n+    if strings.HasPrefix(s[i], \"//\") {\r\n+      s[i] = u.Scheme + \":\" + s[i]\r\n+    } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\r\n+      s[i] = u.Scheme + \"://\" + u.Host + s[i]\r\n+    } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\r\n+      s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\r\n+    }\r\n+  }\r\n+  return s\r\n+}\r\n", "diff_parsed": {"added": [[1, "package main"], [2, ""], [3, "import ("], [4, "  \"fmt\""], [5, "  \"log\""], [6, "  \"bufio\""], [7, "  \"flag\""], [8, "  \"os\""], [9, "  \"net/http\""], [10, "  \"strings\""], [11, "  urlpkg \"net/url\""], [12, ""], [13, "  \"github.com/PuerkitoBio/goquery\""], [14, ")"], [15, ""], [16, "func main() {"], [17, "  url := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")"], [18, "  outputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")"], [19, "  inputFile := flag.String(\"input\", \"\", \"Input file with urls\")"], [20, "  resolve := flag.Bool(\"resolve\", false, \"Output only existing files\")"], [21, "  complete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")"], [22, "  plain := flag.Bool(\"plain\", false, \"Output only the results\")"], [23, "  silent := flag.Bool(\"silent\", false, \"Dont output anything\")"], [24, "  flag.Parse()"], [25, ""], [26, "  var urls []string"], [27, "  var allSources []string"], [28, ""], [29, "  stat, _ := os.Stdin.Stat()"], [30, "  if (stat.Mode() & os.ModeCharDevice) == 0 {"], [31, "    scanner := bufio.NewScanner(os.Stdin)"], [32, "    for scanner.Scan() {"], [33, "      urls = append(urls, scanner.Text())"], [34, "    }"], [35, "    if err := scanner.Err(); err != nil {"], [36, "      fmt.Fprintln(os.Stderr, \"reading standard input:\", err)"], [37, "    }"], [38, "    if len(urls) > 0 {"], [39, "      if !*plain && !*silent { fmt.Println(\"[+] Received urls from Stdin\") }"], [40, "    }"], [41, "  }"], [42, ""], [43, "  if *inputFile != \"\" {"], [44, "    lines, err := readLines(*inputFile)"], [45, "    if err != nil {"], [46, "      log.Fatal(err)"], [47, "    }"], [48, "    if !*plain && !*silent { fmt.Println(\"[+] Set url file to\", *inputFile) }"], [49, "    urls = append(urls, lines...)"], [50, "  }"], [51, ""], [52, "  if *url != \"\" {"], [53, "    if !*plain && !*silent { fmt.Println(\"[+] Set url to\", *url) }"], [54, "    urls = append(urls, *url)"], [55, "  }"], [56, ""], [57, "  if len(urls) == 0 {"], [58, "    if !*plain && !*silent { fmt.Println(\"[!] No urls supplied\") }"], [59, "    os.Exit(3)"], [60, "  }"], [61, ""], [62, "  if *resolve && !*complete {"], [63, "    if !*plain && !*silent { fmt.Println(\"[!] Resolve can only be used in combination with -complete\") }"], [64, "    os.Exit(3)"], [65, "  }"], [66, ""], [67, "  for _, e := range urls {"], [68, "    if !*plain && !*silent { fmt.Println(\"[+] Getting sources from\", e) }"], [69, "    sources := getScriptSrc(e)"], [70, ""], [71, "    if *complete {"], [72, "      sources = completeUrls(sources, e)"], [73, "    }"], [74, ""], [75, "    if *resolve {"], [76, "      if *complete {"], [77, "        if !*plain && !*silent { fmt.Println(\"[+] Resolving files\") }"], [78, "        sources = resolveUrls(sources)"], [79, "      } else {"], [80, "        if !*plain && !*silent { fmt.Println(\"[-] Resolve can only be used in combination with -complete\") }"], [81, "      }"], [82, "    }"], [83, ""], [84, "    if !*silent {"], [85, "      for _, i := range sources {"], [86, "        fmt.Println(i)"], [87, "      }"], [88, "    }"], [89, ""], [90, "    if *outputFile != \"\" {"], [91, "      allSources = append(allSources, sources...)"], [92, "    }"], [93, ""], [94, "  }"], [95, ""], [96, "  // Save to file"], [97, "  if *outputFile != \"\" {"], [98, "    if !*plain && !*silent { fmt.Println(\"[+] Saving output to \", *outputFile) }"], [99, "    if err := saveToFile(allSources, *outputFile); err != nil {"], [100, "      log.Fatalf(\"saveToFile: %s\", err)"], [101, "    }"], [102, "  }"], [103, ""], [104, "}"], [105, ""], [106, "func saveToFile(sources []string, path string) error {"], [107, "  file, err := os.Create(path)"], [108, "  if err != nil {"], [109, "    return err"], [110, "  }"], [111, "  defer file.Close()"], [112, ""], [113, "  w := bufio.NewWriter(file)"], [114, "  for _, line := range sources {"], [115, "    fmt.Fprintln(w, line)"], [116, "  }"], [117, "  return w.Flush()"], [118, "}"], [119, ""], [120, "func getScriptSrc(url string) []string {"], [121, "  // Request the HTML page."], [122, "  res, err := http.Get(url)"], [123, "  if err != nil {"], [124, "    log.Fatal(err)"], [125, "  }"], [126, "  defer res.Body.Close()"], [127, "  if res.StatusCode != 200 {"], [128, "    log.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)"], [129, "  }"], [130, ""], [131, "  // Load the HTML document"], [132, "  doc, err := goquery.NewDocumentFromReader(res.Body)"], [133, "  if err != nil {"], [134, "    log.Fatal(err)"], [135, "  }"], [136, ""], [137, "  var sources []string"], [138, ""], [139, "  // Find the script tags, and get the src"], [140, "  doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {"], [141, "    src, _ := s.Attr(\"src\")"], [142, "    if src != \"\" {"], [143, "      sources = append(sources, src)"], [144, "    }"], [145, "  })"], [146, ""], [147, "  return sources"], [148, "}"], [149, ""], [150, "func readLines(path string) ([]string, error) {"], [151, "  file, err := os.Open(path)"], [152, "  if err != nil {"], [153, "    return nil, err"], [154, "  }"], [155, "  defer file.Close()"], [156, ""], [157, "  var lines []string"], [158, "  scanner := bufio.NewScanner(file)"], [159, "  for scanner.Scan() {"], [160, "    lines = append(lines, scanner.Text())"], [161, "  }"], [162, "  return lines, scanner.Err()"], [163, "}"], [164, ""], [165, "func resolveUrls(s []string) ([]string) {"], [166, "  for i := len(s)-1; i >= 0; i-- {"], [167, "    resp, err := http.Get(s[i])"], [168, "    if err != nil {"], [169, "      log.Fatal(err)"], [170, "    }"], [171, "    if resp.StatusCode != 200 && resp.StatusCode != 304 {"], [172, "      s = append(s[:i], s[i+1:]...)"], [173, "    }"], [174, "  }"], [175, "  return s"], [176, "}"], [177, ""], [178, "func completeUrls(s []string, url string) ([]string) {"], [179, "  u, err := urlpkg.Parse(url)"], [180, "  if err != nil {"], [181, "    log.Fatal(err)"], [182, "  }"], [183, ""], [184, "  for i, _ := range s {"], [185, "    if strings.HasPrefix(s[i], \"//\") {"], [186, "      s[i] = u.Scheme + \":\" + s[i]"], [187, "    } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {"], [188, "      s[i] = u.Scheme + \"://\" + u.Host + s[i]"], [189, "    } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {"], [190, "      s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]"], [191, "    }"], [192, "  }"], [193, "  return s"], [194, "}"]], "deleted": []}, "added_lines": 194, "deleted_lines": 0, "source_code": "package main\r\n\r\nimport (\r\n  \"fmt\"\r\n  \"log\"\r\n  \"bufio\"\r\n  \"flag\"\r\n  \"os\"\r\n  \"net/http\"\r\n  \"strings\"\r\n  urlpkg \"net/url\"\r\n\r\n  \"github.com/PuerkitoBio/goquery\"\r\n)\r\n\r\nfunc main() {\r\n  url := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\r\n  outputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\r\n  inputFile := flag.String(\"input\", \"\", \"Input file with urls\")\r\n  resolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\r\n  complete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\r\n  plain := flag.Bool(\"plain\", false, \"Output only the results\")\r\n  silent := flag.Bool(\"silent\", false, \"Dont output anything\")\r\n  flag.Parse()\r\n\r\n  var urls []string\r\n  var allSources []string\r\n\r\n  stat, _ := os.Stdin.Stat()\r\n  if (stat.Mode() & os.ModeCharDevice) == 0 {\r\n    scanner := bufio.NewScanner(os.Stdin)\r\n    for scanner.Scan() {\r\n      urls = append(urls, scanner.Text())\r\n    }\r\n    if err := scanner.Err(); err != nil {\r\n      fmt.Fprintln(os.Stderr, \"reading standard input:\", err)\r\n    }\r\n    if len(urls) > 0 {\r\n      if !*plain && !*silent { fmt.Println(\"[+] Received urls from Stdin\") }\r\n    }\r\n  }\r\n\r\n  if *inputFile != \"\" {\r\n    lines, err := readLines(*inputFile)\r\n    if err != nil {\r\n      log.Fatal(err)\r\n    }\r\n    if !*plain && !*silent { fmt.Println(\"[+] Set url file to\", *inputFile) }\r\n    urls = append(urls, lines...)\r\n  }\r\n\r\n  if *url != \"\" {\r\n    if !*plain && !*silent { fmt.Println(\"[+] Set url to\", *url) }\r\n    urls = append(urls, *url)\r\n  }\r\n\r\n  if len(urls) == 0 {\r\n    if !*plain && !*silent { fmt.Println(\"[!] No urls supplied\") }\r\n    os.Exit(3)\r\n  }\r\n\r\n  if *resolve && !*complete {\r\n    if !*plain && !*silent { fmt.Println(\"[!] Resolve can only be used in combination with -complete\") }\r\n    os.Exit(3)\r\n  }\r\n\r\n  for _, e := range urls {\r\n    if !*plain && !*silent { fmt.Println(\"[+] Getting sources from\", e) }\r\n    sources := getScriptSrc(e)\r\n\r\n    if *complete {\r\n      sources = completeUrls(sources, e)\r\n    }\r\n\r\n    if *resolve {\r\n      if *complete {\r\n        if !*plain && !*silent { fmt.Println(\"[+] Resolving files\") }\r\n        sources = resolveUrls(sources)\r\n      } else {\r\n        if !*plain && !*silent { fmt.Println(\"[-] Resolve can only be used in combination with -complete\") }\r\n      }\r\n    }\r\n\r\n    if !*silent {\r\n      for _, i := range sources {\r\n        fmt.Println(i)\r\n      }\r\n    }\r\n\r\n    if *outputFile != \"\" {\r\n      allSources = append(allSources, sources...)\r\n    }\r\n\r\n  }\r\n\r\n  // Save to file\r\n  if *outputFile != \"\" {\r\n    if !*plain && !*silent { fmt.Println(\"[+] Saving output to \", *outputFile) }\r\n    if err := saveToFile(allSources, *outputFile); err != nil {\r\n      log.Fatalf(\"saveToFile: %s\", err)\r\n    }\r\n  }\r\n\r\n}\r\n\r\nfunc saveToFile(sources []string, path string) error {\r\n  file, err := os.Create(path)\r\n  if err != nil {\r\n    return err\r\n  }\r\n  defer file.Close()\r\n\r\n  w := bufio.NewWriter(file)\r\n  for _, line := range sources {\r\n    fmt.Fprintln(w, line)\r\n  }\r\n  return w.Flush()\r\n}\r\n\r\nfunc getScriptSrc(url string) []string {\r\n  // Request the HTML page.\r\n  res, err := http.Get(url)\r\n  if err != nil {\r\n    log.Fatal(err)\r\n  }\r\n  defer res.Body.Close()\r\n  if res.StatusCode != 200 {\r\n    log.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)\r\n  }\r\n\r\n  // Load the HTML document\r\n  doc, err := goquery.NewDocumentFromReader(res.Body)\r\n  if err != nil {\r\n    log.Fatal(err)\r\n  }\r\n\r\n  var sources []string\r\n\r\n  // Find the script tags, and get the src\r\n  doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\r\n    src, _ := s.Attr(\"src\")\r\n    if src != \"\" {\r\n      sources = append(sources, src)\r\n    }\r\n  })\r\n\r\n  return sources\r\n}\r\n\r\nfunc readLines(path string) ([]string, error) {\r\n  file, err := os.Open(path)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  defer file.Close()\r\n\r\n  var lines []string\r\n  scanner := bufio.NewScanner(file)\r\n  for scanner.Scan() {\r\n    lines = append(lines, scanner.Text())\r\n  }\r\n  return lines, scanner.Err()\r\n}\r\n\r\nfunc resolveUrls(s []string) ([]string) {\r\n  for i := len(s)-1; i >= 0; i-- {\r\n    resp, err := http.Get(s[i])\r\n    if err != nil {\r\n      log.Fatal(err)\r\n    }\r\n    if resp.StatusCode != 200 && resp.StatusCode != 304 {\r\n      s = append(s[:i], s[i+1:]...)\r\n    }\r\n  }\r\n  return s\r\n}\r\n\r\nfunc completeUrls(s []string, url string) ([]string) {\r\n  u, err := urlpkg.Parse(url)\r\n  if err != nil {\r\n    log.Fatal(err)\r\n  }\r\n\r\n  for i, _ := range s {\r\n    if strings.HasPrefix(s[i], \"//\") {\r\n      s[i] = u.Scheme + \":\" + s[i]\r\n    } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\r\n      s[i] = u.Scheme + \"://\" + u.Host + s[i]\r\n    } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\r\n      s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\r\n    }\r\n  }\r\n  return s\r\n}\r\n", "source_code_before": null, "methods": [{"name": "main", "start_line": 16, "end_line": 104}, {"name": "saveToFile", "start_line": 106, "end_line": 118}, {"name": "", "start_line": 140, "end_line": 145}, {"name": "getScriptSrc", "start_line": 120, "end_line": 148}, {"name": "readLines", "start_line": 150, "end_line": 163}, {"name": "resolveUrls", "start_line": 165, "end_line": 176}, {"name": "completeUrls", "start_line": 178, "end_line": 194}], "methods_before": [], "changed_methods": [{"name": "resolveUrls", "start_line": 165, "end_line": 176}, {"name": "", "start_line": 140, "end_line": 145}, {"name": "readLines", "start_line": 150, "end_line": 163}, {"name": "saveToFile", "start_line": 106, "end_line": 118}, {"name": "main", "start_line": 16, "end_line": 104}, {"name": "completeUrls", "start_line": 178, "end_line": 194}, {"name": "getScriptSrc", "start_line": 120, "end_line": 148}], "nloc": 161, "complexity": 63, "token_count": 1131}], "dmm_unit_size": 0.2866666666666667, "dmm_unit_complexity": 0.4, "dmm_unit_interfacing": 1.0},
    {"hash": "629f9f8e3eca30f5e2a7a0742150c45def1c5e00", "msg": "Create README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 17:55:25+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 17:55:25+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["0dcc9d110aa788443fc354ec8ee1f194918ab045"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 0, "insertions": 3, "lines": 3, "files": 1, "modified_files": [{"old_path": null, "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,3 @@\n+# getJS\n+getJS is a tool to extract all the javascript files from a set of given urls.\n+The urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n", "diff_parsed": {"added": [[1, "# getJS"], [2, "getJS is a tool to extract all the javascript files from a set of given urls."], [3, "The urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files."]], "deleted": []}, "added_lines": 3, "deleted_lines": 0, "source_code": "# getJS\ngetJS is a tool to extract all the javascript files from a set of given urls.\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n", "source_code_before": null, "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "0752dd41de6d6d2f79e021e63bc0c0a0a14e32a4", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 17:55:39+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 17:55:39+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["629f9f8e3eca30f5e2a7a0742150c45def1c5e00"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -1,3 +1,3 @@\n # getJS\n-getJS is a tool to extract all the javascript files from a set of given urls.\n+getJS is a tool to extract all the javascript files from a set of given urls.  \n The urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n", "diff_parsed": {"added": [[2, "getJS is a tool to extract all the javascript files from a set of given urls."]], "deleted": [[2, "getJS is a tool to extract all the javascript files from a set of given urls."]]}, "added_lines": 1, "deleted_lines": 1, "source_code": "# getJS\ngetJS is a tool to extract all the javascript files from a set of given urls.  \nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n", "source_code_before": "# getJS\ngetJS is a tool to extract all the javascript files from a set of given urls.\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "79971cc451b22586e6dd9917a45ae0377ba0504d", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 18:12:48+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 18:12:48+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["0752dd41de6d6d2f79e021e63bc0c0a0a14e32a4"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 0, "insertions": 35, "lines": 35, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -1,3 +1,38 @@\n+![GitHub](https://img.shields.io/github/license/mashape/apistatus.svg)  \n+  \n # getJS\n+\n getJS is a tool to extract all the javascript files from a set of given urls.  \n+\n The urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n+\n+## Prerequisites\n+\n+Make sure you have [GO](https://golang.org/) installed on your system.  \n+\n+### Installing\n+\n+getJS is written in GO. You can install it with `go get`:\n+\n+```\n+go get github.com/003random/getJS\n+```\n+\n+## Built With\n+\n+* [GO](http://golang.org/) - GOlanguage\n+* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n+\n+\n+## Contributing\n+\n+You are free to submit any issues of pull requests :)\n+\n+## License\n+\n+This project is licensed under the MIT License.\n+\n+## Acknowledgments\n+\n+* @jimen0 for helping getting me started with GO\n+\n", "diff_parsed": {"added": [[1, "![GitHub](https://img.shields.io/github/license/mashape/apistatus.svg)"], [2, ""], [4, ""], [6, ""], [8, ""], [9, "## Prerequisites"], [10, ""], [11, "Make sure you have [GO](https://golang.org/) installed on your system."], [12, ""], [13, "### Installing"], [14, ""], [15, "getJS is written in GO. You can install it with `go get`:"], [16, ""], [17, "```"], [18, "go get github.com/003random/getJS"], [19, "```"], [20, ""], [21, "## Built With"], [22, ""], [23, "* [GO](http://golang.org/) - GOlanguage"], [24, "* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO"], [25, ""], [26, ""], [27, "## Contributing"], [28, ""], [29, "You are free to submit any issues of pull requests :)"], [30, ""], [31, "## License"], [32, ""], [33, "This project is licensed under the MIT License."], [34, ""], [35, "## Acknowledgments"], [36, ""], [37, "* @jimen0 for helping getting me started with GO"], [38, ""]], "deleted": []}, "added_lines": 35, "deleted_lines": 0, "source_code": "![GitHub](https://img.shields.io/github/license/mashape/apistatus.svg)  \n  \n# getJS\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* @jimen0 for helping getting me started with GO\n\n", "source_code_before": "# getJS\ngetJS is a tool to extract all the javascript files from a set of given urls.  \nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "5d78b92142c095f55a5302af2c861a94cd97a7f5", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 18:26:00+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 18:26:00+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["79971cc451b22586e6dd9917a45ae0377ba0504d"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 2, "insertions": 2, "lines": 4, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -1,6 +1,6 @@\n-![GitHub](https://img.shields.io/github/license/mashape/apistatus.svg)  \n-  \n # getJS\n+[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n+[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n \n getJS is a tool to extract all the javascript files from a set of given urls.  \n \n", "diff_parsed": {"added": [[2, "[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)"], [3, "[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)"]], "deleted": [[1, "![GitHub](https://img.shields.io/github/license/mashape/apistatus.svg)"], [2, ""]]}, "added_lines": 2, "deleted_lines": 2, "source_code": "# getJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* @jimen0 for helping getting me started with GO\n\n", "source_code_before": "![GitHub](https://img.shields.io/github/license/mashape/apistatus.svg)  \n  \n# getJS\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* @jimen0 for helping getting me started with GO\n\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "d5ddfdbac48e85a322cba78c275a944e1c05dd10", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 18:26:11+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 18:26:11+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["5d78b92142c095f55a5302af2c861a94cd97a7f5"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -1,4 +1,4 @@\n-# getJS\n+# GetJS\n [![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n [![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n \n", "diff_parsed": {"added": [[1, "# GetJS"]], "deleted": [[1, "# getJS"]]}, "added_lines": 1, "deleted_lines": 1, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* @jimen0 for helping getting me started with GO\n\n", "source_code_before": "# getJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* @jimen0 for helping getting me started with GO\n\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "888afcd2ce06d11c9a4c31af7dff451e78632c5b", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 18:26:59+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 18:26:59+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["d5ddfdbac48e85a322cba78c275a944e1c05dd10"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -34,5 +34,5 @@ This project is licensed under the MIT License.\n \n ## Acknowledgments\n \n-* @jimen0 for helping getting me started with GO\n+* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n \n", "diff_parsed": {"added": [[37, "* [@jimen0](https://github.com/jimen0) for helping getting me started with GO"]], "deleted": [[37, "* @jimen0 for helping getting me started with GO"]]}, "added_lines": 1, "deleted_lines": 1, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* @jimen0 for helping getting me started with GO\n\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "2688855e76f58d637e2c029996a9a685a9600a0e", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 18:37:19+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 18:37:19+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["888afcd2ce06d11c9a4c31af7dff451e78632c5b"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 0, "insertions": 18, "lines": 18, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -18,6 +18,24 @@ getJS is written in GO. You can install it with `go get`:\n go get github.com/003random/getJS\n ```\n \n+# Usage\n+\n+```bash\n+getJS -h\n+```\n+This will display help for the tool. Here are all the switches it supports.\n+\n+| Flag | Description | Example |\n+|------|-------------|---------|\n+| -url   | The url to get the javascript sources from | getJS -url=https://poc-server.com |\n+| -input   | Input file with urls            | getJS -input=domains.txt |\n+| -output   | The file where to save the output to        | getJS -output=output.txt |\n+| -plain  | Only output the results | getJS -plain |\n+| -silent  | Output nothing           | getJS -silent |\n+| -complete  | Complete the urls. e.g. /js/index.js -> https://example.com/js/index.js  | getJS -complete |\n+| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n+\n+\n ## Built With\n \n * [GO](http://golang.org/) - GOlanguage\n", "diff_parsed": {"added": [[21, "# Usage"], [22, ""], [23, "```bash"], [24, "getJS -h"], [25, "```"], [26, "This will display help for the tool. Here are all the switches it supports."], [27, ""], [28, "| Flag | Description | Example |"], [29, "|------|-------------|---------|"], [30, "| -url   | The url to get the javascript sources from | getJS -url=https://poc-server.com |"], [31, "| -input   | Input file with urls            | getJS -input=domains.txt |"], [32, "| -output   | The file where to save the output to        | getJS -output=output.txt |"], [33, "| -plain  | Only output the results | getJS -plain |"], [34, "| -silent  | Output nothing           | getJS -silent |"], [35, "| -complete  | Complete the urls. e.g. /js/index.js -> https://example.com/js/index.js  | getJS -complete |"], [36, "| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |"], [37, ""], [38, ""]], "deleted": []}, "added_lines": 18, "deleted_lines": 0, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage\n\n```bash\ngetJS -h\n```\nThis will display help for the tool. Here are all the switches it supports.\n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=https://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> https://example.com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "7133c16f0e6d2f2d6859872607e5aa1ba2bd9f5e", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 18:39:22+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 18:39:22+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["2688855e76f58d637e2c029996a9a685a9600a0e"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 7, "lines": 8, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -23,7 +23,7 @@ go get github.com/003random/getJS\n ```bash\n getJS -h\n ```\n-This will display help for the tool. Here are all the switches it supports.\n+  \n \n | Flag | Description | Example |\n |------|-------------|---------|\n@@ -35,6 +35,12 @@ This will display help for the tool. Here are all the switches it supports.\n | -complete  | Complete the urls. e.g. /js/index.js -> https://example.com/js/index.js  | getJS -complete |\n | -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n \n+## Examples  \n+getJS supports stdin data. To pip urls to getJS, use the following (-plain is optional).  \n+\n+```\n+cat domains.txt | getJS -plain\n+```\n \n ## Built With\n \n", "diff_parsed": {"added": [[26, ""], [38, "## Examples"], [39, "getJS supports stdin data. To pip urls to getJS, use the following (-plain is optional)."], [40, ""], [41, "```"], [42, "cat domains.txt | getJS -plain"], [43, "```"]], "deleted": [[26, "This will display help for the tool. Here are all the switches it supports."]]}, "added_lines": 7, "deleted_lines": 1, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage\n\n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=https://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> https://example.com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pip urls to getJS, use the following (-plain is optional).  \n\n```\ncat domains.txt | getJS -plain\n```\n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage\n\n```bash\ngetJS -h\n```\nThis will display help for the tool. Here are all the switches it supports.\n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=https://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> https://example.com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "ed6073e598f92182a1ea1aca1a26ddd1fd7da68e", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 18:47:40+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 18:47:40+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["7133c16f0e6d2f2d6859872607e5aa1ba2bd9f5e"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 2, "insertions": 37, "lines": 39, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -36,11 +36,46 @@ getJS -h\n | -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n \n ## Examples  \n-getJS supports stdin data. To pip urls to getJS, use the following (-plain is optional).  \n+getJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n \n-```\n+```bash\n cat domains.txt | getJS -plain\n+```  \n+  \n+If you want to save all the js files locally, you can use:  \n+```bash\n+getJS -url=https://poc-server.com -plain | xargs wget\n ```\n+  \n+If you would like the output to be in JSON format, you can combine it with [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n+``bash\n+getJS -url=https://poc-server.com -plain | tojson\n+```  \n+  \n+To feed urls from a file use:  \n+```bash\n+getJS -input=domains.txt\n+```  \n+  \n+To only feed 1 url and only show the results, use:  \n+```bash\n+getJS -url=https://poc-server.com -plain\n+```  \n+  \n+If you want to save the results to a file, and don't display anything, use:  \n+```bash\n+getJS -url=https://poc-server.com -output=results.txt\n+```  \n+  \n+If you want to have a list of full urls as output use:  \n+```bash\n+getJS -url=domains.txt -complete\n+```  \n+  \n+If you want to only show the existing js files, use:  \n+```bash\n+getJS -url=domains.txt -complete -resolve\n+```  \n \n ## Built With\n \n", "diff_parsed": {"added": [[39, "getJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional)."], [41, "```bash"], [43, "```"], [44, ""], [45, "If you want to save all the js files locally, you can use:"], [46, "```bash"], [47, "getJS -url=https://poc-server.com -plain | xargs wget"], [49, ""], [50, "If you would like the output to be in JSON format, you can combine it with [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):"], [51, "``bash"], [52, "getJS -url=https://poc-server.com -plain | tojson"], [53, "```"], [54, ""], [55, "To feed urls from a file use:"], [56, "```bash"], [57, "getJS -input=domains.txt"], [58, "```"], [59, ""], [60, "To only feed 1 url and only show the results, use:"], [61, "```bash"], [62, "getJS -url=https://poc-server.com -plain"], [63, "```"], [64, ""], [65, "If you want to save the results to a file, and don't display anything, use:"], [66, "```bash"], [67, "getJS -url=https://poc-server.com -output=results.txt"], [68, "```"], [69, ""], [70, "If you want to have a list of full urls as output use:"], [71, "```bash"], [72, "getJS -url=domains.txt -complete"], [73, "```"], [74, ""], [75, "If you want to only show the existing js files, use:"], [76, "```bash"], [77, "getJS -url=domains.txt -complete -resolve"], [78, "```"]], "deleted": [[39, "getJS supports stdin data. To pip urls to getJS, use the following (-plain is optional)."], [41, "```"]]}, "added_lines": 37, "deleted_lines": 2, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage\n\n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=https://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> https://example.com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\ncat domains.txt | getJS -plain\n```  \n  \nIf you want to save all the js files locally, you can use:  \n```bash\ngetJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n``bash\ngetJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\ngetJS -input=domains.txt\n```  \n  \nTo only feed 1 url and only show the results, use:  \n```bash\ngetJS -url=https://poc-server.com -plain\n```  \n  \nIf you want to save the results to a file, and don't display anything, use:  \n```bash\ngetJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\ngetJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\ngetJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage\n\n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=https://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> https://example.com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pip urls to getJS, use the following (-plain is optional).  \n\n```\ncat domains.txt | getJS -plain\n```\n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "a4d7e559cbc2711fff132244a8b4c3c45f23cb82", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 18:53:42+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 18:53:42+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["ed6073e598f92182a1ea1aca1a26ddd1fd7da68e"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 17, "insertions": 15, "lines": 32, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -18,8 +18,11 @@ getJS is written in GO. You can install it with `go get`:\n go get github.com/003random/getJS\n ```\n \n-# Usage\n-\n+# Usage  \n+Note: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \n+Example: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n+  \n+To get all  options, do:  \n ```bash\n getJS -h\n ```\n@@ -39,42 +42,37 @@ getJS -h\n getJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n \n ```bash\n-cat domains.txt | getJS -plain\n+$ cat domains.txt | getJS -plain\n ```  \n   \n-If you want to save all the js files locally, you can use:  \n+To save the js files, you can use:  \n ```bash\n-getJS -url=https://poc-server.com -plain | xargs wget\n+$ getJS -url=https://poc-server.com -plain | xargs wget\n ```\n   \n If you would like the output to be in JSON format, you can combine it with [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n-``bash\n-getJS -url=https://poc-server.com -plain | tojson\n-```  \n-  \n-To feed urls from a file use:  \n ```bash\n-getJS -input=domains.txt\n+$ getJS -url=https://poc-server.com -plain | tojson\n ```  \n   \n-To only feed 1 url and only show the results, use:  \n+To feed urls from a file use:  \n ```bash\n-getJS -url=https://poc-server.com -plain\n+$ getJS -input=domains.txt\n ```  \n   \n-If you want to save the results to a file, and don't display anything, use:  \n+To save the results to a file, and don't display anything, use:  \n ```bash\n-getJS -url=https://poc-server.com -output=results.txt\n+$ getJS -url=https://poc-server.com -output=results.txt\n ```  \n   \n If you want to have a list of full urls as output use:  \n ```bash\n-getJS -url=domains.txt -complete\n+$ getJS -url=domains.txt -complete\n ```  \n   \n If you want to only show the existing js files, use:  \n ```bash\n-getJS -url=domains.txt -complete -resolve\n+$ getJS -url=domains.txt -complete -resolve\n ```  \n \n ## Built With\n", "diff_parsed": {"added": [[21, "# Usage"], [22, "Note: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)"], [23, "Example: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`"], [24, ""], [25, "To get all  options, do:"], [45, "$ cat domains.txt | getJS -plain"], [48, "To save the js files, you can use:"], [50, "$ getJS -url=https://poc-server.com -plain | xargs wget"], [55, "$ getJS -url=https://poc-server.com -plain | tojson"], [58, "To feed urls from a file use:"], [60, "$ getJS -input=domains.txt"], [63, "To save the results to a file, and don't display anything, use:"], [65, "$ getJS -url=https://poc-server.com -output=results.txt"], [70, "$ getJS -url=domains.txt -complete"], [75, "$ getJS -url=domains.txt -complete -resolve"]], "deleted": [[21, "# Usage"], [22, ""], [42, "cat domains.txt | getJS -plain"], [45, "If you want to save all the js files locally, you can use:"], [47, "getJS -url=https://poc-server.com -plain | xargs wget"], [51, "``bash"], [52, "getJS -url=https://poc-server.com -plain | tojson"], [53, "```"], [54, ""], [55, "To feed urls from a file use:"], [57, "getJS -input=domains.txt"], [60, "To only feed 1 url and only show the results, use:"], [62, "getJS -url=https://poc-server.com -plain"], [65, "If you want to save the results to a file, and don't display anything, use:"], [67, "getJS -url=https://poc-server.com -output=results.txt"], [72, "getJS -url=domains.txt -complete"], [77, "getJS -url=domains.txt -complete -resolve"]]}, "added_lines": 15, "deleted_lines": 17, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=https://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> https://example.com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage\n\n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=https://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> https://example.com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\ncat domains.txt | getJS -plain\n```  \n  \nIf you want to save all the js files locally, you can use:  \n```bash\ngetJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n``bash\ngetJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\ngetJS -input=domains.txt\n```  \n  \nTo only feed 1 url and only show the results, use:  \n```bash\ngetJS -url=https://poc-server.com -plain\n```  \n  \nIf you want to save the results to a file, and don't display anything, use:  \n```bash\ngetJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\ngetJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\ngetJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "57e6d71b3698548a0d34de2ab85b60439be48b94", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 18:55:21+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 18:55:21+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["a4d7e559cbc2711fff132244a8b4c3c45f23cb82"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 2, "insertions": 2, "lines": 4, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -30,12 +30,12 @@ getJS -h\n \n | Flag | Description | Example |\n |------|-------------|---------|\n-| -url   | The url to get the javascript sources from | getJS -url=https://poc-server.com |\n+| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n | -input   | Input file with urls            | getJS -input=domains.txt |\n | -output   | The file where to save the output to        | getJS -output=output.txt |\n | -plain  | Only output the results | getJS -plain |\n | -silent  | Output nothing           | getJS -silent |\n-| -complete  | Complete the urls. e.g. /js/index.js -> https://example.com/js/index.js  | getJS -complete |\n+| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n | -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n \n ## Examples  \n", "diff_parsed": {"added": [[33, "| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |"], [38, "| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |"]], "deleted": [[33, "| -url   | The url to get the javascript sources from | getJS -url=https://poc-server.com |"], [38, "| -complete  | Complete the urls. e.g. /js/index.js -> https://example.com/js/index.js  | getJS -complete |"]]}, "added_lines": 2, "deleted_lines": 2, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=https://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> https://example.com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "6ae3b69ff3e9c53891525c9cea56e6f52d0b40c8", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 18:56:08+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 18:56:08+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["57e6d71b3698548a0d34de2ab85b60439be48b94"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -50,7 +50,7 @@ To save the js files, you can use:\n $ getJS -url=https://poc-server.com -plain | xargs wget\n ```\n   \n-If you would like the output to be in JSON format, you can combine it with [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n+If you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n ```bash\n $ getJS -url=https://poc-server.com -plain | tojson\n ```  \n", "diff_parsed": {"added": [[53, "If you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):"]], "deleted": [[53, "If you would like the output to be in JSON format, you can combine it with [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):"]]}, "added_lines": 1, "deleted_lines": 1, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "312aadfde66abe05f69545c598e7b32e79f90467", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 18:57:34+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 18:57:34+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["6ae3b69ff3e9c53891525c9cea56e6f52d0b40c8"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 3, "lines": 4, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -4,7 +4,9 @@\n \n getJS is a tool to extract all the javascript files from a set of given urls.  \n \n-The urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n+The urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n+\n+varying from completing the urls, to resolving the files.\n \n ## Prerequisites\n \n", "diff_parsed": {"added": [[7, "The urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options,"], [8, ""], [9, "varying from completing the urls, to resolving the files."]], "deleted": [[7, "The urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files."]]}, "added_lines": 3, "deleted_lines": 1, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, ranging from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "6964b6e14544cb5ff53d19c1a3367a79f9dc0db0", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 19:03:08+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 19:03:08+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["312aadfde66abe05f69545c598e7b32e79f90467"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 0, "insertions": 1, "lines": 1, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -95,3 +95,4 @@ This project is licensed under the MIT License.\n \n * [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n \n+*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "diff_parsed": {"added": [[98, "*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*"]], "deleted": []}, "added_lines": 1, "deleted_lines": 0, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "c04b76887a586826900821288779f9afb4cef71e", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 19:03:21+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 19:03:21+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["6964b6e14544cb5ff53d19c1a3367a79f9dc0db0"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 2, "lines": 3, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -94,5 +94,6 @@ This project is licensed under the MIT License.\n ## Acknowledgments\n \n * [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n-\n+  \n+    \n *This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "diff_parsed": {"added": [[97, ""], [98, ""]], "deleted": [[97, ""]]}, "added_lines": 2, "deleted_lines": 1, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n\n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "aec84847de835c8c21eb5836861ab76ae2de073b", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 19:04:02+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 19:04:02+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["c04b76887a586826900821288779f9afb4cef71e"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 0, "insertions": 2, "lines": 2, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -95,5 +95,7 @@ This project is licensed under the MIT License.\n \n * [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n   \n+\n+\n     \n *This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "diff_parsed": {"added": [[98, ""], [99, ""]], "deleted": []}, "added_lines": 2, "deleted_lines": 0, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n\n\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "05ad1b673edfd2001ee7cef3bc1efac8298772cc", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 19:04:50+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 19:04:50+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["aec84847de835c8c21eb5836861ab76ae2de073b"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -95,7 +95,7 @@ This project is licensed under the MIT License.\n \n * [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n   \n-\n+---\n \n     \n *This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "diff_parsed": {"added": [[98, "---"]], "deleted": [[98, ""]]}, "added_lines": 1, "deleted_lines": 1, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n---\n\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n\n\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "af954a4c19fae9cdb31d2c6f4f3a18d96bd4c079", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 19:05:06+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 19:05:06+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["05ad1b673edfd2001ee7cef3bc1efac8298772cc"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -95,7 +95,7 @@ This project is licensed under the MIT License.\n \n * [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n   \n+    \n ---\n-\n     \n *This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "diff_parsed": {"added": [[98, ""]], "deleted": [[99, ""]]}, "added_lines": 1, "deleted_lines": 1, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n---\n\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "f7024aad232d42cf477e921913b659933c3e5d21", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 21:01:11+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 21:01:11+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["af954a4c19fae9cdb31d2c6f4f3a18d96bd4c079"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 0, "insertions": 2, "lines": 2, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -77,6 +77,8 @@ If you want to only show the existing js files, use:\n $ getJS -url=domains.txt -complete -resolve\n ```  \n \n+![screenshot](https://poc-server.com/getJS/screenshot.png)\n+\n ## Built With\n \n * [GO](http://golang.org/) - GOlanguage\n", "diff_parsed": {"added": [[80, "![screenshot](https://poc-server.com/getJS/screenshot.png)"], [81, ""]], "deleted": []}, "added_lines": 2, "deleted_lines": 0, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n![screenshot](https://poc-server.com/getJS/screenshot.png)\n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "79282d0325a73e7b3114d301def11d76205e5322", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 21:02:04+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 21:02:04+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["f7024aad232d42cf477e921913b659933c3e5d21"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 2, "insertions": 4, "lines": 6, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -41,6 +41,10 @@ getJS -h\n | -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n \n ## Examples  \n+  \n+ ![screenshot](https://poc-server.com/getJS/screenshot.png)\n+\n+    \n getJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n \n ```bash\n@@ -77,8 +81,6 @@ If you want to only show the existing js files, use:\n $ getJS -url=domains.txt -complete -resolve\n ```  \n \n-![screenshot](https://poc-server.com/getJS/screenshot.png)\n-\n ## Built With\n \n * [GO](http://golang.org/) - GOlanguage\n", "diff_parsed": {"added": [[44, ""], [45, " ![screenshot](https://poc-server.com/getJS/screenshot.png)"], [46, ""], [47, ""]], "deleted": [[80, "![screenshot](https://poc-server.com/getJS/screenshot.png)"], [81, ""]]}, "added_lines": 4, "deleted_lines": 2, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n![screenshot](https://poc-server.com/getJS/screenshot.png)\n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "84eb471a873590e22e31010c0c6bf8887f7294b0", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 22:09:37+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 22:09:37+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["79282d0325a73e7b3114d301def11d76205e5322"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -89,7 +89,7 @@ $ getJS -url=domains.txt -complete -resolve\n \n ## Contributing\n \n-You are free to submit any issues of pull requests :)\n+You are free to submit any issues and/or pull requests :)\n \n ## License\n \n", "diff_parsed": {"added": [[92, "You are free to submit any issues and/or pull requests :)"]], "deleted": [[92, "You are free to submit any issues of pull requests :)"]]}, "added_lines": 1, "deleted_lines": 1, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues and/or pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues of pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "651c51d7049032918840bfdae59a0e6b98978360", "msg": "Formatted", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-09 22:39:19+01:00", "author_timezone": -3600, "committer_date": "2018-11-09 22:39:19+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["84eb471a873590e22e31010c0c6bf8887f7294b0"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 173, "insertions": 191, "lines": 364, "files": 1, "modified_files": [{"old_path": "main.go", "new_path": "main.go", "filename": "main.go", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -1,194 +1,212 @@\n package main\r\n \r\n import (\r\n-  \"fmt\"\r\n-  \"log\"\r\n-  \"bufio\"\r\n-  \"flag\"\r\n-  \"os\"\r\n-  \"net/http\"\r\n-  \"strings\"\r\n-  urlpkg \"net/url\"\r\n-\r\n-  \"github.com/PuerkitoBio/goquery\"\r\n+        \"bufio\"\r\n+        \"flag\"\r\n+        \"fmt\"\r\n+        \"log\"\r\n+        \"net/http\"\r\n+        urlpkg \"net/url\"\r\n+        \"os\"\r\n+        \"strings\"\r\n+\r\n+        \"github.com/PuerkitoBio/goquery\"\r\n )\r\n \r\n func main() {\r\n-  url := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\r\n-  outputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\r\n-  inputFile := flag.String(\"input\", \"\", \"Input file with urls\")\r\n-  resolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\r\n-  complete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\r\n-  plain := flag.Bool(\"plain\", false, \"Output only the results\")\r\n-  silent := flag.Bool(\"silent\", false, \"Dont output anything\")\r\n-  flag.Parse()\r\n-\r\n-  var urls []string\r\n-  var allSources []string\r\n-\r\n-  stat, _ := os.Stdin.Stat()\r\n-  if (stat.Mode() & os.ModeCharDevice) == 0 {\r\n-    scanner := bufio.NewScanner(os.Stdin)\r\n-    for scanner.Scan() {\r\n-      urls = append(urls, scanner.Text())\r\n-    }\r\n-    if err := scanner.Err(); err != nil {\r\n-      fmt.Fprintln(os.Stderr, \"reading standard input:\", err)\r\n-    }\r\n-    if len(urls) > 0 {\r\n-      if !*plain && !*silent { fmt.Println(\"[+] Received urls from Stdin\") }\r\n-    }\r\n-  }\r\n-\r\n-  if *inputFile != \"\" {\r\n-    lines, err := readLines(*inputFile)\r\n-    if err != nil {\r\n-      log.Fatal(err)\r\n-    }\r\n-    if !*plain && !*silent { fmt.Println(\"[+] Set url file to\", *inputFile) }\r\n-    urls = append(urls, lines...)\r\n-  }\r\n-\r\n-  if *url != \"\" {\r\n-    if !*plain && !*silent { fmt.Println(\"[+] Set url to\", *url) }\r\n-    urls = append(urls, *url)\r\n-  }\r\n-\r\n-  if len(urls) == 0 {\r\n-    if !*plain && !*silent { fmt.Println(\"[!] No urls supplied\") }\r\n-    os.Exit(3)\r\n-  }\r\n-\r\n-  if *resolve && !*complete {\r\n-    if !*plain && !*silent { fmt.Println(\"[!] Resolve can only be used in combination with -complete\") }\r\n-    os.Exit(3)\r\n-  }\r\n-\r\n-  for _, e := range urls {\r\n-    if !*plain && !*silent { fmt.Println(\"[+] Getting sources from\", e) }\r\n-    sources := getScriptSrc(e)\r\n-\r\n-    if *complete {\r\n-      sources = completeUrls(sources, e)\r\n-    }\r\n-\r\n-    if *resolve {\r\n-      if *complete {\r\n-        if !*plain && !*silent { fmt.Println(\"[+] Resolving files\") }\r\n-        sources = resolveUrls(sources)\r\n-      } else {\r\n-        if !*plain && !*silent { fmt.Println(\"[-] Resolve can only be used in combination with -complete\") }\r\n-      }\r\n-    }\r\n-\r\n-    if !*silent {\r\n-      for _, i := range sources {\r\n-        fmt.Println(i)\r\n-      }\r\n-    }\r\n-\r\n-    if *outputFile != \"\" {\r\n-      allSources = append(allSources, sources...)\r\n-    }\r\n-\r\n-  }\r\n-\r\n-  // Save to file\r\n-  if *outputFile != \"\" {\r\n-    if !*plain && !*silent { fmt.Println(\"[+] Saving output to \", *outputFile) }\r\n-    if err := saveToFile(allSources, *outputFile); err != nil {\r\n-      log.Fatalf(\"saveToFile: %s\", err)\r\n-    }\r\n-  }\r\n+        url := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\r\n+        outputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\r\n+        inputFile := flag.String(\"input\", \"\", \"Input file with urls\")\r\n+        resolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\r\n+        complete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\r\n+        plain := flag.Bool(\"plain\", false, \"Output only the results\")\r\n+        silent := flag.Bool(\"silent\", false, \"Dont output anything\")\r\n+        flag.Parse()\r\n+\r\n+        var urls []string\r\n+        var allSources []string\r\n+\r\n+        stat, _ := os.Stdin.Stat()\r\n+        if (stat.Mode() & os.ModeCharDevice) == 0 {\r\n+                scanner := bufio.NewScanner(os.Stdin)\r\n+                for scanner.Scan() {\r\n+                        urls = append(urls, scanner.Text())\r\n+                }\r\n+                if err := scanner.Err(); err != nil {\r\n+                        fmt.Fprintln(os.Stderr, \"reading standard input:\", err)\r\n+                }\r\n+                if len(urls) > 0 {\r\n+                        if !*plain && !*silent {\r\n+                                fmt.Println(\"[+] Received urls from Stdin\")\r\n+                        }\r\n+                }\r\n+        }\r\n+\r\n+        if *inputFile != \"\" {\r\n+                lines, err := readLines(*inputFile)\r\n+                if err != nil {\r\n+                        log.Fatal(err)\r\n+                }\r\n+                if !*plain && !*silent {\r\n+                        fmt.Println(\"[+] Set url file to\", *inputFile)\r\n+                }\r\n+                urls = append(urls, lines...)\r\n+        }\r\n+\r\n+        if *url != \"\" {\r\n+                if !*plain && !*silent {\r\n+                        fmt.Println(\"[+] Set url to\", *url)\r\n+                }\r\n+                urls = append(urls, *url)\r\n+        }\r\n+\r\n+        if len(urls) == 0 {\r\n+                if !*plain && !*silent {\r\n+                        fmt.Println(\"[!] No urls supplied\")\r\n+                }\r\n+                os.Exit(3)\r\n+        }\r\n+\r\n+        if *resolve && !*complete {\r\n+                if !*plain && !*silent {\r\n+                        fmt.Println(\"[!] Resolve can only be used in combination with -complete\")\r\n+                }\r\n+                os.Exit(3)\r\n+        }\r\n+\r\n+        for _, e := range urls {\r\n+                if !*plain && !*silent {\r\n+                        fmt.Println(\"[+] Getting sources from\", e)\r\n+                }\r\n+                sources := getScriptSrc(e)\r\n+\r\n+                if *complete {\r\n+                        sources = completeUrls(sources, e)\r\n+                }\r\n+\r\n+                if *resolve {\r\n+                        if *complete {\r\n+                                if !*plain && !*silent {\r\n+                                        fmt.Println(\"[+] Resolving files\")\r\n+                                }\r\n+                                sources = resolveUrls(sources)\r\n+                        } else {\r\n+                                if !*plain && !*silent {\r\n+                                        fmt.Println(\"[-] Resolve can only be used in combination with -complete\")\r\n+                                }\r\n+                        }\r\n+                }\r\n+\r\n+                if !*silent {\r\n+                        for _, i := range sources {\r\n+                                fmt.Println(i)\r\n+                        }\r\n+                }\r\n+\r\n+                if *outputFile != \"\" {\r\n+                        allSources = append(allSources, sources...)\r\n+                }\r\n+\r\n+        }\r\n+\r\n+        // Save to file\r\n+        if *outputFile != \"\" {\r\n+                if !*plain && !*silent {\r\n+                        fmt.Println(\"[+] Saving output to \", *outputFile)\r\n+                }\r\n+                if err := saveToFile(allSources, *outputFile); err != nil {\r\n+                        log.Fatalf(\"saveToFile: %s\", err)\r\n+                }\r\n+        }\r\n \r\n }\r\n \r\n func saveToFile(sources []string, path string) error {\r\n-  file, err := os.Create(path)\r\n-  if err != nil {\r\n-    return err\r\n-  }\r\n-  defer file.Close()\r\n-\r\n-  w := bufio.NewWriter(file)\r\n-  for _, line := range sources {\r\n-    fmt.Fprintln(w, line)\r\n-  }\r\n-  return w.Flush()\r\n+        file, err := os.Create(path)\r\n+        if err != nil {\r\n+                return err\r\n+        }\r\n+        defer file.Close()\r\n+\r\n+        w := bufio.NewWriter(file)\r\n+        for _, line := range sources {\r\n+                fmt.Fprintln(w, line)\r\n+        }\r\n+        return w.Flush()\r\n }\r\n \r\n func getScriptSrc(url string) []string {\r\n-  // Request the HTML page.\r\n-  res, err := http.Get(url)\r\n-  if err != nil {\r\n-    log.Fatal(err)\r\n-  }\r\n-  defer res.Body.Close()\r\n-  if res.StatusCode != 200 {\r\n-    log.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)\r\n-  }\r\n-\r\n-  // Load the HTML document\r\n-  doc, err := goquery.NewDocumentFromReader(res.Body)\r\n-  if err != nil {\r\n-    log.Fatal(err)\r\n-  }\r\n-\r\n-  var sources []string\r\n-\r\n-  // Find the script tags, and get the src\r\n-  doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\r\n-    src, _ := s.Attr(\"src\")\r\n-    if src != \"\" {\r\n-      sources = append(sources, src)\r\n-    }\r\n-  })\r\n-\r\n-  return sources\r\n+        // Request the HTML page.\r\n+        res, err := http.Get(url)\r\n+        if err != nil {\r\n+                log.Fatal(err)\r\n+        }\r\n+        defer res.Body.Close()\r\n+        if res.StatusCode != 200 {\r\n+                log.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)\r\n+        }\r\n+\r\n+        // Load the HTML document\r\n+        doc, err := goquery.NewDocumentFromReader(res.Body)\r\n+        if err != nil {\r\n+                log.Fatal(err)\r\n+        }\r\n+\r\n+        var sources []string\r\n+\r\n+        // Find the script tags, and get the src\r\n+        doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\r\n+                src, _ := s.Attr(\"src\")\r\n+                if src != \"\" {\r\n+                        sources = append(sources, src)\r\n+                }\r\n+        })\r\n+\r\n+        return sources\r\n }\r\n \r\n func readLines(path string) ([]string, error) {\r\n-  file, err := os.Open(path)\r\n-  if err != nil {\r\n-    return nil, err\r\n-  }\r\n-  defer file.Close()\r\n-\r\n-  var lines []string\r\n-  scanner := bufio.NewScanner(file)\r\n-  for scanner.Scan() {\r\n-    lines = append(lines, scanner.Text())\r\n-  }\r\n-  return lines, scanner.Err()\r\n+        file, err := os.Open(path)\r\n+        if err != nil {\r\n+                return nil, err\r\n+        }\r\n+        defer file.Close()\r\n+\r\n+        var lines []string\r\n+        scanner := bufio.NewScanner(file)\r\n+        for scanner.Scan() {\r\n+                lines = append(lines, scanner.Text())\r\n+        }\r\n+        return lines, scanner.Err()\r\n }\r\n \r\n-func resolveUrls(s []string) ([]string) {\r\n-  for i := len(s)-1; i >= 0; i-- {\r\n-    resp, err := http.Get(s[i])\r\n-    if err != nil {\r\n-      log.Fatal(err)\r\n-    }\r\n-    if resp.StatusCode != 200 && resp.StatusCode != 304 {\r\n-      s = append(s[:i], s[i+1:]...)\r\n-    }\r\n-  }\r\n-  return s\r\n+func resolveUrls(s []string) []string {\r\n+        for i := len(s) - 1; i >= 0; i-- {\r\n+                resp, err := http.Get(s[i])\r\n+                if err != nil {\r\n+                        log.Fatal(err)\r\n+                }\r\n+                if resp.StatusCode != 200 && resp.StatusCode != 304 {\r\n+                        s = append(s[:i], s[i+1:]...)\r\n+                }\r\n+        }\r\n+        return s\r\n }\r\n \r\n-func completeUrls(s []string, url string) ([]string) {\r\n-  u, err := urlpkg.Parse(url)\r\n-  if err != nil {\r\n-    log.Fatal(err)\r\n-  }\r\n-\r\n-  for i, _ := range s {\r\n-    if strings.HasPrefix(s[i], \"//\") {\r\n-      s[i] = u.Scheme + \":\" + s[i]\r\n-    } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\r\n-      s[i] = u.Scheme + \"://\" + u.Host + s[i]\r\n-    } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\r\n-      s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\r\n-    }\r\n-  }\r\n-  return s\r\n+func completeUrls(s []string, url string) []string {\r\n+        u, err := urlpkg.Parse(url)\r\n+        if err != nil {\r\n+                log.Fatal(err)\r\n+        }\r\n+\r\n+        for i, _ := range s {\r\n+                if strings.HasPrefix(s[i], \"//\") {\r\n+                        s[i] = u.Scheme + \":\" + s[i]\r\n+                } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\r\n+                        s[i] = u.Scheme + \"://\" + u.Host + s[i]\r\n+                } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\r\n+                        s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\r\n+                }\r\n+        }\r\n+        return s\r\n }\r\n", "diff_parsed": {"added": [[4, "        \"bufio\""], [5, "        \"flag\""], [6, "        \"fmt\""], [7, "        \"log\""], [8, "        \"net/http\""], [9, "        urlpkg \"net/url\""], [10, "        \"os\""], [11, "        \"strings\""], [12, ""], [13, "        \"github.com/PuerkitoBio/goquery\""], [17, "        url := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")"], [18, "        outputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")"], [19, "        inputFile := flag.String(\"input\", \"\", \"Input file with urls\")"], [20, "        resolve := flag.Bool(\"resolve\", false, \"Output only existing files\")"], [21, "        complete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")"], [22, "        plain := flag.Bool(\"plain\", false, \"Output only the results\")"], [23, "        silent := flag.Bool(\"silent\", false, \"Dont output anything\")"], [24, "        flag.Parse()"], [25, ""], [26, "        var urls []string"], [27, "        var allSources []string"], [28, ""], [29, "        stat, _ := os.Stdin.Stat()"], [30, "        if (stat.Mode() & os.ModeCharDevice) == 0 {"], [31, "                scanner := bufio.NewScanner(os.Stdin)"], [32, "                for scanner.Scan() {"], [33, "                        urls = append(urls, scanner.Text())"], [34, "                }"], [35, "                if err := scanner.Err(); err != nil {"], [36, "                        fmt.Fprintln(os.Stderr, \"reading standard input:\", err)"], [37, "                }"], [38, "                if len(urls) > 0 {"], [39, "                        if !*plain && !*silent {"], [40, "                                fmt.Println(\"[+] Received urls from Stdin\")"], [41, "                        }"], [42, "                }"], [43, "        }"], [44, ""], [45, "        if *inputFile != \"\" {"], [46, "                lines, err := readLines(*inputFile)"], [47, "                if err != nil {"], [48, "                        log.Fatal(err)"], [49, "                }"], [50, "                if !*plain && !*silent {"], [51, "                        fmt.Println(\"[+] Set url file to\", *inputFile)"], [52, "                }"], [53, "                urls = append(urls, lines...)"], [54, "        }"], [55, ""], [56, "        if *url != \"\" {"], [57, "                if !*plain && !*silent {"], [58, "                        fmt.Println(\"[+] Set url to\", *url)"], [59, "                }"], [60, "                urls = append(urls, *url)"], [61, "        }"], [62, ""], [63, "        if len(urls) == 0 {"], [64, "                if !*plain && !*silent {"], [65, "                        fmt.Println(\"[!] No urls supplied\")"], [66, "                }"], [67, "                os.Exit(3)"], [68, "        }"], [69, ""], [70, "        if *resolve && !*complete {"], [71, "                if !*plain && !*silent {"], [72, "                        fmt.Println(\"[!] Resolve can only be used in combination with -complete\")"], [73, "                }"], [74, "                os.Exit(3)"], [75, "        }"], [76, ""], [77, "        for _, e := range urls {"], [78, "                if !*plain && !*silent {"], [79, "                        fmt.Println(\"[+] Getting sources from\", e)"], [80, "                }"], [81, "                sources := getScriptSrc(e)"], [82, ""], [83, "                if *complete {"], [84, "                        sources = completeUrls(sources, e)"], [85, "                }"], [86, ""], [87, "                if *resolve {"], [88, "                        if *complete {"], [89, "                                if !*plain && !*silent {"], [90, "                                        fmt.Println(\"[+] Resolving files\")"], [91, "                                }"], [92, "                                sources = resolveUrls(sources)"], [93, "                        } else {"], [94, "                                if !*plain && !*silent {"], [95, "                                        fmt.Println(\"[-] Resolve can only be used in combination with -complete\")"], [96, "                                }"], [97, "                        }"], [98, "                }"], [99, ""], [100, "                if !*silent {"], [101, "                        for _, i := range sources {"], [102, "                                fmt.Println(i)"], [103, "                        }"], [104, "                }"], [105, ""], [106, "                if *outputFile != \"\" {"], [107, "                        allSources = append(allSources, sources...)"], [108, "                }"], [109, ""], [110, "        }"], [111, ""], [112, "        // Save to file"], [113, "        if *outputFile != \"\" {"], [114, "                if !*plain && !*silent {"], [115, "                        fmt.Println(\"[+] Saving output to \", *outputFile)"], [116, "                }"], [117, "                if err := saveToFile(allSources, *outputFile); err != nil {"], [118, "                        log.Fatalf(\"saveToFile: %s\", err)"], [119, "                }"], [120, "        }"], [125, "        file, err := os.Create(path)"], [126, "        if err != nil {"], [127, "                return err"], [128, "        }"], [129, "        defer file.Close()"], [130, ""], [131, "        w := bufio.NewWriter(file)"], [132, "        for _, line := range sources {"], [133, "                fmt.Fprintln(w, line)"], [134, "        }"], [135, "        return w.Flush()"], [139, "        // Request the HTML page."], [140, "        res, err := http.Get(url)"], [141, "        if err != nil {"], [142, "                log.Fatal(err)"], [143, "        }"], [144, "        defer res.Body.Close()"], [145, "        if res.StatusCode != 200 {"], [146, "                log.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)"], [147, "        }"], [148, ""], [149, "        // Load the HTML document"], [150, "        doc, err := goquery.NewDocumentFromReader(res.Body)"], [151, "        if err != nil {"], [152, "                log.Fatal(err)"], [153, "        }"], [154, ""], [155, "        var sources []string"], [156, ""], [157, "        // Find the script tags, and get the src"], [158, "        doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {"], [159, "                src, _ := s.Attr(\"src\")"], [160, "                if src != \"\" {"], [161, "                        sources = append(sources, src)"], [162, "                }"], [163, "        })"], [164, ""], [165, "        return sources"], [169, "        file, err := os.Open(path)"], [170, "        if err != nil {"], [171, "                return nil, err"], [172, "        }"], [173, "        defer file.Close()"], [174, ""], [175, "        var lines []string"], [176, "        scanner := bufio.NewScanner(file)"], [177, "        for scanner.Scan() {"], [178, "                lines = append(lines, scanner.Text())"], [179, "        }"], [180, "        return lines, scanner.Err()"], [183, "func resolveUrls(s []string) []string {"], [184, "        for i := len(s) - 1; i >= 0; i-- {"], [185, "                resp, err := http.Get(s[i])"], [186, "                if err != nil {"], [187, "                        log.Fatal(err)"], [188, "                }"], [189, "                if resp.StatusCode != 200 && resp.StatusCode != 304 {"], [190, "                        s = append(s[:i], s[i+1:]...)"], [191, "                }"], [192, "        }"], [193, "        return s"], [196, "func completeUrls(s []string, url string) []string {"], [197, "        u, err := urlpkg.Parse(url)"], [198, "        if err != nil {"], [199, "                log.Fatal(err)"], [200, "        }"], [201, ""], [202, "        for i, _ := range s {"], [203, "                if strings.HasPrefix(s[i], \"//\") {"], [204, "                        s[i] = u.Scheme + \":\" + s[i]"], [205, "                } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {"], [206, "                        s[i] = u.Scheme + \"://\" + u.Host + s[i]"], [207, "                } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {"], [208, "                        s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]"], [209, "                }"], [210, "        }"], [211, "        return s"]], "deleted": [[4, "  \"fmt\""], [5, "  \"log\""], [6, "  \"bufio\""], [7, "  \"flag\""], [8, "  \"os\""], [9, "  \"net/http\""], [10, "  \"strings\""], [11, "  urlpkg \"net/url\""], [12, ""], [13, "  \"github.com/PuerkitoBio/goquery\""], [17, "  url := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")"], [18, "  outputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")"], [19, "  inputFile := flag.String(\"input\", \"\", \"Input file with urls\")"], [20, "  resolve := flag.Bool(\"resolve\", false, \"Output only existing files\")"], [21, "  complete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")"], [22, "  plain := flag.Bool(\"plain\", false, \"Output only the results\")"], [23, "  silent := flag.Bool(\"silent\", false, \"Dont output anything\")"], [24, "  flag.Parse()"], [25, ""], [26, "  var urls []string"], [27, "  var allSources []string"], [28, ""], [29, "  stat, _ := os.Stdin.Stat()"], [30, "  if (stat.Mode() & os.ModeCharDevice) == 0 {"], [31, "    scanner := bufio.NewScanner(os.Stdin)"], [32, "    for scanner.Scan() {"], [33, "      urls = append(urls, scanner.Text())"], [34, "    }"], [35, "    if err := scanner.Err(); err != nil {"], [36, "      fmt.Fprintln(os.Stderr, \"reading standard input:\", err)"], [37, "    }"], [38, "    if len(urls) > 0 {"], [39, "      if !*plain && !*silent { fmt.Println(\"[+] Received urls from Stdin\") }"], [40, "    }"], [41, "  }"], [42, ""], [43, "  if *inputFile != \"\" {"], [44, "    lines, err := readLines(*inputFile)"], [45, "    if err != nil {"], [46, "      log.Fatal(err)"], [47, "    }"], [48, "    if !*plain && !*silent { fmt.Println(\"[+] Set url file to\", *inputFile) }"], [49, "    urls = append(urls, lines...)"], [50, "  }"], [51, ""], [52, "  if *url != \"\" {"], [53, "    if !*plain && !*silent { fmt.Println(\"[+] Set url to\", *url) }"], [54, "    urls = append(urls, *url)"], [55, "  }"], [56, ""], [57, "  if len(urls) == 0 {"], [58, "    if !*plain && !*silent { fmt.Println(\"[!] No urls supplied\") }"], [59, "    os.Exit(3)"], [60, "  }"], [61, ""], [62, "  if *resolve && !*complete {"], [63, "    if !*plain && !*silent { fmt.Println(\"[!] Resolve can only be used in combination with -complete\") }"], [64, "    os.Exit(3)"], [65, "  }"], [66, ""], [67, "  for _, e := range urls {"], [68, "    if !*plain && !*silent { fmt.Println(\"[+] Getting sources from\", e) }"], [69, "    sources := getScriptSrc(e)"], [70, ""], [71, "    if *complete {"], [72, "      sources = completeUrls(sources, e)"], [73, "    }"], [74, ""], [75, "    if *resolve {"], [76, "      if *complete {"], [77, "        if !*plain && !*silent { fmt.Println(\"[+] Resolving files\") }"], [78, "        sources = resolveUrls(sources)"], [79, "      } else {"], [80, "        if !*plain && !*silent { fmt.Println(\"[-] Resolve can only be used in combination with -complete\") }"], [81, "      }"], [82, "    }"], [83, ""], [84, "    if !*silent {"], [85, "      for _, i := range sources {"], [86, "        fmt.Println(i)"], [87, "      }"], [88, "    }"], [89, ""], [90, "    if *outputFile != \"\" {"], [91, "      allSources = append(allSources, sources...)"], [92, "    }"], [93, ""], [94, "  }"], [95, ""], [96, "  // Save to file"], [97, "  if *outputFile != \"\" {"], [98, "    if !*plain && !*silent { fmt.Println(\"[+] Saving output to \", *outputFile) }"], [99, "    if err := saveToFile(allSources, *outputFile); err != nil {"], [100, "      log.Fatalf(\"saveToFile: %s\", err)"], [101, "    }"], [102, "  }"], [107, "  file, err := os.Create(path)"], [108, "  if err != nil {"], [109, "    return err"], [110, "  }"], [111, "  defer file.Close()"], [112, ""], [113, "  w := bufio.NewWriter(file)"], [114, "  for _, line := range sources {"], [115, "    fmt.Fprintln(w, line)"], [116, "  }"], [117, "  return w.Flush()"], [121, "  // Request the HTML page."], [122, "  res, err := http.Get(url)"], [123, "  if err != nil {"], [124, "    log.Fatal(err)"], [125, "  }"], [126, "  defer res.Body.Close()"], [127, "  if res.StatusCode != 200 {"], [128, "    log.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)"], [129, "  }"], [130, ""], [131, "  // Load the HTML document"], [132, "  doc, err := goquery.NewDocumentFromReader(res.Body)"], [133, "  if err != nil {"], [134, "    log.Fatal(err)"], [135, "  }"], [136, ""], [137, "  var sources []string"], [138, ""], [139, "  // Find the script tags, and get the src"], [140, "  doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {"], [141, "    src, _ := s.Attr(\"src\")"], [142, "    if src != \"\" {"], [143, "      sources = append(sources, src)"], [144, "    }"], [145, "  })"], [146, ""], [147, "  return sources"], [151, "  file, err := os.Open(path)"], [152, "  if err != nil {"], [153, "    return nil, err"], [154, "  }"], [155, "  defer file.Close()"], [156, ""], [157, "  var lines []string"], [158, "  scanner := bufio.NewScanner(file)"], [159, "  for scanner.Scan() {"], [160, "    lines = append(lines, scanner.Text())"], [161, "  }"], [162, "  return lines, scanner.Err()"], [165, "func resolveUrls(s []string) ([]string) {"], [166, "  for i := len(s)-1; i >= 0; i-- {"], [167, "    resp, err := http.Get(s[i])"], [168, "    if err != nil {"], [169, "      log.Fatal(err)"], [170, "    }"], [171, "    if resp.StatusCode != 200 && resp.StatusCode != 304 {"], [172, "      s = append(s[:i], s[i+1:]...)"], [173, "    }"], [174, "  }"], [175, "  return s"], [178, "func completeUrls(s []string, url string) ([]string) {"], [179, "  u, err := urlpkg.Parse(url)"], [180, "  if err != nil {"], [181, "    log.Fatal(err)"], [182, "  }"], [183, ""], [184, "  for i, _ := range s {"], [185, "    if strings.HasPrefix(s[i], \"//\") {"], [186, "      s[i] = u.Scheme + \":\" + s[i]"], [187, "    } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {"], [188, "      s[i] = u.Scheme + \"://\" + u.Host + s[i]"], [189, "    } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {"], [190, "      s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]"], [191, "    }"], [192, "  }"], [193, "  return s"]]}, "added_lines": 191, "deleted_lines": 173, "source_code": "package main\r\n\r\nimport (\r\n        \"bufio\"\r\n        \"flag\"\r\n        \"fmt\"\r\n        \"log\"\r\n        \"net/http\"\r\n        urlpkg \"net/url\"\r\n        \"os\"\r\n        \"strings\"\r\n\r\n        \"github.com/PuerkitoBio/goquery\"\r\n)\r\n\r\nfunc main() {\r\n        url := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\r\n        outputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\r\n        inputFile := flag.String(\"input\", \"\", \"Input file with urls\")\r\n        resolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\r\n        complete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\r\n        plain := flag.Bool(\"plain\", false, \"Output only the results\")\r\n        silent := flag.Bool(\"silent\", false, \"Dont output anything\")\r\n        flag.Parse()\r\n\r\n        var urls []string\r\n        var allSources []string\r\n\r\n        stat, _ := os.Stdin.Stat()\r\n        if (stat.Mode() & os.ModeCharDevice) == 0 {\r\n                scanner := bufio.NewScanner(os.Stdin)\r\n                for scanner.Scan() {\r\n                        urls = append(urls, scanner.Text())\r\n                }\r\n                if err := scanner.Err(); err != nil {\r\n                        fmt.Fprintln(os.Stderr, \"reading standard input:\", err)\r\n                }\r\n                if len(urls) > 0 {\r\n                        if !*plain && !*silent {\r\n                                fmt.Println(\"[+] Received urls from Stdin\")\r\n                        }\r\n                }\r\n        }\r\n\r\n        if *inputFile != \"\" {\r\n                lines, err := readLines(*inputFile)\r\n                if err != nil {\r\n                        log.Fatal(err)\r\n                }\r\n                if !*plain && !*silent {\r\n                        fmt.Println(\"[+] Set url file to\", *inputFile)\r\n                }\r\n                urls = append(urls, lines...)\r\n        }\r\n\r\n        if *url != \"\" {\r\n                if !*plain && !*silent {\r\n                        fmt.Println(\"[+] Set url to\", *url)\r\n                }\r\n                urls = append(urls, *url)\r\n        }\r\n\r\n        if len(urls) == 0 {\r\n                if !*plain && !*silent {\r\n                        fmt.Println(\"[!] No urls supplied\")\r\n                }\r\n                os.Exit(3)\r\n        }\r\n\r\n        if *resolve && !*complete {\r\n                if !*plain && !*silent {\r\n                        fmt.Println(\"[!] Resolve can only be used in combination with -complete\")\r\n                }\r\n                os.Exit(3)\r\n        }\r\n\r\n        for _, e := range urls {\r\n                if !*plain && !*silent {\r\n                        fmt.Println(\"[+] Getting sources from\", e)\r\n                }\r\n                sources := getScriptSrc(e)\r\n\r\n                if *complete {\r\n                        sources = completeUrls(sources, e)\r\n                }\r\n\r\n                if *resolve {\r\n                        if *complete {\r\n                                if !*plain && !*silent {\r\n                                        fmt.Println(\"[+] Resolving files\")\r\n                                }\r\n                                sources = resolveUrls(sources)\r\n                        } else {\r\n                                if !*plain && !*silent {\r\n                                        fmt.Println(\"[-] Resolve can only be used in combination with -complete\")\r\n                                }\r\n                        }\r\n                }\r\n\r\n                if !*silent {\r\n                        for _, i := range sources {\r\n                                fmt.Println(i)\r\n                        }\r\n                }\r\n\r\n                if *outputFile != \"\" {\r\n                        allSources = append(allSources, sources...)\r\n                }\r\n\r\n        }\r\n\r\n        // Save to file\r\n        if *outputFile != \"\" {\r\n                if !*plain && !*silent {\r\n                        fmt.Println(\"[+] Saving output to \", *outputFile)\r\n                }\r\n                if err := saveToFile(allSources, *outputFile); err != nil {\r\n                        log.Fatalf(\"saveToFile: %s\", err)\r\n                }\r\n        }\r\n\r\n}\r\n\r\nfunc saveToFile(sources []string, path string) error {\r\n        file, err := os.Create(path)\r\n        if err != nil {\r\n                return err\r\n        }\r\n        defer file.Close()\r\n\r\n        w := bufio.NewWriter(file)\r\n        for _, line := range sources {\r\n                fmt.Fprintln(w, line)\r\n        }\r\n        return w.Flush()\r\n}\r\n\r\nfunc getScriptSrc(url string) []string {\r\n        // Request the HTML page.\r\n        res, err := http.Get(url)\r\n        if err != nil {\r\n                log.Fatal(err)\r\n        }\r\n        defer res.Body.Close()\r\n        if res.StatusCode != 200 {\r\n                log.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)\r\n        }\r\n\r\n        // Load the HTML document\r\n        doc, err := goquery.NewDocumentFromReader(res.Body)\r\n        if err != nil {\r\n                log.Fatal(err)\r\n        }\r\n\r\n        var sources []string\r\n\r\n        // Find the script tags, and get the src\r\n        doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\r\n                src, _ := s.Attr(\"src\")\r\n                if src != \"\" {\r\n                        sources = append(sources, src)\r\n                }\r\n        })\r\n\r\n        return sources\r\n}\r\n\r\nfunc readLines(path string) ([]string, error) {\r\n        file, err := os.Open(path)\r\n        if err != nil {\r\n                return nil, err\r\n        }\r\n        defer file.Close()\r\n\r\n        var lines []string\r\n        scanner := bufio.NewScanner(file)\r\n        for scanner.Scan() {\r\n                lines = append(lines, scanner.Text())\r\n        }\r\n        return lines, scanner.Err()\r\n}\r\n\r\nfunc resolveUrls(s []string) []string {\r\n        for i := len(s) - 1; i >= 0; i-- {\r\n                resp, err := http.Get(s[i])\r\n                if err != nil {\r\n                        log.Fatal(err)\r\n                }\r\n                if resp.StatusCode != 200 && resp.StatusCode != 304 {\r\n                        s = append(s[:i], s[i+1:]...)\r\n                }\r\n        }\r\n        return s\r\n}\r\n\r\nfunc completeUrls(s []string, url string) []string {\r\n        u, err := urlpkg.Parse(url)\r\n        if err != nil {\r\n                log.Fatal(err)\r\n        }\r\n\r\n        for i, _ := range s {\r\n                if strings.HasPrefix(s[i], \"//\") {\r\n                        s[i] = u.Scheme + \":\" + s[i]\r\n                } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\r\n                        s[i] = u.Scheme + \"://\" + u.Host + s[i]\r\n                } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\r\n                        s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\r\n                }\r\n        }\r\n        return s\r\n}\r\n", "source_code_before": "package main\r\n\r\nimport (\r\n  \"fmt\"\r\n  \"log\"\r\n  \"bufio\"\r\n  \"flag\"\r\n  \"os\"\r\n  \"net/http\"\r\n  \"strings\"\r\n  urlpkg \"net/url\"\r\n\r\n  \"github.com/PuerkitoBio/goquery\"\r\n)\r\n\r\nfunc main() {\r\n  url := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\r\n  outputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\r\n  inputFile := flag.String(\"input\", \"\", \"Input file with urls\")\r\n  resolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\r\n  complete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\r\n  plain := flag.Bool(\"plain\", false, \"Output only the results\")\r\n  silent := flag.Bool(\"silent\", false, \"Dont output anything\")\r\n  flag.Parse()\r\n\r\n  var urls []string\r\n  var allSources []string\r\n\r\n  stat, _ := os.Stdin.Stat()\r\n  if (stat.Mode() & os.ModeCharDevice) == 0 {\r\n    scanner := bufio.NewScanner(os.Stdin)\r\n    for scanner.Scan() {\r\n      urls = append(urls, scanner.Text())\r\n    }\r\n    if err := scanner.Err(); err != nil {\r\n      fmt.Fprintln(os.Stderr, \"reading standard input:\", err)\r\n    }\r\n    if len(urls) > 0 {\r\n      if !*plain && !*silent { fmt.Println(\"[+] Received urls from Stdin\") }\r\n    }\r\n  }\r\n\r\n  if *inputFile != \"\" {\r\n    lines, err := readLines(*inputFile)\r\n    if err != nil {\r\n      log.Fatal(err)\r\n    }\r\n    if !*plain && !*silent { fmt.Println(\"[+] Set url file to\", *inputFile) }\r\n    urls = append(urls, lines...)\r\n  }\r\n\r\n  if *url != \"\" {\r\n    if !*plain && !*silent { fmt.Println(\"[+] Set url to\", *url) }\r\n    urls = append(urls, *url)\r\n  }\r\n\r\n  if len(urls) == 0 {\r\n    if !*plain && !*silent { fmt.Println(\"[!] No urls supplied\") }\r\n    os.Exit(3)\r\n  }\r\n\r\n  if *resolve && !*complete {\r\n    if !*plain && !*silent { fmt.Println(\"[!] Resolve can only be used in combination with -complete\") }\r\n    os.Exit(3)\r\n  }\r\n\r\n  for _, e := range urls {\r\n    if !*plain && !*silent { fmt.Println(\"[+] Getting sources from\", e) }\r\n    sources := getScriptSrc(e)\r\n\r\n    if *complete {\r\n      sources = completeUrls(sources, e)\r\n    }\r\n\r\n    if *resolve {\r\n      if *complete {\r\n        if !*plain && !*silent { fmt.Println(\"[+] Resolving files\") }\r\n        sources = resolveUrls(sources)\r\n      } else {\r\n        if !*plain && !*silent { fmt.Println(\"[-] Resolve can only be used in combination with -complete\") }\r\n      }\r\n    }\r\n\r\n    if !*silent {\r\n      for _, i := range sources {\r\n        fmt.Println(i)\r\n      }\r\n    }\r\n\r\n    if *outputFile != \"\" {\r\n      allSources = append(allSources, sources...)\r\n    }\r\n\r\n  }\r\n\r\n  // Save to file\r\n  if *outputFile != \"\" {\r\n    if !*plain && !*silent { fmt.Println(\"[+] Saving output to \", *outputFile) }\r\n    if err := saveToFile(allSources, *outputFile); err != nil {\r\n      log.Fatalf(\"saveToFile: %s\", err)\r\n    }\r\n  }\r\n\r\n}\r\n\r\nfunc saveToFile(sources []string, path string) error {\r\n  file, err := os.Create(path)\r\n  if err != nil {\r\n    return err\r\n  }\r\n  defer file.Close()\r\n\r\n  w := bufio.NewWriter(file)\r\n  for _, line := range sources {\r\n    fmt.Fprintln(w, line)\r\n  }\r\n  return w.Flush()\r\n}\r\n\r\nfunc getScriptSrc(url string) []string {\r\n  // Request the HTML page.\r\n  res, err := http.Get(url)\r\n  if err != nil {\r\n    log.Fatal(err)\r\n  }\r\n  defer res.Body.Close()\r\n  if res.StatusCode != 200 {\r\n    log.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)\r\n  }\r\n\r\n  // Load the HTML document\r\n  doc, err := goquery.NewDocumentFromReader(res.Body)\r\n  if err != nil {\r\n    log.Fatal(err)\r\n  }\r\n\r\n  var sources []string\r\n\r\n  // Find the script tags, and get the src\r\n  doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\r\n    src, _ := s.Attr(\"src\")\r\n    if src != \"\" {\r\n      sources = append(sources, src)\r\n    }\r\n  })\r\n\r\n  return sources\r\n}\r\n\r\nfunc readLines(path string) ([]string, error) {\r\n  file, err := os.Open(path)\r\n  if err != nil {\r\n    return nil, err\r\n  }\r\n  defer file.Close()\r\n\r\n  var lines []string\r\n  scanner := bufio.NewScanner(file)\r\n  for scanner.Scan() {\r\n    lines = append(lines, scanner.Text())\r\n  }\r\n  return lines, scanner.Err()\r\n}\r\n\r\nfunc resolveUrls(s []string) ([]string) {\r\n  for i := len(s)-1; i >= 0; i-- {\r\n    resp, err := http.Get(s[i])\r\n    if err != nil {\r\n      log.Fatal(err)\r\n    }\r\n    if resp.StatusCode != 200 && resp.StatusCode != 304 {\r\n      s = append(s[:i], s[i+1:]...)\r\n    }\r\n  }\r\n  return s\r\n}\r\n\r\nfunc completeUrls(s []string, url string) ([]string) {\r\n  u, err := urlpkg.Parse(url)\r\n  if err != nil {\r\n    log.Fatal(err)\r\n  }\r\n\r\n  for i, _ := range s {\r\n    if strings.HasPrefix(s[i], \"//\") {\r\n      s[i] = u.Scheme + \":\" + s[i]\r\n    } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\r\n      s[i] = u.Scheme + \"://\" + u.Host + s[i]\r\n    } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\r\n      s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\r\n    }\r\n  }\r\n  return s\r\n}\r\n", "methods": [{"name": "main", "start_line": 16, "end_line": 122}, {"name": "saveToFile", "start_line": 124, "end_line": 136}, {"name": "", "start_line": 158, "end_line": 163}, {"name": "getScriptSrc", "start_line": 138, "end_line": 166}, {"name": "readLines", "start_line": 168, "end_line": 181}, {"name": "resolveUrls", "start_line": 183, "end_line": 194}, {"name": "completeUrls", "start_line": 196, "end_line": 212}], "methods_before": [{"name": "main", "start_line": 16, "end_line": 104}, {"name": "saveToFile", "start_line": 106, "end_line": 118}, {"name": "", "start_line": 140, "end_line": 145}, {"name": "getScriptSrc", "start_line": 120, "end_line": 148}, {"name": "readLines", "start_line": 150, "end_line": 163}, {"name": "resolveUrls", "start_line": 165, "end_line": 176}, {"name": "completeUrls", "start_line": 178, "end_line": 194}], "changed_methods": [{"name": "resolveUrls", "start_line": 183, "end_line": 194}, {"name": "saveToFile", "start_line": 124, "end_line": 136}, {"name": "main", "start_line": 16, "end_line": 122}, {"name": "readLines", "start_line": 168, "end_line": 181}, {"name": "", "start_line": 158, "end_line": 163}, {"name": "completeUrls", "start_line": 196, "end_line": 212}, {"name": "getScriptSrc", "start_line": 138, "end_line": 166}], "nloc": 179, "complexity": 63, "token_count": 1127}], "dmm_unit_size": 0.0, "dmm_unit_complexity": 0.0, "dmm_unit_interfacing": 1.0},
    {"hash": "7b85a37493df433ab556af19f9da574b10a4f7f5", "msg": "Added error handling in main", "author": {"name": "RJP", "email": "rjp@debian8svm.debian8svm"}, "committer": {"name": "RJP", "email": "rjp@debian8svm.debian8svm"}, "author_date": "2018-11-10 20:21:20+01:00", "author_timezone": -3600, "committer_date": "2018-11-10 20:21:20+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["651c51d7049032918840bfdae59a0e6b98978360"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 212, "insertions": 227, "lines": 439, "files": 1, "modified_files": [{"old_path": "main.go", "new_path": "main.go", "filename": "main.go", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -1,212 +1,227 @@\n-package main\r\n-\r\n-import (\r\n-        \"bufio\"\r\n-        \"flag\"\r\n-        \"fmt\"\r\n-        \"log\"\r\n-        \"net/http\"\r\n-        urlpkg \"net/url\"\r\n-        \"os\"\r\n-        \"strings\"\r\n-\r\n-        \"github.com/PuerkitoBio/goquery\"\r\n-)\r\n-\r\n-func main() {\r\n-        url := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\r\n-        outputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\r\n-        inputFile := flag.String(\"input\", \"\", \"Input file with urls\")\r\n-        resolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\r\n-        complete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\r\n-        plain := flag.Bool(\"plain\", false, \"Output only the results\")\r\n-        silent := flag.Bool(\"silent\", false, \"Dont output anything\")\r\n-        flag.Parse()\r\n-\r\n-        var urls []string\r\n-        var allSources []string\r\n-\r\n-        stat, _ := os.Stdin.Stat()\r\n-        if (stat.Mode() & os.ModeCharDevice) == 0 {\r\n-                scanner := bufio.NewScanner(os.Stdin)\r\n-                for scanner.Scan() {\r\n-                        urls = append(urls, scanner.Text())\r\n-                }\r\n-                if err := scanner.Err(); err != nil {\r\n-                        fmt.Fprintln(os.Stderr, \"reading standard input:\", err)\r\n-                }\r\n-                if len(urls) > 0 {\r\n-                        if !*plain && !*silent {\r\n-                                fmt.Println(\"[+] Received urls from Stdin\")\r\n-                        }\r\n-                }\r\n-        }\r\n-\r\n-        if *inputFile != \"\" {\r\n-                lines, err := readLines(*inputFile)\r\n-                if err != nil {\r\n-                        log.Fatal(err)\r\n-                }\r\n-                if !*plain && !*silent {\r\n-                        fmt.Println(\"[+] Set url file to\", *inputFile)\r\n-                }\r\n-                urls = append(urls, lines...)\r\n-        }\r\n-\r\n-        if *url != \"\" {\r\n-                if !*plain && !*silent {\r\n-                        fmt.Println(\"[+] Set url to\", *url)\r\n-                }\r\n-                urls = append(urls, *url)\r\n-        }\r\n-\r\n-        if len(urls) == 0 {\r\n-                if !*plain && !*silent {\r\n-                        fmt.Println(\"[!] No urls supplied\")\r\n-                }\r\n-                os.Exit(3)\r\n-        }\r\n-\r\n-        if *resolve && !*complete {\r\n-                if !*plain && !*silent {\r\n-                        fmt.Println(\"[!] Resolve can only be used in combination with -complete\")\r\n-                }\r\n-                os.Exit(3)\r\n-        }\r\n-\r\n-        for _, e := range urls {\r\n-                if !*plain && !*silent {\r\n-                        fmt.Println(\"[+] Getting sources from\", e)\r\n-                }\r\n-                sources := getScriptSrc(e)\r\n-\r\n-                if *complete {\r\n-                        sources = completeUrls(sources, e)\r\n-                }\r\n-\r\n-                if *resolve {\r\n-                        if *complete {\r\n-                                if !*plain && !*silent {\r\n-                                        fmt.Println(\"[+] Resolving files\")\r\n-                                }\r\n-                                sources = resolveUrls(sources)\r\n-                        } else {\r\n-                                if !*plain && !*silent {\r\n-                                        fmt.Println(\"[-] Resolve can only be used in combination with -complete\")\r\n-                                }\r\n-                        }\r\n-                }\r\n-\r\n-                if !*silent {\r\n-                        for _, i := range sources {\r\n-                                fmt.Println(i)\r\n-                        }\r\n-                }\r\n-\r\n-                if *outputFile != \"\" {\r\n-                        allSources = append(allSources, sources...)\r\n-                }\r\n-\r\n-        }\r\n-\r\n-        // Save to file\r\n-        if *outputFile != \"\" {\r\n-                if !*plain && !*silent {\r\n-                        fmt.Println(\"[+] Saving output to \", *outputFile)\r\n-                }\r\n-                if err := saveToFile(allSources, *outputFile); err != nil {\r\n-                        log.Fatalf(\"saveToFile: %s\", err)\r\n-                }\r\n-        }\r\n-\r\n-}\r\n-\r\n-func saveToFile(sources []string, path string) error {\r\n-        file, err := os.Create(path)\r\n-        if err != nil {\r\n-                return err\r\n-        }\r\n-        defer file.Close()\r\n-\r\n-        w := bufio.NewWriter(file)\r\n-        for _, line := range sources {\r\n-                fmt.Fprintln(w, line)\r\n-        }\r\n-        return w.Flush()\r\n-}\r\n-\r\n-func getScriptSrc(url string) []string {\r\n-        // Request the HTML page.\r\n-        res, err := http.Get(url)\r\n-        if err != nil {\r\n-                log.Fatal(err)\r\n-        }\r\n-        defer res.Body.Close()\r\n-        if res.StatusCode != 200 {\r\n-                log.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)\r\n-        }\r\n-\r\n-        // Load the HTML document\r\n-        doc, err := goquery.NewDocumentFromReader(res.Body)\r\n-        if err != nil {\r\n-                log.Fatal(err)\r\n-        }\r\n-\r\n-        var sources []string\r\n-\r\n-        // Find the script tags, and get the src\r\n-        doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\r\n-                src, _ := s.Attr(\"src\")\r\n-                if src != \"\" {\r\n-                        sources = append(sources, src)\r\n-                }\r\n-        })\r\n-\r\n-        return sources\r\n-}\r\n-\r\n-func readLines(path string) ([]string, error) {\r\n-        file, err := os.Open(path)\r\n-        if err != nil {\r\n-                return nil, err\r\n-        }\r\n-        defer file.Close()\r\n-\r\n-        var lines []string\r\n-        scanner := bufio.NewScanner(file)\r\n-        for scanner.Scan() {\r\n-                lines = append(lines, scanner.Text())\r\n-        }\r\n-        return lines, scanner.Err()\r\n-}\r\n-\r\n-func resolveUrls(s []string) []string {\r\n-        for i := len(s) - 1; i >= 0; i-- {\r\n-                resp, err := http.Get(s[i])\r\n-                if err != nil {\r\n-                        log.Fatal(err)\r\n-                }\r\n-                if resp.StatusCode != 200 && resp.StatusCode != 304 {\r\n-                        s = append(s[:i], s[i+1:]...)\r\n-                }\r\n-        }\r\n-        return s\r\n-}\r\n-\r\n-func completeUrls(s []string, url string) []string {\r\n-        u, err := urlpkg.Parse(url)\r\n-        if err != nil {\r\n-                log.Fatal(err)\r\n-        }\r\n-\r\n-        for i, _ := range s {\r\n-                if strings.HasPrefix(s[i], \"//\") {\r\n-                        s[i] = u.Scheme + \":\" + s[i]\r\n-                } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\r\n-                        s[i] = u.Scheme + \"://\" + u.Host + s[i]\r\n-                } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\r\n-                        s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\r\n-                }\r\n-        }\r\n-        return s\r\n-}\r\n+package main\n+\n+import (\n+\t\"bufio\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"net/url\"\n+\t\"os\"\n+\t\"strings\"\n+\n+\t\"github.com/PuerkitoBio/goquery\"\n+)\n+\n+func main() {\n+\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n+\toutputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\n+\tinputFile := flag.String(\"input\", \"\", \"Input file with urls\")\n+\tresolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\n+\tcomplete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n+\tplain := flag.Bool(\"plain\", false, \"Output only the results\")\n+\tsilent := flag.Bool(\"silent\", false, \"Dont output anything\")\n+\tflag.Parse()\n+\n+\tvar urls []string\n+\tvar allSources []string\n+\n+\tstat, err := os.Stdin.Stat()\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n+\t\tscanner := bufio.NewScanner(os.Stdin)\n+\t\tfor scanner.Scan() {\n+\t\t\turls = append(urls, scanner.Text())\n+\t\t}\n+\t\tif err := scanner.Err(); err != nil {\n+\t\t\tfmt.Fprintln(os.Stderr, \"reading standard input:\", err)\n+\t\t}\n+\t\tif len(urls) > 0 {\n+\t\t\tif !*plain && !*silent {\n+\t\t\t\tfmt.Println(\"[+] Received urls from Stdin\")\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif *inputFile != \"\" {\n+\t\tlines, err := readLines(*inputFile)\n+\t\tif err != nil {\n+\t\t\tlog.Fatal(err)\n+\t\t}\n+\t\tif !*plain && !*silent {\n+\t\t\tfmt.Println(\"[+] Set url file to\", *inputFile)\n+\t\t}\n+\t\turls = append(urls, lines...)\n+\t}\n+\n+\tif *urlArg != \"\" {\n+\t\tif !*plain && !*silent {\n+\t\t\tfmt.Println(\"[+] Set url to\", *urlArg)\n+\t\t}\n+\t\turls = append(urls, *urlArg)\n+\t}\n+\n+\tif len(urls) == 0 {\n+\t\tif !*plain && !*silent {\n+\t\t\tfmt.Println(\"[!] No urls supplied\")\n+\t\t}\n+\t\tos.Exit(3)\n+\t}\n+\n+\tif *resolve && !*complete {\n+\t\tif !*plain && !*silent {\n+\t\t\tfmt.Println(\"[!] Resolve can only be used in combination with -complete\")\n+\t\t}\n+\t\tos.Exit(3)\n+\t}\n+\n+\tfor _, e := range urls {\n+\t\tif !*plain && !*silent {\n+\t\t\tfmt.Println(\"[+] Getting sources from\", e)\n+\t\t}\n+\t\tsources := getScriptSrc(e)\n+\n+\t\tif *complete {\n+\t\t\t// ToDo: send copy of sources to completeUrls, and if there was an error. keep the old sources and display the error to stderr\n+\t\t\tsources, err = completeUrls(sources, e)\n+\t\t\tif err != nil {\n+\t\t\t\tlog.Fatal(err)\n+\t\t\t}\n+\t\t}\n+\n+\t\tif *resolve {\n+\t\t\tif *complete {\n+\t\t\t\tif !*plain && !*silent {\n+\t\t\t\t\tfmt.Println(\"[+] Resolving files\")\n+\t\t\t\t}\n+\t\t\t\tsources, err = resolveUrls(sources)\n+\t\t\t\tif err != nil {\n+\t\t\t\t\t// ToDo: send copy of sources to resolveUrls, and if there was an error. keep the old sources and display the error to stderr\n+\t\t\t\t\tlog.Fatal(err)\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tif !*plain && !*silent {\n+\t\t\t\t\tfmt.Println(\"[-] Resolve can only be used in combination with -complete\")\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tif !*silent {\n+\t\t\tfor _, i := range sources {\n+\t\t\t\tfmt.Println(i)\n+\t\t\t}\n+\t\t}\n+\n+\t\tif *outputFile != \"\" {\n+\t\t\tallSources = append(allSources, sources...)\n+\t\t}\n+\n+\t}\n+\n+\t// Save to file\n+\tif *outputFile != \"\" {\n+\t\tif !*plain && !*silent {\n+\t\t\tfmt.Println(\"[+] Saving output to \", *outputFile)\n+\t\t}\n+\t\tif err := saveToFile(allSources, *outputFile); err != nil {\n+\t\t\tlog.Fatalf(\"saveToFile: %s\", err)\n+\t\t}\n+\t}\n+\n+}\n+\n+// ToDO: Use channel instead of slide, and use io.Writer instead of file path\n+func saveToFile(sources []string, path string) error {\n+\tfile, err := os.Create(path)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tdefer file.Close()\n+\n+\tw := bufio.NewWriter(file)\n+\tfor _, line := range sources {\n+\t\tfmt.Fprintln(w, line)\n+\t}\n+\treturn w.Flush()\n+}\n+\n+func getScriptSrc(url string) ([]string, error) {\n+\t// Request the HTML page.\n+\tres, err := http.Get(url)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdefer res.Body.Close()\n+\tif res.StatusCode != 200 {\n+\t\t// ToDo: Change to no panic. only print warning in stderr\n+\t\tlog.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)\n+\t}\n+\n+\t// Load the HTML document\n+\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tvar sources []string\n+\n+\t// Find the script tags, and get the src\n+\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n+\t\tsrc, _ := s.Attr(\"src\")\n+\t\tif src != \"\" {\n+\t\t\tsources = append(sources, src)\n+\t\t}\n+\t})\n+\n+\treturn sources\n+}\n+\n+// ToDo: Use io.Writer instead of a file path\n+func readLines(path string) ([]string, error) {\n+\tfile, err := os.Open(path)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdefer file.Close()\n+\n+\tvar lines []string\n+\tscanner := bufio.NewScanner(file)\n+\tfor scanner.Scan() {\n+\t\tlines = append(lines, scanner.Text())\n+\t}\n+\treturn lines, scanner.Err()\n+}\n+\n+func resolveUrls(s []string) ([]string, error) {\n+\tfor i := len(s) - 1; i >= 0; i-- {\n+\t\tresp, err := http.Get(s[i])\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n+\t\t\ts = append(s[:i], s[i+1:]...)\n+\t\t}\n+\t}\n+\treturn s\n+}\n+\n+func completeUrls(s []string, mainUrl string) ([]string, error) {\n+\tu, err := url.Parse(mainUrl)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tfor i, _ := range s {\n+\t\tif strings.HasPrefix(s[i], \"//\") {\n+\t\t\ts[i] = u.Scheme + \":\" + s[i]\n+\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n+\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n+\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n+\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n+\t\t}\n+\t}\n+\treturn s\n+}\n", "diff_parsed": {"added": [[1, "package main"], [2, ""], [3, "import ("], [4, "\t\"bufio\""], [5, "\t\"flag\""], [6, "\t\"fmt\""], [7, "\t\"log\""], [8, "\t\"net/http\""], [9, "\t\"net/url\""], [10, "\t\"os\""], [11, "\t\"strings\""], [12, ""], [13, "\t\"github.com/PuerkitoBio/goquery\""], [14, ")"], [15, ""], [16, "func main() {"], [17, "\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")"], [18, "\toutputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")"], [19, "\tinputFile := flag.String(\"input\", \"\", \"Input file with urls\")"], [20, "\tresolve := flag.Bool(\"resolve\", false, \"Output only existing files\")"], [21, "\tcomplete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")"], [22, "\tplain := flag.Bool(\"plain\", false, \"Output only the results\")"], [23, "\tsilent := flag.Bool(\"silent\", false, \"Dont output anything\")"], [24, "\tflag.Parse()"], [25, ""], [26, "\tvar urls []string"], [27, "\tvar allSources []string"], [28, ""], [29, "\tstat, err := os.Stdin.Stat()"], [30, "\tif err != nil {"], [31, "\t\tlog.Fatal(err)"], [32, "\t}"], [33, ""], [34, "\tif (stat.Mode() & os.ModeCharDevice) == 0 {"], [35, "\t\tscanner := bufio.NewScanner(os.Stdin)"], [36, "\t\tfor scanner.Scan() {"], [37, "\t\t\turls = append(urls, scanner.Text())"], [38, "\t\t}"], [39, "\t\tif err := scanner.Err(); err != nil {"], [40, "\t\t\tfmt.Fprintln(os.Stderr, \"reading standard input:\", err)"], [41, "\t\t}"], [42, "\t\tif len(urls) > 0 {"], [43, "\t\t\tif !*plain && !*silent {"], [44, "\t\t\t\tfmt.Println(\"[+] Received urls from Stdin\")"], [45, "\t\t\t}"], [46, "\t\t}"], [47, "\t}"], [48, ""], [49, "\tif *inputFile != \"\" {"], [50, "\t\tlines, err := readLines(*inputFile)"], [51, "\t\tif err != nil {"], [52, "\t\t\tlog.Fatal(err)"], [53, "\t\t}"], [54, "\t\tif !*plain && !*silent {"], [55, "\t\t\tfmt.Println(\"[+] Set url file to\", *inputFile)"], [56, "\t\t}"], [57, "\t\turls = append(urls, lines...)"], [58, "\t}"], [59, ""], [60, "\tif *urlArg != \"\" {"], [61, "\t\tif !*plain && !*silent {"], [62, "\t\t\tfmt.Println(\"[+] Set url to\", *urlArg)"], [63, "\t\t}"], [64, "\t\turls = append(urls, *urlArg)"], [65, "\t}"], [66, ""], [67, "\tif len(urls) == 0 {"], [68, "\t\tif !*plain && !*silent {"], [69, "\t\t\tfmt.Println(\"[!] No urls supplied\")"], [70, "\t\t}"], [71, "\t\tos.Exit(3)"], [72, "\t}"], [73, ""], [74, "\tif *resolve && !*complete {"], [75, "\t\tif !*plain && !*silent {"], [76, "\t\t\tfmt.Println(\"[!] Resolve can only be used in combination with -complete\")"], [77, "\t\t}"], [78, "\t\tos.Exit(3)"], [79, "\t}"], [80, ""], [81, "\tfor _, e := range urls {"], [82, "\t\tif !*plain && !*silent {"], [83, "\t\t\tfmt.Println(\"[+] Getting sources from\", e)"], [84, "\t\t}"], [85, "\t\tsources := getScriptSrc(e)"], [86, ""], [87, "\t\tif *complete {"], [88, "\t\t\t// ToDo: send copy of sources to completeUrls, and if there was an error. keep the old sources and display the error to stderr"], [89, "\t\t\tsources, err = completeUrls(sources, e)"], [90, "\t\t\tif err != nil {"], [91, "\t\t\t\tlog.Fatal(err)"], [92, "\t\t\t}"], [93, "\t\t}"], [94, ""], [95, "\t\tif *resolve {"], [96, "\t\t\tif *complete {"], [97, "\t\t\t\tif !*plain && !*silent {"], [98, "\t\t\t\t\tfmt.Println(\"[+] Resolving files\")"], [99, "\t\t\t\t}"], [100, "\t\t\t\tsources, err = resolveUrls(sources)"], [101, "\t\t\t\tif err != nil {"], [102, "\t\t\t\t\t// ToDo: send copy of sources to resolveUrls, and if there was an error. keep the old sources and display the error to stderr"], [103, "\t\t\t\t\tlog.Fatal(err)"], [104, "\t\t\t\t}"], [105, "\t\t\t} else {"], [106, "\t\t\t\tif !*plain && !*silent {"], [107, "\t\t\t\t\tfmt.Println(\"[-] Resolve can only be used in combination with -complete\")"], [108, "\t\t\t\t}"], [109, "\t\t\t}"], [110, "\t\t}"], [111, ""], [112, "\t\tif !*silent {"], [113, "\t\t\tfor _, i := range sources {"], [114, "\t\t\t\tfmt.Println(i)"], [115, "\t\t\t}"], [116, "\t\t}"], [117, ""], [118, "\t\tif *outputFile != \"\" {"], [119, "\t\t\tallSources = append(allSources, sources...)"], [120, "\t\t}"], [121, ""], [122, "\t}"], [123, ""], [124, "\t// Save to file"], [125, "\tif *outputFile != \"\" {"], [126, "\t\tif !*plain && !*silent {"], [127, "\t\t\tfmt.Println(\"[+] Saving output to \", *outputFile)"], [128, "\t\t}"], [129, "\t\tif err := saveToFile(allSources, *outputFile); err != nil {"], [130, "\t\t\tlog.Fatalf(\"saveToFile: %s\", err)"], [131, "\t\t}"], [132, "\t}"], [133, ""], [134, "}"], [135, ""], [136, "// ToDO: Use channel instead of slide, and use io.Writer instead of file path"], [137, "func saveToFile(sources []string, path string) error {"], [138, "\tfile, err := os.Create(path)"], [139, "\tif err != nil {"], [140, "\t\treturn err"], [141, "\t}"], [142, "\tdefer file.Close()"], [143, ""], [144, "\tw := bufio.NewWriter(file)"], [145, "\tfor _, line := range sources {"], [146, "\t\tfmt.Fprintln(w, line)"], [147, "\t}"], [148, "\treturn w.Flush()"], [149, "}"], [150, ""], [151, "func getScriptSrc(url string) ([]string, error) {"], [152, "\t// Request the HTML page."], [153, "\tres, err := http.Get(url)"], [154, "\tif err != nil {"], [155, "\t\treturn nil, err"], [156, "\t}"], [157, "\tdefer res.Body.Close()"], [158, "\tif res.StatusCode != 200 {"], [159, "\t\t// ToDo: Change to no panic. only print warning in stderr"], [160, "\t\tlog.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)"], [161, "\t}"], [162, ""], [163, "\t// Load the HTML document"], [164, "\tdoc, err := goquery.NewDocumentFromReader(res.Body)"], [165, "\tif err != nil {"], [166, "\t\treturn nil, err"], [167, "\t}"], [168, ""], [169, "\tvar sources []string"], [170, ""], [171, "\t// Find the script tags, and get the src"], [172, "\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {"], [173, "\t\tsrc, _ := s.Attr(\"src\")"], [174, "\t\tif src != \"\" {"], [175, "\t\t\tsources = append(sources, src)"], [176, "\t\t}"], [177, "\t})"], [178, ""], [179, "\treturn sources"], [180, "}"], [181, ""], [182, "// ToDo: Use io.Writer instead of a file path"], [183, "func readLines(path string) ([]string, error) {"], [184, "\tfile, err := os.Open(path)"], [185, "\tif err != nil {"], [186, "\t\treturn nil, err"], [187, "\t}"], [188, "\tdefer file.Close()"], [189, ""], [190, "\tvar lines []string"], [191, "\tscanner := bufio.NewScanner(file)"], [192, "\tfor scanner.Scan() {"], [193, "\t\tlines = append(lines, scanner.Text())"], [194, "\t}"], [195, "\treturn lines, scanner.Err()"], [196, "}"], [197, ""], [198, "func resolveUrls(s []string) ([]string, error) {"], [199, "\tfor i := len(s) - 1; i >= 0; i-- {"], [200, "\t\tresp, err := http.Get(s[i])"], [201, "\t\tif err != nil {"], [202, "\t\t\treturn nil, err"], [203, "\t\t}"], [204, "\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {"], [205, "\t\t\ts = append(s[:i], s[i+1:]...)"], [206, "\t\t}"], [207, "\t}"], [208, "\treturn s"], [209, "}"], [210, ""], [211, "func completeUrls(s []string, mainUrl string) ([]string, error) {"], [212, "\tu, err := url.Parse(mainUrl)"], [213, "\tif err != nil {"], [214, "\t\treturn nil, err"], [215, "\t}"], [216, ""], [217, "\tfor i, _ := range s {"], [218, "\t\tif strings.HasPrefix(s[i], \"//\") {"], [219, "\t\t\ts[i] = u.Scheme + \":\" + s[i]"], [220, "\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {"], [221, "\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]"], [222, "\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {"], [223, "\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]"], [224, "\t\t}"], [225, "\t}"], [226, "\treturn s"], [227, "}"]], "deleted": [[1, "package main"], [2, ""], [3, "import ("], [4, "        \"bufio\""], [5, "        \"flag\""], [6, "        \"fmt\""], [7, "        \"log\""], [8, "        \"net/http\""], [9, "        urlpkg \"net/url\""], [10, "        \"os\""], [11, "        \"strings\""], [12, ""], [13, "        \"github.com/PuerkitoBio/goquery\""], [14, ")"], [15, ""], [16, "func main() {"], [17, "        url := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")"], [18, "        outputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")"], [19, "        inputFile := flag.String(\"input\", \"\", \"Input file with urls\")"], [20, "        resolve := flag.Bool(\"resolve\", false, \"Output only existing files\")"], [21, "        complete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")"], [22, "        plain := flag.Bool(\"plain\", false, \"Output only the results\")"], [23, "        silent := flag.Bool(\"silent\", false, \"Dont output anything\")"], [24, "        flag.Parse()"], [25, ""], [26, "        var urls []string"], [27, "        var allSources []string"], [28, ""], [29, "        stat, _ := os.Stdin.Stat()"], [30, "        if (stat.Mode() & os.ModeCharDevice) == 0 {"], [31, "                scanner := bufio.NewScanner(os.Stdin)"], [32, "                for scanner.Scan() {"], [33, "                        urls = append(urls, scanner.Text())"], [34, "                }"], [35, "                if err := scanner.Err(); err != nil {"], [36, "                        fmt.Fprintln(os.Stderr, \"reading standard input:\", err)"], [37, "                }"], [38, "                if len(urls) > 0 {"], [39, "                        if !*plain && !*silent {"], [40, "                                fmt.Println(\"[+] Received urls from Stdin\")"], [41, "                        }"], [42, "                }"], [43, "        }"], [44, ""], [45, "        if *inputFile != \"\" {"], [46, "                lines, err := readLines(*inputFile)"], [47, "                if err != nil {"], [48, "                        log.Fatal(err)"], [49, "                }"], [50, "                if !*plain && !*silent {"], [51, "                        fmt.Println(\"[+] Set url file to\", *inputFile)"], [52, "                }"], [53, "                urls = append(urls, lines...)"], [54, "        }"], [55, ""], [56, "        if *url != \"\" {"], [57, "                if !*plain && !*silent {"], [58, "                        fmt.Println(\"[+] Set url to\", *url)"], [59, "                }"], [60, "                urls = append(urls, *url)"], [61, "        }"], [62, ""], [63, "        if len(urls) == 0 {"], [64, "                if !*plain && !*silent {"], [65, "                        fmt.Println(\"[!] No urls supplied\")"], [66, "                }"], [67, "                os.Exit(3)"], [68, "        }"], [69, ""], [70, "        if *resolve && !*complete {"], [71, "                if !*plain && !*silent {"], [72, "                        fmt.Println(\"[!] Resolve can only be used in combination with -complete\")"], [73, "                }"], [74, "                os.Exit(3)"], [75, "        }"], [76, ""], [77, "        for _, e := range urls {"], [78, "                if !*plain && !*silent {"], [79, "                        fmt.Println(\"[+] Getting sources from\", e)"], [80, "                }"], [81, "                sources := getScriptSrc(e)"], [82, ""], [83, "                if *complete {"], [84, "                        sources = completeUrls(sources, e)"], [85, "                }"], [86, ""], [87, "                if *resolve {"], [88, "                        if *complete {"], [89, "                                if !*plain && !*silent {"], [90, "                                        fmt.Println(\"[+] Resolving files\")"], [91, "                                }"], [92, "                                sources = resolveUrls(sources)"], [93, "                        } else {"], [94, "                                if !*plain && !*silent {"], [95, "                                        fmt.Println(\"[-] Resolve can only be used in combination with -complete\")"], [96, "                                }"], [97, "                        }"], [98, "                }"], [99, ""], [100, "                if !*silent {"], [101, "                        for _, i := range sources {"], [102, "                                fmt.Println(i)"], [103, "                        }"], [104, "                }"], [105, ""], [106, "                if *outputFile != \"\" {"], [107, "                        allSources = append(allSources, sources...)"], [108, "                }"], [109, ""], [110, "        }"], [111, ""], [112, "        // Save to file"], [113, "        if *outputFile != \"\" {"], [114, "                if !*plain && !*silent {"], [115, "                        fmt.Println(\"[+] Saving output to \", *outputFile)"], [116, "                }"], [117, "                if err := saveToFile(allSources, *outputFile); err != nil {"], [118, "                        log.Fatalf(\"saveToFile: %s\", err)"], [119, "                }"], [120, "        }"], [121, ""], [122, "}"], [123, ""], [124, "func saveToFile(sources []string, path string) error {"], [125, "        file, err := os.Create(path)"], [126, "        if err != nil {"], [127, "                return err"], [128, "        }"], [129, "        defer file.Close()"], [130, ""], [131, "        w := bufio.NewWriter(file)"], [132, "        for _, line := range sources {"], [133, "                fmt.Fprintln(w, line)"], [134, "        }"], [135, "        return w.Flush()"], [136, "}"], [137, ""], [138, "func getScriptSrc(url string) []string {"], [139, "        // Request the HTML page."], [140, "        res, err := http.Get(url)"], [141, "        if err != nil {"], [142, "                log.Fatal(err)"], [143, "        }"], [144, "        defer res.Body.Close()"], [145, "        if res.StatusCode != 200 {"], [146, "                log.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)"], [147, "        }"], [148, ""], [149, "        // Load the HTML document"], [150, "        doc, err := goquery.NewDocumentFromReader(res.Body)"], [151, "        if err != nil {"], [152, "                log.Fatal(err)"], [153, "        }"], [154, ""], [155, "        var sources []string"], [156, ""], [157, "        // Find the script tags, and get the src"], [158, "        doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {"], [159, "                src, _ := s.Attr(\"src\")"], [160, "                if src != \"\" {"], [161, "                        sources = append(sources, src)"], [162, "                }"], [163, "        })"], [164, ""], [165, "        return sources"], [166, "}"], [167, ""], [168, "func readLines(path string) ([]string, error) {"], [169, "        file, err := os.Open(path)"], [170, "        if err != nil {"], [171, "                return nil, err"], [172, "        }"], [173, "        defer file.Close()"], [174, ""], [175, "        var lines []string"], [176, "        scanner := bufio.NewScanner(file)"], [177, "        for scanner.Scan() {"], [178, "                lines = append(lines, scanner.Text())"], [179, "        }"], [180, "        return lines, scanner.Err()"], [181, "}"], [182, ""], [183, "func resolveUrls(s []string) []string {"], [184, "        for i := len(s) - 1; i >= 0; i-- {"], [185, "                resp, err := http.Get(s[i])"], [186, "                if err != nil {"], [187, "                        log.Fatal(err)"], [188, "                }"], [189, "                if resp.StatusCode != 200 && resp.StatusCode != 304 {"], [190, "                        s = append(s[:i], s[i+1:]...)"], [191, "                }"], [192, "        }"], [193, "        return s"], [194, "}"], [195, ""], [196, "func completeUrls(s []string, url string) []string {"], [197, "        u, err := urlpkg.Parse(url)"], [198, "        if err != nil {"], [199, "                log.Fatal(err)"], [200, "        }"], [201, ""], [202, "        for i, _ := range s {"], [203, "                if strings.HasPrefix(s[i], \"//\") {"], [204, "                        s[i] = u.Scheme + \":\" + s[i]"], [205, "                } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {"], [206, "                        s[i] = u.Scheme + \"://\" + u.Host + s[i]"], [207, "                } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {"], [208, "                        s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]"], [209, "                }"], [210, "        }"], [211, "        return s"], [212, "}"]]}, "added_lines": 227, "deleted_lines": 212, "source_code": "package main\n\nimport (\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n)\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFile := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcomplete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tplain := flag.Bool(\"plain\", false, \"Output only the results\")\n\tsilent := flag.Bool(\"silent\", false, \"Dont output anything\")\n\tflag.Parse()\n\n\tvar urls []string\n\tvar allSources []string\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, \"reading standard input:\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\tif !*plain && !*silent {\n\t\t\t\tfmt.Println(\"[+] Received urls from Stdin\")\n\t\t\t}\n\t\t}\n\t}\n\n\tif *inputFile != \"\" {\n\t\tlines, err := readLines(*inputFile)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Set url file to\", *inputFile)\n\t\t}\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Set url to\", *urlArg)\n\t\t}\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[!] No urls supplied\")\n\t\t}\n\t\tos.Exit(3)\n\t}\n\n\tif *resolve && !*complete {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[!] Resolve can only be used in combination with -complete\")\n\t\t}\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Getting sources from\", e)\n\t\t}\n\t\tsources := getScriptSrc(e)\n\n\t\tif *complete {\n\t\t\t// ToDo: send copy of sources to completeUrls, and if there was an error. keep the old sources and display the error to stderr\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}\n\n\t\tif *resolve {\n\t\t\tif *complete {\n\t\t\t\tif !*plain && !*silent {\n\t\t\t\t\tfmt.Println(\"[+] Resolving files\")\n\t\t\t\t}\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\t// ToDo: send copy of sources to resolveUrls, and if there was an error. keep the old sources and display the error to stderr\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif !*plain && !*silent {\n\t\t\t\t\tfmt.Println(\"[-] Resolve can only be used in combination with -complete\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif !*silent {\n\t\t\tfor _, i := range sources {\n\t\t\t\tfmt.Println(i)\n\t\t\t}\n\t\t}\n\n\t\tif *outputFile != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFile != \"\" {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Saving output to \", *outputFile)\n\t\t}\n\t\tif err := saveToFile(allSources, *outputFile); err != nil {\n\t\t\tlog.Fatalf(\"saveToFile: %s\", err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string) ([]string, error) {\n\t// Request the HTML page.\n\tres, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\t// ToDo: Change to no panic. only print warning in stderr\n\t\tlog.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t})\n\n\treturn sources\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i, _ := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s\n}\n", "source_code_before": "package main\r\n\r\nimport (\r\n        \"bufio\"\r\n        \"flag\"\r\n        \"fmt\"\r\n        \"log\"\r\n        \"net/http\"\r\n        urlpkg \"net/url\"\r\n        \"os\"\r\n        \"strings\"\r\n\r\n        \"github.com/PuerkitoBio/goquery\"\r\n)\r\n\r\nfunc main() {\r\n        url := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\r\n        outputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\r\n        inputFile := flag.String(\"input\", \"\", \"Input file with urls\")\r\n        resolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\r\n        complete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\r\n        plain := flag.Bool(\"plain\", false, \"Output only the results\")\r\n        silent := flag.Bool(\"silent\", false, \"Dont output anything\")\r\n        flag.Parse()\r\n\r\n        var urls []string\r\n        var allSources []string\r\n\r\n        stat, _ := os.Stdin.Stat()\r\n        if (stat.Mode() & os.ModeCharDevice) == 0 {\r\n                scanner := bufio.NewScanner(os.Stdin)\r\n                for scanner.Scan() {\r\n                        urls = append(urls, scanner.Text())\r\n                }\r\n                if err := scanner.Err(); err != nil {\r\n                        fmt.Fprintln(os.Stderr, \"reading standard input:\", err)\r\n                }\r\n                if len(urls) > 0 {\r\n                        if !*plain && !*silent {\r\n                                fmt.Println(\"[+] Received urls from Stdin\")\r\n                        }\r\n                }\r\n        }\r\n\r\n        if *inputFile != \"\" {\r\n                lines, err := readLines(*inputFile)\r\n                if err != nil {\r\n                        log.Fatal(err)\r\n                }\r\n                if !*plain && !*silent {\r\n                        fmt.Println(\"[+] Set url file to\", *inputFile)\r\n                }\r\n                urls = append(urls, lines...)\r\n        }\r\n\r\n        if *url != \"\" {\r\n                if !*plain && !*silent {\r\n                        fmt.Println(\"[+] Set url to\", *url)\r\n                }\r\n                urls = append(urls, *url)\r\n        }\r\n\r\n        if len(urls) == 0 {\r\n                if !*plain && !*silent {\r\n                        fmt.Println(\"[!] No urls supplied\")\r\n                }\r\n                os.Exit(3)\r\n        }\r\n\r\n        if *resolve && !*complete {\r\n                if !*plain && !*silent {\r\n                        fmt.Println(\"[!] Resolve can only be used in combination with -complete\")\r\n                }\r\n                os.Exit(3)\r\n        }\r\n\r\n        for _, e := range urls {\r\n                if !*plain && !*silent {\r\n                        fmt.Println(\"[+] Getting sources from\", e)\r\n                }\r\n                sources := getScriptSrc(e)\r\n\r\n                if *complete {\r\n                        sources = completeUrls(sources, e)\r\n                }\r\n\r\n                if *resolve {\r\n                        if *complete {\r\n                                if !*plain && !*silent {\r\n                                        fmt.Println(\"[+] Resolving files\")\r\n                                }\r\n                                sources = resolveUrls(sources)\r\n                        } else {\r\n                                if !*plain && !*silent {\r\n                                        fmt.Println(\"[-] Resolve can only be used in combination with -complete\")\r\n                                }\r\n                        }\r\n                }\r\n\r\n                if !*silent {\r\n                        for _, i := range sources {\r\n                                fmt.Println(i)\r\n                        }\r\n                }\r\n\r\n                if *outputFile != \"\" {\r\n                        allSources = append(allSources, sources...)\r\n                }\r\n\r\n        }\r\n\r\n        // Save to file\r\n        if *outputFile != \"\" {\r\n                if !*plain && !*silent {\r\n                        fmt.Println(\"[+] Saving output to \", *outputFile)\r\n                }\r\n                if err := saveToFile(allSources, *outputFile); err != nil {\r\n                        log.Fatalf(\"saveToFile: %s\", err)\r\n                }\r\n        }\r\n\r\n}\r\n\r\nfunc saveToFile(sources []string, path string) error {\r\n        file, err := os.Create(path)\r\n        if err != nil {\r\n                return err\r\n        }\r\n        defer file.Close()\r\n\r\n        w := bufio.NewWriter(file)\r\n        for _, line := range sources {\r\n                fmt.Fprintln(w, line)\r\n        }\r\n        return w.Flush()\r\n}\r\n\r\nfunc getScriptSrc(url string) []string {\r\n        // Request the HTML page.\r\n        res, err := http.Get(url)\r\n        if err != nil {\r\n                log.Fatal(err)\r\n        }\r\n        defer res.Body.Close()\r\n        if res.StatusCode != 200 {\r\n                log.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)\r\n        }\r\n\r\n        // Load the HTML document\r\n        doc, err := goquery.NewDocumentFromReader(res.Body)\r\n        if err != nil {\r\n                log.Fatal(err)\r\n        }\r\n\r\n        var sources []string\r\n\r\n        // Find the script tags, and get the src\r\n        doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\r\n                src, _ := s.Attr(\"src\")\r\n                if src != \"\" {\r\n                        sources = append(sources, src)\r\n                }\r\n        })\r\n\r\n        return sources\r\n}\r\n\r\nfunc readLines(path string) ([]string, error) {\r\n        file, err := os.Open(path)\r\n        if err != nil {\r\n                return nil, err\r\n        }\r\n        defer file.Close()\r\n\r\n        var lines []string\r\n        scanner := bufio.NewScanner(file)\r\n        for scanner.Scan() {\r\n                lines = append(lines, scanner.Text())\r\n        }\r\n        return lines, scanner.Err()\r\n}\r\n\r\nfunc resolveUrls(s []string) []string {\r\n        for i := len(s) - 1; i >= 0; i-- {\r\n                resp, err := http.Get(s[i])\r\n                if err != nil {\r\n                        log.Fatal(err)\r\n                }\r\n                if resp.StatusCode != 200 && resp.StatusCode != 304 {\r\n                        s = append(s[:i], s[i+1:]...)\r\n                }\r\n        }\r\n        return s\r\n}\r\n\r\nfunc completeUrls(s []string, url string) []string {\r\n        u, err := urlpkg.Parse(url)\r\n        if err != nil {\r\n                log.Fatal(err)\r\n        }\r\n\r\n        for i, _ := range s {\r\n                if strings.HasPrefix(s[i], \"//\") {\r\n                        s[i] = u.Scheme + \":\" + s[i]\r\n                } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\r\n                        s[i] = u.Scheme + \"://\" + u.Host + s[i]\r\n                } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\r\n                        s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\r\n                }\r\n        }\r\n        return s\r\n}\r\n", "methods": [{"name": "main", "start_line": 16, "end_line": 134}, {"name": "saveToFile", "start_line": 137, "end_line": 149}, {"name": "", "start_line": 172, "end_line": 177}, {"name": "getScriptSrc", "start_line": 151, "end_line": 180}, {"name": "readLines", "start_line": 183, "end_line": 196}, {"name": "resolveUrls", "start_line": 198, "end_line": 209}, {"name": "completeUrls", "start_line": 211, "end_line": 227}], "methods_before": [{"name": "main", "start_line": 16, "end_line": 122}, {"name": "saveToFile", "start_line": 124, "end_line": 136}, {"name": "", "start_line": 158, "end_line": 163}, {"name": "getScriptSrc", "start_line": 138, "end_line": 166}, {"name": "readLines", "start_line": 168, "end_line": 181}, {"name": "resolveUrls", "start_line": 183, "end_line": 194}, {"name": "completeUrls", "start_line": 196, "end_line": 212}], "changed_methods": [{"name": "resolveUrls", "start_line": 198, "end_line": 209}, {"name": "saveToFile", "start_line": 137, "end_line": 149}, {"name": "main", "start_line": 16, "end_line": 134}, {"name": "readLines", "start_line": 183, "end_line": 196}, {"name": "", "start_line": 172, "end_line": 177}, {"name": "completeUrls", "start_line": 211, "end_line": 227}, {"name": "completeUrls", "start_line": 196, "end_line": 212}, {"name": "getScriptSrc", "start_line": 151, "end_line": 180}], "nloc": 188, "complexity": 66, "token_count": 1170}], "dmm_unit_size": 0.0, "dmm_unit_complexity": 0.0, "dmm_unit_interfacing": 1.0},
    {"hash": "9090e2f3cabb1d791a2a3bfaee1b4ca5d1eca39f", "msg": "Updated main.go", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "003random", "email": "003random@protonmail.com"}, "author_date": "2018-11-10 20:32:15+01:00", "author_timezone": -3600, "committer_date": "2018-11-10 20:32:15+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["7b85a37493df433ab556af19f9da574b10a4f7f5"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 5, "insertions": 10, "lines": 15, "files": 1, "modified_files": [{"old_path": "main.go", "new_path": "main.go", "filename": "main.go", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -82,7 +82,11 @@ func main() {\n \t\tif !*plain && !*silent {\n \t\t\tfmt.Println(\"[+] Getting sources from\", e)\n \t\t}\n-\t\tsources := getScriptSrc(e)\n+\t\tsources, err := getScriptSrc(e)\n+\t\t// ToDo: Just skip it. Dont panic. Trow a error in stderr\n+\t\tif err != nil {\n+\t\t\tlog.Fatal(err)\n+\t\t}\n \n \t\tif *complete {\n \t\t\t// ToDo: send copy of sources to completeUrls, and if there was an error. keep the old sources and display the error to stderr\n@@ -157,7 +161,8 @@ func getScriptSrc(url string) ([]string, error) {\n \tdefer res.Body.Close()\n \tif res.StatusCode != 200 {\n \t\t// ToDo: Change to no panic. only print warning in stderr\n-\t\tlog.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)\n+\t\tfmt.Fprintln(os.Stderr, \"%s didnt resolve/return a 200. StatusCode: %d\", res.StatusCode)\n+\t\treturn nil, err\n \t}\n \n \t// Load the HTML document\n@@ -176,7 +181,7 @@ func getScriptSrc(url string) ([]string, error) {\n \t\t}\n \t})\n \n-\treturn sources\n+\treturn sources, nil\n }\n \n // ToDo: Use io.Writer instead of a file path\n@@ -205,7 +210,7 @@ func resolveUrls(s []string) ([]string, error) {\n \t\t\ts = append(s[:i], s[i+1:]...)\n \t\t}\n \t}\n-\treturn s\n+\treturn s, nil\n }\n \n func completeUrls(s []string, mainUrl string) ([]string, error) {\n@@ -223,5 +228,5 @@ func completeUrls(s []string, mainUrl string) ([]string, error) {\n \t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n \t\t}\n \t}\n-\treturn s\n+\treturn s, nil\n }\n", "diff_parsed": {"added": [[85, "\t\tsources, err := getScriptSrc(e)"], [86, "\t\t// ToDo: Just skip it. Dont panic. Trow a error in stderr"], [87, "\t\tif err != nil {"], [88, "\t\t\tlog.Fatal(err)"], [89, "\t\t}"], [164, "\t\tfmt.Fprintln(os.Stderr, \"%s didnt resolve/return a 200. StatusCode: %d\", res.StatusCode)"], [165, "\t\treturn nil, err"], [184, "\treturn sources, nil"], [213, "\treturn s, nil"], [231, "\treturn s, nil"]], "deleted": [[85, "\t\tsources := getScriptSrc(e)"], [160, "\t\tlog.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)"], [179, "\treturn sources"], [208, "\treturn s"], [226, "\treturn s"]]}, "added_lines": 10, "deleted_lines": 5, "source_code": "package main\n\nimport (\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n)\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFile := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcomplete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tplain := flag.Bool(\"plain\", false, \"Output only the results\")\n\tsilent := flag.Bool(\"silent\", false, \"Dont output anything\")\n\tflag.Parse()\n\n\tvar urls []string\n\tvar allSources []string\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, \"reading standard input:\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\tif !*plain && !*silent {\n\t\t\t\tfmt.Println(\"[+] Received urls from Stdin\")\n\t\t\t}\n\t\t}\n\t}\n\n\tif *inputFile != \"\" {\n\t\tlines, err := readLines(*inputFile)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Set url file to\", *inputFile)\n\t\t}\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Set url to\", *urlArg)\n\t\t}\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[!] No urls supplied\")\n\t\t}\n\t\tos.Exit(3)\n\t}\n\n\tif *resolve && !*complete {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[!] Resolve can only be used in combination with -complete\")\n\t\t}\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Getting sources from\", e)\n\t\t}\n\t\tsources, err := getScriptSrc(e)\n\t\t// ToDo: Just skip it. Dont panic. Trow a error in stderr\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tif *complete {\n\t\t\t// ToDo: send copy of sources to completeUrls, and if there was an error. keep the old sources and display the error to stderr\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}\n\n\t\tif *resolve {\n\t\t\tif *complete {\n\t\t\t\tif !*plain && !*silent {\n\t\t\t\t\tfmt.Println(\"[+] Resolving files\")\n\t\t\t\t}\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\t// ToDo: send copy of sources to resolveUrls, and if there was an error. keep the old sources and display the error to stderr\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif !*plain && !*silent {\n\t\t\t\t\tfmt.Println(\"[-] Resolve can only be used in combination with -complete\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif !*silent {\n\t\t\tfor _, i := range sources {\n\t\t\t\tfmt.Println(i)\n\t\t\t}\n\t\t}\n\n\t\tif *outputFile != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFile != \"\" {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Saving output to \", *outputFile)\n\t\t}\n\t\tif err := saveToFile(allSources, *outputFile); err != nil {\n\t\t\tlog.Fatalf(\"saveToFile: %s\", err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string) ([]string, error) {\n\t// Request the HTML page.\n\tres, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\t// ToDo: Change to no panic. only print warning in stderr\n\t\tfmt.Fprintln(os.Stderr, \"%s didnt resolve/return a 200. StatusCode: %d\", res.StatusCode)\n\t\treturn nil, err\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i, _ := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "source_code_before": "package main\n\nimport (\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n)\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFile := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcomplete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tplain := flag.Bool(\"plain\", false, \"Output only the results\")\n\tsilent := flag.Bool(\"silent\", false, \"Dont output anything\")\n\tflag.Parse()\n\n\tvar urls []string\n\tvar allSources []string\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, \"reading standard input:\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\tif !*plain && !*silent {\n\t\t\t\tfmt.Println(\"[+] Received urls from Stdin\")\n\t\t\t}\n\t\t}\n\t}\n\n\tif *inputFile != \"\" {\n\t\tlines, err := readLines(*inputFile)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Set url file to\", *inputFile)\n\t\t}\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Set url to\", *urlArg)\n\t\t}\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[!] No urls supplied\")\n\t\t}\n\t\tos.Exit(3)\n\t}\n\n\tif *resolve && !*complete {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[!] Resolve can only be used in combination with -complete\")\n\t\t}\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Getting sources from\", e)\n\t\t}\n\t\tsources := getScriptSrc(e)\n\n\t\tif *complete {\n\t\t\t// ToDo: send copy of sources to completeUrls, and if there was an error. keep the old sources and display the error to stderr\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}\n\n\t\tif *resolve {\n\t\t\tif *complete {\n\t\t\t\tif !*plain && !*silent {\n\t\t\t\t\tfmt.Println(\"[+] Resolving files\")\n\t\t\t\t}\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\t// ToDo: send copy of sources to resolveUrls, and if there was an error. keep the old sources and display the error to stderr\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif !*plain && !*silent {\n\t\t\t\t\tfmt.Println(\"[-] Resolve can only be used in combination with -complete\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif !*silent {\n\t\t\tfor _, i := range sources {\n\t\t\t\tfmt.Println(i)\n\t\t\t}\n\t\t}\n\n\t\tif *outputFile != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFile != \"\" {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Saving output to \", *outputFile)\n\t\t}\n\t\tif err := saveToFile(allSources, *outputFile); err != nil {\n\t\t\tlog.Fatalf(\"saveToFile: %s\", err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string) ([]string, error) {\n\t// Request the HTML page.\n\tres, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\t// ToDo: Change to no panic. only print warning in stderr\n\t\tlog.Fatalf(\"status code error: %d %s\", res.StatusCode, res.Status)\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t})\n\n\treturn sources\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i, _ := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s\n}\n", "methods": [{"name": "main", "start_line": 16, "end_line": 138}, {"name": "saveToFile", "start_line": 141, "end_line": 153}, {"name": "", "start_line": 177, "end_line": 182}, {"name": "getScriptSrc", "start_line": 155, "end_line": 185}, {"name": "readLines", "start_line": 188, "end_line": 201}, {"name": "resolveUrls", "start_line": 203, "end_line": 214}, {"name": "completeUrls", "start_line": 216, "end_line": 232}], "methods_before": [{"name": "main", "start_line": 16, "end_line": 134}, {"name": "saveToFile", "start_line": 137, "end_line": 149}, {"name": "", "start_line": 172, "end_line": 177}, {"name": "getScriptSrc", "start_line": 151, "end_line": 180}, {"name": "readLines", "start_line": 183, "end_line": 196}, {"name": "resolveUrls", "start_line": 198, "end_line": 209}, {"name": "completeUrls", "start_line": 211, "end_line": 227}], "changed_methods": [{"name": "resolveUrls", "start_line": 203, "end_line": 214}, {"name": "main", "start_line": 16, "end_line": 138}, {"name": "getScriptSrc", "start_line": 155, "end_line": 185}, {"name": "completeUrls", "start_line": 216, "end_line": 232}], "nloc": 192, "complexity": 67, "token_count": 1194}], "dmm_unit_size": 0.0, "dmm_unit_complexity": 0.25, "dmm_unit_interfacing": 1.0},
    {"hash": "69166ac17de49145d4026ec8ec5c0046e8f4d6d5", "msg": "Updated main.go", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "003random", "email": "003random@protonmail.com"}, "author_date": "2018-11-10 20:34:58+01:00", "author_timezone": -3600, "committer_date": "2018-11-10 20:34:58+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["9090e2f3cabb1d791a2a3bfaee1b4ca5d1eca39f"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [{"old_path": "main.go", "new_path": "main.go", "filename": "main.go", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -161,7 +161,7 @@ func getScriptSrc(url string) ([]string, error) {\n \tdefer res.Body.Close()\n \tif res.StatusCode != 200 {\n \t\t// ToDo: Change to no panic. only print warning in stderr\n-\t\tfmt.Fprintln(os.Stderr, \"%s didnt resolve/return a 200. StatusCode: %d\", res.StatusCode)\n+\t\tfmt.Fprintln(os.Stderr, url, \"didnt resolve/return a 200. StatusCode:\", res.StatusCode)\n \t\treturn nil, err\n \t}\n \n", "diff_parsed": {"added": [[164, "\t\tfmt.Fprintln(os.Stderr, url, \"didnt resolve/return a 200. StatusCode:\", res.StatusCode)"]], "deleted": [[164, "\t\tfmt.Fprintln(os.Stderr, \"%s didnt resolve/return a 200. StatusCode: %d\", res.StatusCode)"]]}, "added_lines": 1, "deleted_lines": 1, "source_code": "package main\n\nimport (\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n)\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFile := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcomplete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tplain := flag.Bool(\"plain\", false, \"Output only the results\")\n\tsilent := flag.Bool(\"silent\", false, \"Dont output anything\")\n\tflag.Parse()\n\n\tvar urls []string\n\tvar allSources []string\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, \"reading standard input:\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\tif !*plain && !*silent {\n\t\t\t\tfmt.Println(\"[+] Received urls from Stdin\")\n\t\t\t}\n\t\t}\n\t}\n\n\tif *inputFile != \"\" {\n\t\tlines, err := readLines(*inputFile)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Set url file to\", *inputFile)\n\t\t}\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Set url to\", *urlArg)\n\t\t}\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[!] No urls supplied\")\n\t\t}\n\t\tos.Exit(3)\n\t}\n\n\tif *resolve && !*complete {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[!] Resolve can only be used in combination with -complete\")\n\t\t}\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Getting sources from\", e)\n\t\t}\n\t\tsources, err := getScriptSrc(e)\n\t\t// ToDo: Just skip it. Dont panic. Trow a error in stderr\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tif *complete {\n\t\t\t// ToDo: send copy of sources to completeUrls, and if there was an error. keep the old sources and display the error to stderr\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}\n\n\t\tif *resolve {\n\t\t\tif *complete {\n\t\t\t\tif !*plain && !*silent {\n\t\t\t\t\tfmt.Println(\"[+] Resolving files\")\n\t\t\t\t}\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\t// ToDo: send copy of sources to resolveUrls, and if there was an error. keep the old sources and display the error to stderr\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif !*plain && !*silent {\n\t\t\t\t\tfmt.Println(\"[-] Resolve can only be used in combination with -complete\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif !*silent {\n\t\t\tfor _, i := range sources {\n\t\t\t\tfmt.Println(i)\n\t\t\t}\n\t\t}\n\n\t\tif *outputFile != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFile != \"\" {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Saving output to \", *outputFile)\n\t\t}\n\t\tif err := saveToFile(allSources, *outputFile); err != nil {\n\t\t\tlog.Fatalf(\"saveToFile: %s\", err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string) ([]string, error) {\n\t// Request the HTML page.\n\tres, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\t// ToDo: Change to no panic. only print warning in stderr\n\t\tfmt.Fprintln(os.Stderr, url, \"didnt resolve/return a 200. StatusCode:\", res.StatusCode)\n\t\treturn nil, err\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i, _ := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "source_code_before": "package main\n\nimport (\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n)\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFile := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcomplete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tplain := flag.Bool(\"plain\", false, \"Output only the results\")\n\tsilent := flag.Bool(\"silent\", false, \"Dont output anything\")\n\tflag.Parse()\n\n\tvar urls []string\n\tvar allSources []string\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, \"reading standard input:\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\tif !*plain && !*silent {\n\t\t\t\tfmt.Println(\"[+] Received urls from Stdin\")\n\t\t\t}\n\t\t}\n\t}\n\n\tif *inputFile != \"\" {\n\t\tlines, err := readLines(*inputFile)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Set url file to\", *inputFile)\n\t\t}\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Set url to\", *urlArg)\n\t\t}\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[!] No urls supplied\")\n\t\t}\n\t\tos.Exit(3)\n\t}\n\n\tif *resolve && !*complete {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[!] Resolve can only be used in combination with -complete\")\n\t\t}\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Getting sources from\", e)\n\t\t}\n\t\tsources, err := getScriptSrc(e)\n\t\t// ToDo: Just skip it. Dont panic. Trow a error in stderr\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tif *complete {\n\t\t\t// ToDo: send copy of sources to completeUrls, and if there was an error. keep the old sources and display the error to stderr\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}\n\n\t\tif *resolve {\n\t\t\tif *complete {\n\t\t\t\tif !*plain && !*silent {\n\t\t\t\t\tfmt.Println(\"[+] Resolving files\")\n\t\t\t\t}\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\t// ToDo: send copy of sources to resolveUrls, and if there was an error. keep the old sources and display the error to stderr\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif !*plain && !*silent {\n\t\t\t\t\tfmt.Println(\"[-] Resolve can only be used in combination with -complete\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif !*silent {\n\t\t\tfor _, i := range sources {\n\t\t\t\tfmt.Println(i)\n\t\t\t}\n\t\t}\n\n\t\tif *outputFile != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFile != \"\" {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Saving output to \", *outputFile)\n\t\t}\n\t\tif err := saveToFile(allSources, *outputFile); err != nil {\n\t\t\tlog.Fatalf(\"saveToFile: %s\", err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string) ([]string, error) {\n\t// Request the HTML page.\n\tres, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\t// ToDo: Change to no panic. only print warning in stderr\n\t\tfmt.Fprintln(os.Stderr, \"%s didnt resolve/return a 200. StatusCode: %d\", res.StatusCode)\n\t\treturn nil, err\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i, _ := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "methods": [{"name": "main", "start_line": 16, "end_line": 138}, {"name": "saveToFile", "start_line": 141, "end_line": 153}, {"name": "", "start_line": 177, "end_line": 182}, {"name": "getScriptSrc", "start_line": 155, "end_line": 185}, {"name": "readLines", "start_line": 188, "end_line": 201}, {"name": "resolveUrls", "start_line": 203, "end_line": 214}, {"name": "completeUrls", "start_line": 216, "end_line": 232}], "methods_before": [{"name": "main", "start_line": 16, "end_line": 138}, {"name": "saveToFile", "start_line": 141, "end_line": 153}, {"name": "", "start_line": 177, "end_line": 182}, {"name": "getScriptSrc", "start_line": 155, "end_line": 185}, {"name": "readLines", "start_line": 188, "end_line": 201}, {"name": "resolveUrls", "start_line": 203, "end_line": 214}, {"name": "completeUrls", "start_line": 216, "end_line": 232}], "changed_methods": [{"name": "getScriptSrc", "start_line": 155, "end_line": 185}], "nloc": 192, "complexity": 67, "token_count": 1196}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "245068de77104ad41378e4fd986821b068eb371c", "msg": "Added correct error handling for timeouts etc.", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "003random", "email": "003random@protonmail.com"}, "author_date": "2018-11-10 20:52:48+01:00", "author_timezone": -3600, "committer_date": "2018-11-10 20:52:48+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["69166ac17de49145d4026ec8ec5c0046e8f4d6d5"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 4, "insertions": 5, "lines": 9, "files": 1, "modified_files": [{"old_path": "main.go", "new_path": "main.go", "filename": "main.go", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -85,7 +85,8 @@ func main() {\n \t\tsources, err := getScriptSrc(e)\n \t\t// ToDo: Just skip it. Dont panic. Trow a error in stderr\n \t\tif err != nil {\n-\t\t\tlog.Fatal(err)\n+\t\t\tfmt.Fprintln(os.Stderr, \"[!] Couldn't get sources from\", e)\n+\t\t\tfmt.Fprintln(os.Stderr, \"[!] Error:\", err)\n \t\t}\n \n \t\tif *complete {\n@@ -160,9 +161,9 @@ func getScriptSrc(url string) ([]string, error) {\n \t}\n \tdefer res.Body.Close()\n \tif res.StatusCode != 200 {\n-\t\t// ToDo: Change to no panic. only print warning in stderr\n-\t\tfmt.Fprintln(os.Stderr, url, \"didnt resolve/return a 200. StatusCode:\", res.StatusCode)\n-\t\treturn nil, err\n+\t\tfmt.Fprintln(os.Stderr, \"[!] Couldn't get sources from\", url)\n+\t\tfmt.Fprintln(os.Stderr, \"[!] Error: StatusCode:\", res.StatusCode, \"was returned instead of a 200 OK\")\n+\t\treturn nil, nil\n \t}\n \n \t// Load the HTML document\n", "diff_parsed": {"added": [[88, "\t\t\tfmt.Fprintln(os.Stderr, \"[!] Couldn't get sources from\", e)"], [89, "\t\t\tfmt.Fprintln(os.Stderr, \"[!] Error:\", err)"], [164, "\t\tfmt.Fprintln(os.Stderr, \"[!] Couldn't get sources from\", url)"], [165, "\t\tfmt.Fprintln(os.Stderr, \"[!] Error: StatusCode:\", res.StatusCode, \"was returned instead of a 200 OK\")"], [166, "\t\treturn nil, nil"]], "deleted": [[88, "\t\t\tlog.Fatal(err)"], [163, "\t\t// ToDo: Change to no panic. only print warning in stderr"], [164, "\t\tfmt.Fprintln(os.Stderr, url, \"didnt resolve/return a 200. StatusCode:\", res.StatusCode)"], [165, "\t\treturn nil, err"]]}, "added_lines": 5, "deleted_lines": 4, "source_code": "package main\n\nimport (\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n)\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFile := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcomplete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tplain := flag.Bool(\"plain\", false, \"Output only the results\")\n\tsilent := flag.Bool(\"silent\", false, \"Dont output anything\")\n\tflag.Parse()\n\n\tvar urls []string\n\tvar allSources []string\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, \"reading standard input:\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\tif !*plain && !*silent {\n\t\t\t\tfmt.Println(\"[+] Received urls from Stdin\")\n\t\t\t}\n\t\t}\n\t}\n\n\tif *inputFile != \"\" {\n\t\tlines, err := readLines(*inputFile)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Set url file to\", *inputFile)\n\t\t}\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Set url to\", *urlArg)\n\t\t}\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[!] No urls supplied\")\n\t\t}\n\t\tos.Exit(3)\n\t}\n\n\tif *resolve && !*complete {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[!] Resolve can only be used in combination with -complete\")\n\t\t}\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Getting sources from\", e)\n\t\t}\n\t\tsources, err := getScriptSrc(e)\n\t\t// ToDo: Just skip it. Dont panic. Trow a error in stderr\n\t\tif err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, \"[!] Couldn't get sources from\", e)\n\t\t\tfmt.Fprintln(os.Stderr, \"[!] Error:\", err)\n\t\t}\n\n\t\tif *complete {\n\t\t\t// ToDo: send copy of sources to completeUrls, and if there was an error. keep the old sources and display the error to stderr\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}\n\n\t\tif *resolve {\n\t\t\tif *complete {\n\t\t\t\tif !*plain && !*silent {\n\t\t\t\t\tfmt.Println(\"[+] Resolving files\")\n\t\t\t\t}\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\t// ToDo: send copy of sources to resolveUrls, and if there was an error. keep the old sources and display the error to stderr\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif !*plain && !*silent {\n\t\t\t\t\tfmt.Println(\"[-] Resolve can only be used in combination with -complete\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif !*silent {\n\t\t\tfor _, i := range sources {\n\t\t\t\tfmt.Println(i)\n\t\t\t}\n\t\t}\n\n\t\tif *outputFile != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFile != \"\" {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Saving output to \", *outputFile)\n\t\t}\n\t\tif err := saveToFile(allSources, *outputFile); err != nil {\n\t\t\tlog.Fatalf(\"saveToFile: %s\", err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string) ([]string, error) {\n\t// Request the HTML page.\n\tres, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\tfmt.Fprintln(os.Stderr, \"[!] Couldn't get sources from\", url)\n\t\tfmt.Fprintln(os.Stderr, \"[!] Error: StatusCode:\", res.StatusCode, \"was returned instead of a 200 OK\")\n\t\treturn nil, nil\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i, _ := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "source_code_before": "package main\n\nimport (\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n)\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFile := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcomplete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tplain := flag.Bool(\"plain\", false, \"Output only the results\")\n\tsilent := flag.Bool(\"silent\", false, \"Dont output anything\")\n\tflag.Parse()\n\n\tvar urls []string\n\tvar allSources []string\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, \"reading standard input:\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\tif !*plain && !*silent {\n\t\t\t\tfmt.Println(\"[+] Received urls from Stdin\")\n\t\t\t}\n\t\t}\n\t}\n\n\tif *inputFile != \"\" {\n\t\tlines, err := readLines(*inputFile)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Set url file to\", *inputFile)\n\t\t}\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Set url to\", *urlArg)\n\t\t}\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[!] No urls supplied\")\n\t\t}\n\t\tos.Exit(3)\n\t}\n\n\tif *resolve && !*complete {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[!] Resolve can only be used in combination with -complete\")\n\t\t}\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Getting sources from\", e)\n\t\t}\n\t\tsources, err := getScriptSrc(e)\n\t\t// ToDo: Just skip it. Dont panic. Trow a error in stderr\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tif *complete {\n\t\t\t// ToDo: send copy of sources to completeUrls, and if there was an error. keep the old sources and display the error to stderr\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}\n\n\t\tif *resolve {\n\t\t\tif *complete {\n\t\t\t\tif !*plain && !*silent {\n\t\t\t\t\tfmt.Println(\"[+] Resolving files\")\n\t\t\t\t}\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\t// ToDo: send copy of sources to resolveUrls, and if there was an error. keep the old sources and display the error to stderr\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif !*plain && !*silent {\n\t\t\t\t\tfmt.Println(\"[-] Resolve can only be used in combination with -complete\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif !*silent {\n\t\t\tfor _, i := range sources {\n\t\t\t\tfmt.Println(i)\n\t\t\t}\n\t\t}\n\n\t\tif *outputFile != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFile != \"\" {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Saving output to \", *outputFile)\n\t\t}\n\t\tif err := saveToFile(allSources, *outputFile); err != nil {\n\t\t\tlog.Fatalf(\"saveToFile: %s\", err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string) ([]string, error) {\n\t// Request the HTML page.\n\tres, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\t// ToDo: Change to no panic. only print warning in stderr\n\t\tfmt.Fprintln(os.Stderr, url, \"didnt resolve/return a 200. StatusCode:\", res.StatusCode)\n\t\treturn nil, err\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i, _ := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "methods": [{"name": "main", "start_line": 16, "end_line": 139}, {"name": "saveToFile", "start_line": 142, "end_line": 154}, {"name": "", "start_line": 178, "end_line": 183}, {"name": "getScriptSrc", "start_line": 156, "end_line": 186}, {"name": "readLines", "start_line": 189, "end_line": 202}, {"name": "resolveUrls", "start_line": 204, "end_line": 215}, {"name": "completeUrls", "start_line": 217, "end_line": 233}], "methods_before": [{"name": "main", "start_line": 16, "end_line": 138}, {"name": "saveToFile", "start_line": 141, "end_line": 153}, {"name": "", "start_line": 177, "end_line": 182}, {"name": "getScriptSrc", "start_line": 155, "end_line": 185}, {"name": "readLines", "start_line": 188, "end_line": 201}, {"name": "resolveUrls", "start_line": 203, "end_line": 214}, {"name": "completeUrls", "start_line": 216, "end_line": 232}], "changed_methods": [{"name": "getScriptSrc", "start_line": 156, "end_line": 186}, {"name": "main", "start_line": 16, "end_line": 139}], "nloc": 194, "complexity": 67, "token_count": 1226}], "dmm_unit_size": 0.0, "dmm_unit_complexity": 0.5, "dmm_unit_interfacing": 1.0},
    {"hash": "fed797af16f08f079ac37ca4a59dc4105025d666", "msg": "Added a printing/error interface, colors, better handling of errors, and more...", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "003random", "email": "003random@protonmail.com"}, "author_date": "2018-11-11 23:40:20+01:00", "author_timezone": -3600, "committer_date": "2018-11-11 23:40:20+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["245068de77104ad41378e4fd986821b068eb371c"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 189, "insertions": 226, "lines": 415, "files": 1, "modified_files": [{"old_path": "main.go", "new_path": "main.go", "filename": "main.go", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -1,233 +1,270 @@\n package main\n \n import (\n-\t\"bufio\"\n-\t\"flag\"\n-\t\"fmt\"\n-\t\"log\"\n-\t\"net/http\"\n-\t\"net/url\"\n-\t\"os\"\n-\t\"strings\"\n-\n-\t\"github.com/PuerkitoBio/goquery\"\n+        \"bufio\"\n+        \"flag\"\n+        \"fmt\"\n+        \"net/http\"\n+        \"net/url\"\n+        \"os\"\n+        \"strings\"\n+\t\"strconv\"\n+\n+        \"github.com/PuerkitoBio/goquery\"\n+\t\"github.com/logrusorgru/aurora\"\n )\n \n+type logger interface {\n+        Log(msg string)\n+\tError(msg string, err error)\n+}\n+\n+type silent struct{}\n+\n+func (s silent) Log(msg string) {\n+}\n+\n+func (s silent) Error(msg string, err error) {\n+}\n+\n+type verbose struct{\n+\t\n+}\n+\n+func (v verbose) Log(msg string) {\n+\tfmt.Println(au.Cyan(msg))\n+}\n+\n+func Log(l logger, msg string) {\n+        l.Log(msg)\n+}\n+\n+func (v verbose) Error(msg string, err error) {\t\n+\tfmt.Fprintln(os.Stderr, au.Red(msg))\n+\tif err != nil {\n+\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n+\t}\n+}\n+\n+func Error(l logger, msg string, err error) {\n+\tl.Error(msg, err)\n+}\n+\n+var output logger\n+var au aurora.Aurora\n+\n func main() {\n \turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n-\toutputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\n-\tinputFile := flag.String(\"input\", \"\", \"Input file with urls\")\n-\tresolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\n-\tcomplete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n-\tplain := flag.Bool(\"plain\", false, \"Output only the results\")\n-\tsilent := flag.Bool(\"silent\", false, \"Dont output anything\")\n+\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n+\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n+\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n+\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n+\tplainArg := flag.Bool(\"plain\", false, \"Output only the results\")\n+\tsilentArg := flag.Bool(\"silent\", false, \"Dont output anything\")\n+\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n \tflag.Parse()\n \n-\tvar urls []string\n-\tvar allSources []string\n+\tau = aurora.NewAurora(!*noColorsArg)\n \n-\tstat, err := os.Stdin.Stat()\n-\tif err != nil {\n-\t\tlog.Fatal(err)\n-\t}\n+        var urls []string\n+        var allSources []string\n \n-\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n-\t\tscanner := bufio.NewScanner(os.Stdin)\n-\t\tfor scanner.Scan() {\n-\t\t\turls = append(urls, scanner.Text())\n-\t\t}\n-\t\tif err := scanner.Err(); err != nil {\n-\t\t\tfmt.Fprintln(os.Stderr, \"reading standard input:\", err)\n-\t\t}\n-\t\tif len(urls) > 0 {\n-\t\t\tif !*plain && !*silent {\n-\t\t\t\tfmt.Println(\"[+] Received urls from Stdin\")\n-\t\t\t}\n-\t\t}\n-\t}\n+        if *silentArg || *plainArg {\n+                output = silent{}\n+        } else {\n+                output = verbose{}\n+        }\n \n-\tif *inputFile != \"\" {\n-\t\tlines, err := readLines(*inputFile)\n-\t\tif err != nil {\n-\t\t\tlog.Fatal(err)\n-\t\t}\n-\t\tif !*plain && !*silent {\n-\t\t\tfmt.Println(\"[+] Set url file to\", *inputFile)\n-\t\t}\n-\t\turls = append(urls, lines...)\n-\t}\n+        stat, err := os.Stdin.Stat()\n+        if err != nil {\n+                output.Error(\"[!] Couldnt read Stdin\", err)\n+        }\n \n-\tif *urlArg != \"\" {\n-\t\tif !*plain && !*silent {\n-\t\t\tfmt.Println(\"[+] Set url to\", *urlArg)\n-\t\t}\n-\t\turls = append(urls, *urlArg)\n-\t}\n+        if (stat.Mode() & os.ModeCharDevice) == 0 {\n+                scanner := bufio.NewScanner(os.Stdin)\n+                for scanner.Scan() {\n+                        urls = append(urls, scanner.Text())\n+                }\n+                if err := scanner.Err(); err != nil {\n+                        output.Error(\"[!] Couldnt read Stdin\", err)\n+                }\n+                if len(urls) > 0 {\n+                        output.Log(\"[+] Received urls from Stdin\")\n+                }\n+        }\n \n-\tif len(urls) == 0 {\n-\t\tif !*plain && !*silent {\n-\t\t\tfmt.Println(\"[!] No urls supplied\")\n-\t\t}\n-\t\tos.Exit(3)\n-\t}\n+        if *inputFileArg != \"\" {\n+                lines, err := readLines(*inputFileArg)\n+                if err != nil {\n+                        output.Error(\"[!] Couldn't read from input file\", err)\n+                }\n+                output.Log(\"[+] Set url file to \" + *inputFileArg)\n+                urls = append(urls, lines...)\n+        }\n \n-\tif *resolve && !*complete {\n-\t\tif !*plain && !*silent {\n-\t\t\tfmt.Println(\"[!] Resolve can only be used in combination with -complete\")\n-\t\t}\n-\t\tos.Exit(3)\n-\t}\n+        if *urlArg != \"\" {\n+                output.Log(\"[+] Set url to \" + *urlArg)\n+                urls = append(urls, *urlArg)\n+        }\n \n-\tfor _, e := range urls {\n-\t\tif !*plain && !*silent {\n-\t\t\tfmt.Println(\"[+] Getting sources from\", e)\n-\t\t}\n-\t\tsources, err := getScriptSrc(e)\n-\t\t// ToDo: Just skip it. Dont panic. Trow a error in stderr\n-\t\tif err != nil {\n-\t\t\tfmt.Fprintln(os.Stderr, \"[!] Couldn't get sources from\", e)\n-\t\t\tfmt.Fprintln(os.Stderr, \"[!] Error:\", err)\n-\t\t}\n-\n-\t\tif *complete {\n-\t\t\t// ToDo: send copy of sources to completeUrls, and if there was an error. keep the old sources and display the error to stderr\n-\t\t\tsources, err = completeUrls(sources, e)\n-\t\t\tif err != nil {\n-\t\t\t\tlog.Fatal(err)\n-\t\t\t}\n-\t\t}\n-\n-\t\tif *resolve {\n-\t\t\tif *complete {\n-\t\t\t\tif !*plain && !*silent {\n-\t\t\t\t\tfmt.Println(\"[+] Resolving files\")\n-\t\t\t\t}\n-\t\t\t\tsources, err = resolveUrls(sources)\n-\t\t\t\tif err != nil {\n-\t\t\t\t\t// ToDo: send copy of sources to resolveUrls, and if there was an error. keep the old sources and display the error to stderr\n-\t\t\t\t\tlog.Fatal(err)\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tif !*plain && !*silent {\n-\t\t\t\t\tfmt.Println(\"[-] Resolve can only be used in combination with -complete\")\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tif !*silent {\n-\t\t\tfor _, i := range sources {\n-\t\t\t\tfmt.Println(i)\n-\t\t\t}\n-\t\t}\n-\n-\t\tif *outputFile != \"\" {\n-\t\t\tallSources = append(allSources, sources...)\n-\t\t}\n+        if len(urls) == 0 {\n+                output.Error(\"[!] No urls supplied\", nil)\n+                os.Exit(3)\n+        }\n \n-\t}\n+        if *resolveArg && !*completeArg {\n+                output.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n+                os.Exit(3)\n+        }\n \n-\t// Save to file\n-\tif *outputFile != \"\" {\n-\t\tif !*plain && !*silent {\n-\t\t\tfmt.Println(\"[+] Saving output to \", *outputFile)\n-\t\t}\n-\t\tif err := saveToFile(allSources, *outputFile); err != nil {\n-\t\t\tlog.Fatalf(\"saveToFile: %s\", err)\n-\t\t}\n-\t}\n+        for _, e := range urls {\n+                var sourcesBak []string\n+                var completedSuccessfully = true\n+                output.Log(\"[+] Getting sources from \" + e)\n+                sources, err := getScriptSrc(e)\n+                if err != nil {\n+                        output.Error(\"[!] Couldn't get sources from \" + e, err)\n+                }\n+\n+                if *completeArg {\n+                        output.Log(\"[+] Completing URLs\")\n+                        sourcesBak = sources\n+                        sources, err = completeUrls(sources, e)\n+                        if err != nil {\n+                                output.Error(\"[!] Couldn't complete URLs\", err)\n+                                sources = sourcesBak\n+                                completedSuccessfully = false\n+                        }\n+                }\n+\n+                if *resolveArg && *completeArg {\n+                        if completedSuccessfully {\n+                                output.Log(\"[+] Resolving files\")\n+                                sourcesBak = sources\n+                                sources, err = resolveUrls(sources)\n+                                if err != nil {\n+                                        output.Error(\"[!] Couldn't resolve URLs\", err)\n+                                        sources = sourcesBak\n+                                }\n+                        } else {\n+                                output.Error(\"[!] Couldn't resolve URLs\", nil)\n+                        }\n+                } else if *resolveArg {\n+                        output.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n+                }\n+\n+                if !*silentArg {\n+                        for _, i := range sources {\n+                                fmt.Println(i)\n+                        }\n+                }\n+\n+                if *outputFileArg != \"\" {\n+                        allSources = append(allSources, sources...)\n+                }\n+\n+        }\n+\n+        // Save to file\n+        if *outputFileArg != \"\" {\n+                output.Log(\"[+] Saving output to \" + *outputFileArg)\n+                err := saveToFile(allSources, *outputFileArg)\n+                if err != nil {\n+                        output.Error(\"[!] Couldn't save to output file \" + *outputFileArg, err)\n+                }\n+        }\n \n }\n \n // ToDO: Use channel instead of slide, and use io.Writer instead of file path\n func saveToFile(sources []string, path string) error {\n-\tfile, err := os.Create(path)\n-\tif err != nil {\n-\t\treturn err\n-\t}\n-\tdefer file.Close()\n+        file, err := os.Create(path)\n+        if err != nil {\n+                return err\n+        }\n+        defer file.Close()\n \n-\tw := bufio.NewWriter(file)\n-\tfor _, line := range sources {\n-\t\tfmt.Fprintln(w, line)\n-\t}\n-\treturn w.Flush()\n+        w := bufio.NewWriter(file)\n+        for _, line := range sources {\n+                fmt.Fprintln(w, line)\n+        }\n+        return w.Flush()\n }\n \n func getScriptSrc(url string) ([]string, error) {\n-\t// Request the HTML page.\n-\tres, err := http.Get(url)\n-\tif err != nil {\n-\t\treturn nil, err\n-\t}\n-\tdefer res.Body.Close()\n-\tif res.StatusCode != 200 {\n-\t\tfmt.Fprintln(os.Stderr, \"[!] Couldn't get sources from\", url)\n-\t\tfmt.Fprintln(os.Stderr, \"[!] Error: StatusCode:\", res.StatusCode, \"was returned instead of a 200 OK\")\n-\t\treturn nil, nil\n-\t}\n+        // Request the HTML page.\n+        res, err := http.Get(url)\n+        if err != nil {\n+                return nil, err\n+        }\n+        defer res.Body.Close()\n+        if res.StatusCode != 200 {\n+                output.Error(\"[!] \" + url + \" returned an \" + strconv.Itoa(res.StatusCode) + \" instead of an 200 OK\", nil)\n+                return nil, nil\n+        }\n \n-\t// Load the HTML document\n-\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n-\tif err != nil {\n-\t\treturn nil, err\n-\t}\n+        // Load the HTML document\n+        doc, err := goquery.NewDocumentFromReader(res.Body)\n+        if err != nil {\n+                return nil, err\n+        }\n \n-\tvar sources []string\n+        var sources []string\n \n-\t// Find the script tags, and get the src\n-\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n-\t\tsrc, _ := s.Attr(\"src\")\n-\t\tif src != \"\" {\n-\t\t\tsources = append(sources, src)\n-\t\t}\n-\t})\n+        // Find the script tags, and get the src\n+        doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n+                src, _ := s.Attr(\"src\")\n+                if src != \"\" {\n+                        sources = append(sources, src)\n+                }\n+        })\n \n-\treturn sources, nil\n+        return sources, nil\n }\n \n // ToDo: Use io.Writer instead of a file path\n func readLines(path string) ([]string, error) {\n-\tfile, err := os.Open(path)\n-\tif err != nil {\n-\t\treturn nil, err\n-\t}\n-\tdefer file.Close()\n+        file, err := os.Open(path)\n+        if err != nil {\n+                return nil, err\n+        }\n+        defer file.Close()\n \n-\tvar lines []string\n-\tscanner := bufio.NewScanner(file)\n-\tfor scanner.Scan() {\n-\t\tlines = append(lines, scanner.Text())\n-\t}\n-\treturn lines, scanner.Err()\n+        var lines []string\n+        scanner := bufio.NewScanner(file)\n+        for scanner.Scan() {\n+                lines = append(lines, scanner.Text())\n+        }\n+        return lines, scanner.Err()\n }\n \n func resolveUrls(s []string) ([]string, error) {\n-\tfor i := len(s) - 1; i >= 0; i-- {\n-\t\tresp, err := http.Get(s[i])\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n-\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n-\t\t\ts = append(s[:i], s[i+1:]...)\n-\t\t}\n-\t}\n-\treturn s, nil\n+        for i := len(s) - 1; i >= 0; i-- {\n+                resp, err := http.Get(s[i])\n+                if err != nil {\n+                        return nil, err\n+                }\n+                if resp.StatusCode != 200 && resp.StatusCode != 304 {\n+                        s = append(s[:i], s[i+1:]...)\n+                }\n+        }\n+        return s, nil\n }\n \n func completeUrls(s []string, mainUrl string) ([]string, error) {\n-\tu, err := url.Parse(mainUrl)\n-\tif err != nil {\n-\t\treturn nil, err\n-\t}\n+        u, err := url.Parse(mainUrl)\n+        if err != nil {\n+                return nil, err\n+        }\n \n-\tfor i, _ := range s {\n-\t\tif strings.HasPrefix(s[i], \"//\") {\n-\t\t\ts[i] = u.Scheme + \":\" + s[i]\n-\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n-\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n-\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n-\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n-\t\t}\n-\t}\n-\treturn s, nil\n+        for i, _ := range s {\n+                if strings.HasPrefix(s[i], \"//\") {\n+                        s[i] = u.Scheme + \":\" + s[i]\n+                } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n+                        s[i] = u.Scheme + \"://\" + u.Host + s[i]\n+                } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n+                        s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n+                }\n+        }\n+        return s, nil\n }\n", "diff_parsed": {"added": [[4, "        \"bufio\""], [5, "        \"flag\""], [6, "        \"fmt\""], [7, "        \"net/http\""], [8, "        \"net/url\""], [9, "        \"os\""], [10, "        \"strings\""], [11, "\t\"strconv\""], [12, ""], [13, "        \"github.com/PuerkitoBio/goquery\""], [14, "\t\"github.com/logrusorgru/aurora\""], [17, "type logger interface {"], [18, "        Log(msg string)"], [19, "\tError(msg string, err error)"], [20, "}"], [21, ""], [22, "type silent struct{}"], [23, ""], [24, "func (s silent) Log(msg string) {"], [25, "}"], [26, ""], [27, "func (s silent) Error(msg string, err error) {"], [28, "}"], [29, ""], [30, "type verbose struct{"], [31, ""], [32, "}"], [33, ""], [34, "func (v verbose) Log(msg string) {"], [35, "\tfmt.Println(au.Cyan(msg))"], [36, "}"], [37, ""], [38, "func Log(l logger, msg string) {"], [39, "        l.Log(msg)"], [40, "}"], [41, ""], [42, "func (v verbose) Error(msg string, err error) {"], [43, "\tfmt.Fprintln(os.Stderr, au.Red(msg))"], [44, "\tif err != nil {"], [45, "\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))"], [46, "\t}"], [47, "}"], [48, ""], [49, "func Error(l logger, msg string, err error) {"], [50, "\tl.Error(msg, err)"], [51, "}"], [52, ""], [53, "var output logger"], [54, "var au aurora.Aurora"], [55, ""], [58, "\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")"], [59, "\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")"], [60, "\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")"], [61, "\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")"], [62, "\tplainArg := flag.Bool(\"plain\", false, \"Output only the results\")"], [63, "\tsilentArg := flag.Bool(\"silent\", false, \"Dont output anything\")"], [64, "\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")"], [67, "\tau = aurora.NewAurora(!*noColorsArg)"], [69, "        var urls []string"], [70, "        var allSources []string"], [72, "        if *silentArg || *plainArg {"], [73, "                output = silent{}"], [74, "        } else {"], [75, "                output = verbose{}"], [76, "        }"], [78, "        stat, err := os.Stdin.Stat()"], [79, "        if err != nil {"], [80, "                output.Error(\"[!] Couldnt read Stdin\", err)"], [81, "        }"], [83, "        if (stat.Mode() & os.ModeCharDevice) == 0 {"], [84, "                scanner := bufio.NewScanner(os.Stdin)"], [85, "                for scanner.Scan() {"], [86, "                        urls = append(urls, scanner.Text())"], [87, "                }"], [88, "                if err := scanner.Err(); err != nil {"], [89, "                        output.Error(\"[!] Couldnt read Stdin\", err)"], [90, "                }"], [91, "                if len(urls) > 0 {"], [92, "                        output.Log(\"[+] Received urls from Stdin\")"], [93, "                }"], [94, "        }"], [96, "        if *inputFileArg != \"\" {"], [97, "                lines, err := readLines(*inputFileArg)"], [98, "                if err != nil {"], [99, "                        output.Error(\"[!] Couldn't read from input file\", err)"], [100, "                }"], [101, "                output.Log(\"[+] Set url file to \" + *inputFileArg)"], [102, "                urls = append(urls, lines...)"], [103, "        }"], [105, "        if *urlArg != \"\" {"], [106, "                output.Log(\"[+] Set url to \" + *urlArg)"], [107, "                urls = append(urls, *urlArg)"], [108, "        }"], [110, "        if len(urls) == 0 {"], [111, "                output.Error(\"[!] No urls supplied\", nil)"], [112, "                os.Exit(3)"], [113, "        }"], [115, "        if *resolveArg && !*completeArg {"], [116, "                output.Error(\"[!] Resolve can only be used in combination with -complete\", nil)"], [117, "                os.Exit(3)"], [118, "        }"], [120, "        for _, e := range urls {"], [121, "                var sourcesBak []string"], [122, "                var completedSuccessfully = true"], [123, "                output.Log(\"[+] Getting sources from \" + e)"], [124, "                sources, err := getScriptSrc(e)"], [125, "                if err != nil {"], [126, "                        output.Error(\"[!] Couldn't get sources from \" + e, err)"], [127, "                }"], [128, ""], [129, "                if *completeArg {"], [130, "                        output.Log(\"[+] Completing URLs\")"], [131, "                        sourcesBak = sources"], [132, "                        sources, err = completeUrls(sources, e)"], [133, "                        if err != nil {"], [134, "                                output.Error(\"[!] Couldn't complete URLs\", err)"], [135, "                                sources = sourcesBak"], [136, "                                completedSuccessfully = false"], [137, "                        }"], [138, "                }"], [139, ""], [140, "                if *resolveArg && *completeArg {"], [141, "                        if completedSuccessfully {"], [142, "                                output.Log(\"[+] Resolving files\")"], [143, "                                sourcesBak = sources"], [144, "                                sources, err = resolveUrls(sources)"], [145, "                                if err != nil {"], [146, "                                        output.Error(\"[!] Couldn't resolve URLs\", err)"], [147, "                                        sources = sourcesBak"], [148, "                                }"], [149, "                        } else {"], [150, "                                output.Error(\"[!] Couldn't resolve URLs\", nil)"], [151, "                        }"], [152, "                } else if *resolveArg {"], [153, "                        output.Error(\"[!] Resolve can only be used in combination with -complete\", nil)"], [154, "                }"], [155, ""], [156, "                if !*silentArg {"], [157, "                        for _, i := range sources {"], [158, "                                fmt.Println(i)"], [159, "                        }"], [160, "                }"], [161, ""], [162, "                if *outputFileArg != \"\" {"], [163, "                        allSources = append(allSources, sources...)"], [164, "                }"], [165, ""], [166, "        }"], [167, ""], [168, "        // Save to file"], [169, "        if *outputFileArg != \"\" {"], [170, "                output.Log(\"[+] Saving output to \" + *outputFileArg)"], [171, "                err := saveToFile(allSources, *outputFileArg)"], [172, "                if err != nil {"], [173, "                        output.Error(\"[!] Couldn't save to output file \" + *outputFileArg, err)"], [174, "                }"], [175, "        }"], [181, "        file, err := os.Create(path)"], [182, "        if err != nil {"], [183, "                return err"], [184, "        }"], [185, "        defer file.Close()"], [187, "        w := bufio.NewWriter(file)"], [188, "        for _, line := range sources {"], [189, "                fmt.Fprintln(w, line)"], [190, "        }"], [191, "        return w.Flush()"], [195, "        // Request the HTML page."], [196, "        res, err := http.Get(url)"], [197, "        if err != nil {"], [198, "                return nil, err"], [199, "        }"], [200, "        defer res.Body.Close()"], [201, "        if res.StatusCode != 200 {"], [202, "                output.Error(\"[!] \" + url + \" returned an \" + strconv.Itoa(res.StatusCode) + \" instead of an 200 OK\", nil)"], [203, "                return nil, nil"], [204, "        }"], [206, "        // Load the HTML document"], [207, "        doc, err := goquery.NewDocumentFromReader(res.Body)"], [208, "        if err != nil {"], [209, "                return nil, err"], [210, "        }"], [212, "        var sources []string"], [214, "        // Find the script tags, and get the src"], [215, "        doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {"], [216, "                src, _ := s.Attr(\"src\")"], [217, "                if src != \"\" {"], [218, "                        sources = append(sources, src)"], [219, "                }"], [220, "        })"], [222, "        return sources, nil"], [227, "        file, err := os.Open(path)"], [228, "        if err != nil {"], [229, "                return nil, err"], [230, "        }"], [231, "        defer file.Close()"], [233, "        var lines []string"], [234, "        scanner := bufio.NewScanner(file)"], [235, "        for scanner.Scan() {"], [236, "                lines = append(lines, scanner.Text())"], [237, "        }"], [238, "        return lines, scanner.Err()"], [242, "        for i := len(s) - 1; i >= 0; i-- {"], [243, "                resp, err := http.Get(s[i])"], [244, "                if err != nil {"], [245, "                        return nil, err"], [246, "                }"], [247, "                if resp.StatusCode != 200 && resp.StatusCode != 304 {"], [248, "                        s = append(s[:i], s[i+1:]...)"], [249, "                }"], [250, "        }"], [251, "        return s, nil"], [255, "        u, err := url.Parse(mainUrl)"], [256, "        if err != nil {"], [257, "                return nil, err"], [258, "        }"], [260, "        for i, _ := range s {"], [261, "                if strings.HasPrefix(s[i], \"//\") {"], [262, "                        s[i] = u.Scheme + \":\" + s[i]"], [263, "                } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {"], [264, "                        s[i] = u.Scheme + \"://\" + u.Host + s[i]"], [265, "                } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {"], [266, "                        s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]"], [267, "                }"], [268, "        }"], [269, "        return s, nil"]], "deleted": [[4, "\t\"bufio\""], [5, "\t\"flag\""], [6, "\t\"fmt\""], [7, "\t\"log\""], [8, "\t\"net/http\""], [9, "\t\"net/url\""], [10, "\t\"os\""], [11, "\t\"strings\""], [12, ""], [13, "\t\"github.com/PuerkitoBio/goquery\""], [18, "\toutputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")"], [19, "\tinputFile := flag.String(\"input\", \"\", \"Input file with urls\")"], [20, "\tresolve := flag.Bool(\"resolve\", false, \"Output only existing files\")"], [21, "\tcomplete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")"], [22, "\tplain := flag.Bool(\"plain\", false, \"Output only the results\")"], [23, "\tsilent := flag.Bool(\"silent\", false, \"Dont output anything\")"], [26, "\tvar urls []string"], [27, "\tvar allSources []string"], [29, "\tstat, err := os.Stdin.Stat()"], [30, "\tif err != nil {"], [31, "\t\tlog.Fatal(err)"], [32, "\t}"], [34, "\tif (stat.Mode() & os.ModeCharDevice) == 0 {"], [35, "\t\tscanner := bufio.NewScanner(os.Stdin)"], [36, "\t\tfor scanner.Scan() {"], [37, "\t\t\turls = append(urls, scanner.Text())"], [38, "\t\t}"], [39, "\t\tif err := scanner.Err(); err != nil {"], [40, "\t\t\tfmt.Fprintln(os.Stderr, \"reading standard input:\", err)"], [41, "\t\t}"], [42, "\t\tif len(urls) > 0 {"], [43, "\t\t\tif !*plain && !*silent {"], [44, "\t\t\t\tfmt.Println(\"[+] Received urls from Stdin\")"], [45, "\t\t\t}"], [46, "\t\t}"], [47, "\t}"], [49, "\tif *inputFile != \"\" {"], [50, "\t\tlines, err := readLines(*inputFile)"], [51, "\t\tif err != nil {"], [52, "\t\t\tlog.Fatal(err)"], [53, "\t\t}"], [54, "\t\tif !*plain && !*silent {"], [55, "\t\t\tfmt.Println(\"[+] Set url file to\", *inputFile)"], [56, "\t\t}"], [57, "\t\turls = append(urls, lines...)"], [58, "\t}"], [60, "\tif *urlArg != \"\" {"], [61, "\t\tif !*plain && !*silent {"], [62, "\t\t\tfmt.Println(\"[+] Set url to\", *urlArg)"], [63, "\t\t}"], [64, "\t\turls = append(urls, *urlArg)"], [65, "\t}"], [67, "\tif len(urls) == 0 {"], [68, "\t\tif !*plain && !*silent {"], [69, "\t\t\tfmt.Println(\"[!] No urls supplied\")"], [70, "\t\t}"], [71, "\t\tos.Exit(3)"], [72, "\t}"], [74, "\tif *resolve && !*complete {"], [75, "\t\tif !*plain && !*silent {"], [76, "\t\t\tfmt.Println(\"[!] Resolve can only be used in combination with -complete\")"], [77, "\t\t}"], [78, "\t\tos.Exit(3)"], [79, "\t}"], [81, "\tfor _, e := range urls {"], [82, "\t\tif !*plain && !*silent {"], [83, "\t\t\tfmt.Println(\"[+] Getting sources from\", e)"], [84, "\t\t}"], [85, "\t\tsources, err := getScriptSrc(e)"], [86, "\t\t// ToDo: Just skip it. Dont panic. Trow a error in stderr"], [87, "\t\tif err != nil {"], [88, "\t\t\tfmt.Fprintln(os.Stderr, \"[!] Couldn't get sources from\", e)"], [89, "\t\t\tfmt.Fprintln(os.Stderr, \"[!] Error:\", err)"], [90, "\t\t}"], [91, ""], [92, "\t\tif *complete {"], [93, "\t\t\t// ToDo: send copy of sources to completeUrls, and if there was an error. keep the old sources and display the error to stderr"], [94, "\t\t\tsources, err = completeUrls(sources, e)"], [95, "\t\t\tif err != nil {"], [96, "\t\t\t\tlog.Fatal(err)"], [97, "\t\t\t}"], [98, "\t\t}"], [99, ""], [100, "\t\tif *resolve {"], [101, "\t\t\tif *complete {"], [102, "\t\t\t\tif !*plain && !*silent {"], [103, "\t\t\t\t\tfmt.Println(\"[+] Resolving files\")"], [104, "\t\t\t\t}"], [105, "\t\t\t\tsources, err = resolveUrls(sources)"], [106, "\t\t\t\tif err != nil {"], [107, "\t\t\t\t\t// ToDo: send copy of sources to resolveUrls, and if there was an error. keep the old sources and display the error to stderr"], [108, "\t\t\t\t\tlog.Fatal(err)"], [109, "\t\t\t\t}"], [110, "\t\t\t} else {"], [111, "\t\t\t\tif !*plain && !*silent {"], [112, "\t\t\t\t\tfmt.Println(\"[-] Resolve can only be used in combination with -complete\")"], [113, "\t\t\t\t}"], [114, "\t\t\t}"], [115, "\t\t}"], [116, ""], [117, "\t\tif !*silent {"], [118, "\t\t\tfor _, i := range sources {"], [119, "\t\t\t\tfmt.Println(i)"], [120, "\t\t\t}"], [121, "\t\t}"], [122, ""], [123, "\t\tif *outputFile != \"\" {"], [124, "\t\t\tallSources = append(allSources, sources...)"], [125, "\t\t}"], [127, "\t}"], [129, "\t// Save to file"], [130, "\tif *outputFile != \"\" {"], [131, "\t\tif !*plain && !*silent {"], [132, "\t\t\tfmt.Println(\"[+] Saving output to \", *outputFile)"], [133, "\t\t}"], [134, "\t\tif err := saveToFile(allSources, *outputFile); err != nil {"], [135, "\t\t\tlog.Fatalf(\"saveToFile: %s\", err)"], [136, "\t\t}"], [137, "\t}"], [143, "\tfile, err := os.Create(path)"], [144, "\tif err != nil {"], [145, "\t\treturn err"], [146, "\t}"], [147, "\tdefer file.Close()"], [149, "\tw := bufio.NewWriter(file)"], [150, "\tfor _, line := range sources {"], [151, "\t\tfmt.Fprintln(w, line)"], [152, "\t}"], [153, "\treturn w.Flush()"], [157, "\t// Request the HTML page."], [158, "\tres, err := http.Get(url)"], [159, "\tif err != nil {"], [160, "\t\treturn nil, err"], [161, "\t}"], [162, "\tdefer res.Body.Close()"], [163, "\tif res.StatusCode != 200 {"], [164, "\t\tfmt.Fprintln(os.Stderr, \"[!] Couldn't get sources from\", url)"], [165, "\t\tfmt.Fprintln(os.Stderr, \"[!] Error: StatusCode:\", res.StatusCode, \"was returned instead of a 200 OK\")"], [166, "\t\treturn nil, nil"], [167, "\t}"], [169, "\t// Load the HTML document"], [170, "\tdoc, err := goquery.NewDocumentFromReader(res.Body)"], [171, "\tif err != nil {"], [172, "\t\treturn nil, err"], [173, "\t}"], [175, "\tvar sources []string"], [177, "\t// Find the script tags, and get the src"], [178, "\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {"], [179, "\t\tsrc, _ := s.Attr(\"src\")"], [180, "\t\tif src != \"\" {"], [181, "\t\t\tsources = append(sources, src)"], [182, "\t\t}"], [183, "\t})"], [185, "\treturn sources, nil"], [190, "\tfile, err := os.Open(path)"], [191, "\tif err != nil {"], [192, "\t\treturn nil, err"], [193, "\t}"], [194, "\tdefer file.Close()"], [196, "\tvar lines []string"], [197, "\tscanner := bufio.NewScanner(file)"], [198, "\tfor scanner.Scan() {"], [199, "\t\tlines = append(lines, scanner.Text())"], [200, "\t}"], [201, "\treturn lines, scanner.Err()"], [205, "\tfor i := len(s) - 1; i >= 0; i-- {"], [206, "\t\tresp, err := http.Get(s[i])"], [207, "\t\tif err != nil {"], [208, "\t\t\treturn nil, err"], [209, "\t\t}"], [210, "\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {"], [211, "\t\t\ts = append(s[:i], s[i+1:]...)"], [212, "\t\t}"], [213, "\t}"], [214, "\treturn s, nil"], [218, "\tu, err := url.Parse(mainUrl)"], [219, "\tif err != nil {"], [220, "\t\treturn nil, err"], [221, "\t}"], [223, "\tfor i, _ := range s {"], [224, "\t\tif strings.HasPrefix(s[i], \"//\") {"], [225, "\t\t\ts[i] = u.Scheme + \":\" + s[i]"], [226, "\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {"], [227, "\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]"], [228, "\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {"], [229, "\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]"], [230, "\t\t}"], [231, "\t}"], [232, "\treturn s, nil"]]}, "added_lines": 226, "deleted_lines": 189, "source_code": "package main\n\nimport (\n        \"bufio\"\n        \"flag\"\n        \"fmt\"\n        \"net/http\"\n        \"net/url\"\n        \"os\"\n        \"strings\"\n\t\"strconv\"\n\n        \"github.com/PuerkitoBio/goquery\"\n\t\"github.com/logrusorgru/aurora\"\n)\n\ntype logger interface {\n        Log(msg string)\n\tError(msg string, err error)\n}\n\ntype silent struct{}\n\nfunc (s silent) Log(msg string) {\n}\n\nfunc (s silent) Error(msg string, err error) {\n}\n\ntype verbose struct{\n\t\n}\n\nfunc (v verbose) Log(msg string) {\n\tfmt.Println(au.Cyan(msg))\n}\n\nfunc Log(l logger, msg string) {\n        l.Log(msg)\n}\n\nfunc (v verbose) Error(msg string, err error) {\t\n\tfmt.Fprintln(os.Stderr, au.Red(msg))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n\t}\n}\n\nfunc Error(l logger, msg string, err error) {\n\tl.Error(msg, err)\n}\n\nvar output logger\nvar au aurora.Aurora\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tplainArg := flag.Bool(\"plain\", false, \"Output only the results\")\n\tsilentArg := flag.Bool(\"silent\", false, \"Dont output anything\")\n\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n\tflag.Parse()\n\n\tau = aurora.NewAurora(!*noColorsArg)\n\n        var urls []string\n        var allSources []string\n\n        if *silentArg || *plainArg {\n                output = silent{}\n        } else {\n                output = verbose{}\n        }\n\n        stat, err := os.Stdin.Stat()\n        if err != nil {\n                output.Error(\"[!] Couldnt read Stdin\", err)\n        }\n\n        if (stat.Mode() & os.ModeCharDevice) == 0 {\n                scanner := bufio.NewScanner(os.Stdin)\n                for scanner.Scan() {\n                        urls = append(urls, scanner.Text())\n                }\n                if err := scanner.Err(); err != nil {\n                        output.Error(\"[!] Couldnt read Stdin\", err)\n                }\n                if len(urls) > 0 {\n                        output.Log(\"[+] Received urls from Stdin\")\n                }\n        }\n\n        if *inputFileArg != \"\" {\n                lines, err := readLines(*inputFileArg)\n                if err != nil {\n                        output.Error(\"[!] Couldn't read from input file\", err)\n                }\n                output.Log(\"[+] Set url file to \" + *inputFileArg)\n                urls = append(urls, lines...)\n        }\n\n        if *urlArg != \"\" {\n                output.Log(\"[+] Set url to \" + *urlArg)\n                urls = append(urls, *urlArg)\n        }\n\n        if len(urls) == 0 {\n                output.Error(\"[!] No urls supplied\", nil)\n                os.Exit(3)\n        }\n\n        if *resolveArg && !*completeArg {\n                output.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n                os.Exit(3)\n        }\n\n        for _, e := range urls {\n                var sourcesBak []string\n                var completedSuccessfully = true\n                output.Log(\"[+] Getting sources from \" + e)\n                sources, err := getScriptSrc(e)\n                if err != nil {\n                        output.Error(\"[!] Couldn't get sources from \" + e, err)\n                }\n\n                if *completeArg {\n                        output.Log(\"[+] Completing URLs\")\n                        sourcesBak = sources\n                        sources, err = completeUrls(sources, e)\n                        if err != nil {\n                                output.Error(\"[!] Couldn't complete URLs\", err)\n                                sources = sourcesBak\n                                completedSuccessfully = false\n                        }\n                }\n\n                if *resolveArg && *completeArg {\n                        if completedSuccessfully {\n                                output.Log(\"[+] Resolving files\")\n                                sourcesBak = sources\n                                sources, err = resolveUrls(sources)\n                                if err != nil {\n                                        output.Error(\"[!] Couldn't resolve URLs\", err)\n                                        sources = sourcesBak\n                                }\n                        } else {\n                                output.Error(\"[!] Couldn't resolve URLs\", nil)\n                        }\n                } else if *resolveArg {\n                        output.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n                }\n\n                if !*silentArg {\n                        for _, i := range sources {\n                                fmt.Println(i)\n                        }\n                }\n\n                if *outputFileArg != \"\" {\n                        allSources = append(allSources, sources...)\n                }\n\n        }\n\n        // Save to file\n        if *outputFileArg != \"\" {\n                output.Log(\"[+] Saving output to \" + *outputFileArg)\n                err := saveToFile(allSources, *outputFileArg)\n                if err != nil {\n                        output.Error(\"[!] Couldn't save to output file \" + *outputFileArg, err)\n                }\n        }\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n        file, err := os.Create(path)\n        if err != nil {\n                return err\n        }\n        defer file.Close()\n\n        w := bufio.NewWriter(file)\n        for _, line := range sources {\n                fmt.Fprintln(w, line)\n        }\n        return w.Flush()\n}\n\nfunc getScriptSrc(url string) ([]string, error) {\n        // Request the HTML page.\n        res, err := http.Get(url)\n        if err != nil {\n                return nil, err\n        }\n        defer res.Body.Close()\n        if res.StatusCode != 200 {\n                output.Error(\"[!] \" + url + \" returned an \" + strconv.Itoa(res.StatusCode) + \" instead of an 200 OK\", nil)\n                return nil, nil\n        }\n\n        // Load the HTML document\n        doc, err := goquery.NewDocumentFromReader(res.Body)\n        if err != nil {\n                return nil, err\n        }\n\n        var sources []string\n\n        // Find the script tags, and get the src\n        doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n                src, _ := s.Attr(\"src\")\n                if src != \"\" {\n                        sources = append(sources, src)\n                }\n        })\n\n        return sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n        file, err := os.Open(path)\n        if err != nil {\n                return nil, err\n        }\n        defer file.Close()\n\n        var lines []string\n        scanner := bufio.NewScanner(file)\n        for scanner.Scan() {\n                lines = append(lines, scanner.Text())\n        }\n        return lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n        for i := len(s) - 1; i >= 0; i-- {\n                resp, err := http.Get(s[i])\n                if err != nil {\n                        return nil, err\n                }\n                if resp.StatusCode != 200 && resp.StatusCode != 304 {\n                        s = append(s[:i], s[i+1:]...)\n                }\n        }\n        return s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n        u, err := url.Parse(mainUrl)\n        if err != nil {\n                return nil, err\n        }\n\n        for i, _ := range s {\n                if strings.HasPrefix(s[i], \"//\") {\n                        s[i] = u.Scheme + \":\" + s[i]\n                } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n                        s[i] = u.Scheme + \"://\" + u.Host + s[i]\n                } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n                        s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n                }\n        }\n        return s, nil\n}\n", "source_code_before": "package main\n\nimport (\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n)\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFile := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFile := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolve := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcomplete := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tplain := flag.Bool(\"plain\", false, \"Output only the results\")\n\tsilent := flag.Bool(\"silent\", false, \"Dont output anything\")\n\tflag.Parse()\n\n\tvar urls []string\n\tvar allSources []string\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, \"reading standard input:\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\tif !*plain && !*silent {\n\t\t\t\tfmt.Println(\"[+] Received urls from Stdin\")\n\t\t\t}\n\t\t}\n\t}\n\n\tif *inputFile != \"\" {\n\t\tlines, err := readLines(*inputFile)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Set url file to\", *inputFile)\n\t\t}\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Set url to\", *urlArg)\n\t\t}\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[!] No urls supplied\")\n\t\t}\n\t\tos.Exit(3)\n\t}\n\n\tif *resolve && !*complete {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[!] Resolve can only be used in combination with -complete\")\n\t\t}\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Getting sources from\", e)\n\t\t}\n\t\tsources, err := getScriptSrc(e)\n\t\t// ToDo: Just skip it. Dont panic. Trow a error in stderr\n\t\tif err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, \"[!] Couldn't get sources from\", e)\n\t\t\tfmt.Fprintln(os.Stderr, \"[!] Error:\", err)\n\t\t}\n\n\t\tif *complete {\n\t\t\t// ToDo: send copy of sources to completeUrls, and if there was an error. keep the old sources and display the error to stderr\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}\n\n\t\tif *resolve {\n\t\t\tif *complete {\n\t\t\t\tif !*plain && !*silent {\n\t\t\t\t\tfmt.Println(\"[+] Resolving files\")\n\t\t\t\t}\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\t// ToDo: send copy of sources to resolveUrls, and if there was an error. keep the old sources and display the error to stderr\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif !*plain && !*silent {\n\t\t\t\t\tfmt.Println(\"[-] Resolve can only be used in combination with -complete\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif !*silent {\n\t\t\tfor _, i := range sources {\n\t\t\t\tfmt.Println(i)\n\t\t\t}\n\t\t}\n\n\t\tif *outputFile != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFile != \"\" {\n\t\tif !*plain && !*silent {\n\t\t\tfmt.Println(\"[+] Saving output to \", *outputFile)\n\t\t}\n\t\tif err := saveToFile(allSources, *outputFile); err != nil {\n\t\t\tlog.Fatalf(\"saveToFile: %s\", err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string) ([]string, error) {\n\t// Request the HTML page.\n\tres, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\tfmt.Fprintln(os.Stderr, \"[!] Couldn't get sources from\", url)\n\t\tfmt.Fprintln(os.Stderr, \"[!] Error: StatusCode:\", res.StatusCode, \"was returned instead of a 200 OK\")\n\t\treturn nil, nil\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i, _ := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "methods": [{"name": "Log", "start_line": 24, "end_line": 25}, {"name": "Error", "start_line": 27, "end_line": 28}, {"name": "Log", "start_line": 34, "end_line": 36}, {"name": "Log", "start_line": 38, "end_line": 40}, {"name": "Error", "start_line": 42, "end_line": 47}, {"name": "Error", "start_line": 49, "end_line": 51}, {"name": "main", "start_line": 56, "end_line": 177}, {"name": "saveToFile", "start_line": 180, "end_line": 192}, {"name": "", "start_line": 215, "end_line": 220}, {"name": "getScriptSrc", "start_line": 194, "end_line": 223}, {"name": "readLines", "start_line": 226, "end_line": 239}, {"name": "resolveUrls", "start_line": 241, "end_line": 252}, {"name": "completeUrls", "start_line": 254, "end_line": 270}], "methods_before": [{"name": "main", "start_line": 16, "end_line": 139}, {"name": "saveToFile", "start_line": 142, "end_line": 154}, {"name": "", "start_line": 178, "end_line": 183}, {"name": "getScriptSrc", "start_line": 156, "end_line": 186}, {"name": "readLines", "start_line": 189, "end_line": 202}, {"name": "resolveUrls", "start_line": 204, "end_line": 215}, {"name": "completeUrls", "start_line": 217, "end_line": 233}], "changed_methods": [{"name": "saveToFile", "start_line": 180, "end_line": 192}, {"name": "Error", "start_line": 27, "end_line": 28}, {"name": "readLines", "start_line": 226, "end_line": 239}, {"name": "getScriptSrc", "start_line": 194, "end_line": 223}, {"name": "Error", "start_line": 49, "end_line": 51}, {"name": "Log", "start_line": 38, "end_line": 40}, {"name": "resolveUrls", "start_line": 241, "end_line": 252}, {"name": "Error", "start_line": 42, "end_line": 47}, {"name": "main", "start_line": 56, "end_line": 177}, {"name": "Log", "start_line": 24, "end_line": 25}, {"name": "", "start_line": 215, "end_line": 220}, {"name": "completeUrls", "start_line": 254, "end_line": 270}, {"name": "Log", "start_line": 34, "end_line": 36}], "nloc": 221, "complexity": 60, "token_count": 1402}], "dmm_unit_size": 1.0, "dmm_unit_complexity": 1.0, "dmm_unit_interfacing": 0.8235294117647058},
    {"hash": "8df3c174869fb4b12a408223c2549605179ace7c", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-11 23:42:30+01:00", "author_timezone": -3600, "committer_date": "2018-11-11 23:42:30+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["fed797af16f08f079ac37ca4a59dc4105025d666"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 0, "insertions": 1, "lines": 1, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -39,6 +39,7 @@ getJS -h\n | -silent  | Output nothing           | getJS -silent |\n | -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n | -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n+| -nocolors   | Don't color the output   | getJS -nocolors |\n \n ## Examples  \n   \n", "diff_parsed": {"added": [[42, "| -nocolors   | Don't color the output   | getJS -nocolors |"]], "deleted": []}, "added_lines": 1, "deleted_lines": 0, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n| -nocolors   | Don't color the output   | getJS -nocolors |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues and/or pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues and/or pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "182ac41bb06787600269fa578e0407e7e29e6ffb", "msg": "Updated the arguments", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "003random", "email": "003random@protonmail.com"}, "author_date": "2018-11-15 00:32:33+01:00", "author_timezone": -3600, "committer_date": "2018-11-15 00:32:33+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["8df3c174869fb4b12a408223c2549605179ace7c"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 198, "insertions": 194, "lines": 392, "files": 1, "modified_files": [{"old_path": "main.go", "new_path": "main.go", "filename": "main.go", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -1,21 +1,21 @@\n package main\n \n import (\n-        \"bufio\"\n-        \"flag\"\n-        \"fmt\"\n-        \"net/http\"\n-        \"net/url\"\n-        \"os\"\n-        \"strings\"\n+\t\"bufio\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+\t\"os\"\n \t\"strconv\"\n+\t\"strings\"\n \n-        \"github.com/PuerkitoBio/goquery\"\n+\t\"github.com/PuerkitoBio/goquery\"\n \t\"github.com/logrusorgru/aurora\"\n )\n \n type logger interface {\n-        Log(msg string)\n+\tLog(msg string)\n \tError(msg string, err error)\n }\n \n@@ -27,8 +27,7 @@ func (s silent) Log(msg string) {\n func (s silent) Error(msg string, err error) {\n }\n \n-type verbose struct{\n-\t\n+type verbose struct {\n }\n \n func (v verbose) Log(msg string) {\n@@ -36,10 +35,10 @@ func (v verbose) Log(msg string) {\n }\n \n func Log(l logger, msg string) {\n-        l.Log(msg)\n+\tl.Log(msg)\n }\n \n-func (v verbose) Error(msg string, err error) {\t\n+func (v verbose) Error(msg string, err error) {\n \tfmt.Fprintln(os.Stderr, au.Red(msg))\n \tif err != nil {\n \t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n@@ -59,212 +58,209 @@ func main() {\n \tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n \tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n \tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n-\tplainArg := flag.Bool(\"plain\", false, \"Output only the results\")\n-\tsilentArg := flag.Bool(\"silent\", false, \"Dont output anything\")\n+\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n \tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n \tflag.Parse()\n \n \tau = aurora.NewAurora(!*noColorsArg)\n \n-        var urls []string\n-        var allSources []string\n-\n-        if *silentArg || *plainArg {\n-                output = silent{}\n-        } else {\n-                output = verbose{}\n-        }\n-\n-        stat, err := os.Stdin.Stat()\n-        if err != nil {\n-                output.Error(\"[!] Couldnt read Stdin\", err)\n-        }\n-\n-        if (stat.Mode() & os.ModeCharDevice) == 0 {\n-                scanner := bufio.NewScanner(os.Stdin)\n-                for scanner.Scan() {\n-                        urls = append(urls, scanner.Text())\n-                }\n-                if err := scanner.Err(); err != nil {\n-                        output.Error(\"[!] Couldnt read Stdin\", err)\n-                }\n-                if len(urls) > 0 {\n-                        output.Log(\"[+] Received urls from Stdin\")\n-                }\n-        }\n-\n-        if *inputFileArg != \"\" {\n-                lines, err := readLines(*inputFileArg)\n-                if err != nil {\n-                        output.Error(\"[!] Couldn't read from input file\", err)\n-                }\n-                output.Log(\"[+] Set url file to \" + *inputFileArg)\n-                urls = append(urls, lines...)\n-        }\n-\n-        if *urlArg != \"\" {\n-                output.Log(\"[+] Set url to \" + *urlArg)\n-                urls = append(urls, *urlArg)\n-        }\n-\n-        if len(urls) == 0 {\n-                output.Error(\"[!] No urls supplied\", nil)\n-                os.Exit(3)\n-        }\n-\n-        if *resolveArg && !*completeArg {\n-                output.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n-                os.Exit(3)\n-        }\n-\n-        for _, e := range urls {\n-                var sourcesBak []string\n-                var completedSuccessfully = true\n-                output.Log(\"[+] Getting sources from \" + e)\n-                sources, err := getScriptSrc(e)\n-                if err != nil {\n-                        output.Error(\"[!] Couldn't get sources from \" + e, err)\n-                }\n-\n-                if *completeArg {\n-                        output.Log(\"[+] Completing URLs\")\n-                        sourcesBak = sources\n-                        sources, err = completeUrls(sources, e)\n-                        if err != nil {\n-                                output.Error(\"[!] Couldn't complete URLs\", err)\n-                                sources = sourcesBak\n-                                completedSuccessfully = false\n-                        }\n-                }\n-\n-                if *resolveArg && *completeArg {\n-                        if completedSuccessfully {\n-                                output.Log(\"[+] Resolving files\")\n-                                sourcesBak = sources\n-                                sources, err = resolveUrls(sources)\n-                                if err != nil {\n-                                        output.Error(\"[!] Couldn't resolve URLs\", err)\n-                                        sources = sourcesBak\n-                                }\n-                        } else {\n-                                output.Error(\"[!] Couldn't resolve URLs\", nil)\n-                        }\n-                } else if *resolveArg {\n-                        output.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n-                }\n-\n-                if !*silentArg {\n-                        for _, i := range sources {\n-                                fmt.Println(i)\n-                        }\n-                }\n-\n-                if *outputFileArg != \"\" {\n-                        allSources = append(allSources, sources...)\n-                }\n-\n-        }\n-\n-        // Save to file\n-        if *outputFileArg != \"\" {\n-                output.Log(\"[+] Saving output to \" + *outputFileArg)\n-                err := saveToFile(allSources, *outputFileArg)\n-                if err != nil {\n-                        output.Error(\"[!] Couldn't save to output file \" + *outputFileArg, err)\n-                }\n-        }\n+\tvar urls []string\n+\tvar allSources []string\n+\n+\toutput = silent{}\n+\n+\tif *verboseArg {\n+\t\toutput = verbose{}\n+\t}\n+\n+\tstat, err := os.Stdin.Stat()\n+\tif err != nil {\n+\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n+\t}\n+\n+\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n+\t\tscanner := bufio.NewScanner(os.Stdin)\n+\t\tfor scanner.Scan() {\n+\t\t\turls = append(urls, scanner.Text())\n+\t\t}\n+\t\tif err := scanner.Err(); err != nil {\n+\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n+\t\t}\n+\t\tif len(urls) > 0 {\n+\t\t\toutput.Log(\"[+] Received urls from Stdin\")\n+\t\t}\n+\t}\n+\n+\tif *inputFileArg != \"\" {\n+\t\tlines, err := readLines(*inputFileArg)\n+\t\tif err != nil {\n+\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)\n+\t\t}\n+\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)\n+\t\turls = append(urls, lines...)\n+\t}\n+\n+\tif *urlArg != \"\" {\n+\t\toutput.Log(\"[+] Set url to \" + *urlArg)\n+\t\turls = append(urls, *urlArg)\n+\t}\n+\n+\tif len(urls) == 0 {\n+\t\toutput.Error(\"[!] No urls supplied\", nil)\n+\t\tos.Exit(3)\n+\t}\n+\n+\tif *resolveArg && !*completeArg {\n+\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n+\t\tos.Exit(3)\n+\t}\n+\n+\tfor _, e := range urls {\n+\t\tvar sourcesBak []string\n+\t\tvar completedSuccessfully = true\n+\t\toutput.Log(\"[+] Getting sources from \" + e)\n+\t\tsources, err := getScriptSrc(e)\n+\t\tif err != nil {\n+\t\t\toutput.Error(\"[!] Couldn't get sources from \"+e, err)\n+\t\t}\n+\n+\t\tif *completeArg {\n+\t\t\toutput.Log(\"[+] Completing URLs\")\n+\t\t\tsourcesBak = sources\n+\t\t\tsources, err = completeUrls(sources, e)\n+\t\t\tif err != nil {\n+\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)\n+\t\t\t\tsources = sourcesBak\n+\t\t\t\tcompletedSuccessfully = false\n+\t\t\t}\n+\t\t}\n+\n+\t\tif *resolveArg && *completeArg {\n+\t\t\tif completedSuccessfully {\n+\t\t\t\toutput.Log(\"[+] Resolving files\")\n+\t\t\t\tsourcesBak = sources\n+\t\t\t\tsources, err = resolveUrls(sources)\n+\t\t\t\tif err != nil {\n+\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)\n+\t\t\t\t\tsources = sourcesBak\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)\n+\t\t\t}\n+\t\t} else if *resolveArg {\n+\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n+\t\t}\n+\n+\t\tfor _, i := range sources {\n+\t\t\tfmt.Println(i)\n+\t\t}\n+\n+\t\tif *outputFileArg != \"\" {\n+\t\t\tallSources = append(allSources, sources...)\n+\t\t}\n+\n+\t}\n+\n+\t// Save to file\n+\tif *outputFileArg != \"\" {\n+\t\toutput.Log(\"[+] Saving output to \" + *outputFileArg)\n+\t\terr := saveToFile(allSources, *outputFileArg)\n+\t\tif err != nil {\n+\t\t\toutput.Error(\"[!] Couldn't save to output file \"+*outputFileArg, err)\n+\t\t}\n+\t}\n \n }\n \n // ToDO: Use channel instead of slide, and use io.Writer instead of file path\n func saveToFile(sources []string, path string) error {\n-        file, err := os.Create(path)\n-        if err != nil {\n-                return err\n-        }\n-        defer file.Close()\n-\n-        w := bufio.NewWriter(file)\n-        for _, line := range sources {\n-                fmt.Fprintln(w, line)\n-        }\n-        return w.Flush()\n+\tfile, err := os.Create(path)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tdefer file.Close()\n+\n+\tw := bufio.NewWriter(file)\n+\tfor _, line := range sources {\n+\t\tfmt.Fprintln(w, line)\n+\t}\n+\treturn w.Flush()\n }\n \n func getScriptSrc(url string) ([]string, error) {\n-        // Request the HTML page.\n-        res, err := http.Get(url)\n-        if err != nil {\n-                return nil, err\n-        }\n-        defer res.Body.Close()\n-        if res.StatusCode != 200 {\n-                output.Error(\"[!] \" + url + \" returned an \" + strconv.Itoa(res.StatusCode) + \" instead of an 200 OK\", nil)\n-                return nil, nil\n-        }\n-\n-        // Load the HTML document\n-        doc, err := goquery.NewDocumentFromReader(res.Body)\n-        if err != nil {\n-                return nil, err\n-        }\n-\n-        var sources []string\n-\n-        // Find the script tags, and get the src\n-        doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n-                src, _ := s.Attr(\"src\")\n-                if src != \"\" {\n-                        sources = append(sources, src)\n-                }\n-        })\n-\n-        return sources, nil\n+\t// Request the HTML page.\n+\tres, err := http.Get(url)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdefer res.Body.Close()\n+\tif res.StatusCode != 200 {\n+\t\toutput.Error(\"[!] \"+url+\" returned an \"+strconv.Itoa(res.StatusCode)+\" instead of an 200 OK\", nil)\n+\t\treturn nil, nil\n+\t}\n+\n+\t// Load the HTML document\n+\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tvar sources []string\n+\n+\t// Find the script tags, and get the src\n+\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n+\t\tsrc, _ := s.Attr(\"src\")\n+\t\tif src != \"\" {\n+\t\t\tsources = append(sources, src)\n+\t\t}\n+\t})\n+\n+\treturn sources, nil\n }\n \n // ToDo: Use io.Writer instead of a file path\n func readLines(path string) ([]string, error) {\n-        file, err := os.Open(path)\n-        if err != nil {\n-                return nil, err\n-        }\n-        defer file.Close()\n-\n-        var lines []string\n-        scanner := bufio.NewScanner(file)\n-        for scanner.Scan() {\n-                lines = append(lines, scanner.Text())\n-        }\n-        return lines, scanner.Err()\n+\tfile, err := os.Open(path)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdefer file.Close()\n+\n+\tvar lines []string\n+\tscanner := bufio.NewScanner(file)\n+\tfor scanner.Scan() {\n+\t\tlines = append(lines, scanner.Text())\n+\t}\n+\treturn lines, scanner.Err()\n }\n \n func resolveUrls(s []string) ([]string, error) {\n-        for i := len(s) - 1; i >= 0; i-- {\n-                resp, err := http.Get(s[i])\n-                if err != nil {\n-                        return nil, err\n-                }\n-                if resp.StatusCode != 200 && resp.StatusCode != 304 {\n-                        s = append(s[:i], s[i+1:]...)\n-                }\n-        }\n-        return s, nil\n+\tfor i := len(s) - 1; i >= 0; i-- {\n+\t\tresp, err := http.Get(s[i])\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n+\t\t\ts = append(s[:i], s[i+1:]...)\n+\t\t}\n+\t}\n+\treturn s, nil\n }\n \n func completeUrls(s []string, mainUrl string) ([]string, error) {\n-        u, err := url.Parse(mainUrl)\n-        if err != nil {\n-                return nil, err\n-        }\n-\n-        for i, _ := range s {\n-                if strings.HasPrefix(s[i], \"//\") {\n-                        s[i] = u.Scheme + \":\" + s[i]\n-                } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n-                        s[i] = u.Scheme + \"://\" + u.Host + s[i]\n-                } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n-                        s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n-                }\n-        }\n-        return s, nil\n+\tu, err := url.Parse(mainUrl)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tfor i := range s {\n+\t\tif strings.HasPrefix(s[i], \"//\") {\n+\t\t\ts[i] = u.Scheme + \":\" + s[i]\n+\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n+\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n+\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n+\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n+\t\t}\n+\t}\n+\treturn s, nil\n }\n", "diff_parsed": {"added": [[4, "\t\"bufio\""], [5, "\t\"flag\""], [6, "\t\"fmt\""], [7, "\t\"net/http\""], [8, "\t\"net/url\""], [9, "\t\"os\""], [11, "\t\"strings\""], [13, "\t\"github.com/PuerkitoBio/goquery\""], [18, "\tLog(msg string)"], [30, "type verbose struct {"], [38, "\tl.Log(msg)"], [41, "func (v verbose) Error(msg string, err error) {"], [61, "\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")"], [67, "\tvar urls []string"], [68, "\tvar allSources []string"], [69, ""], [70, "\toutput = silent{}"], [71, ""], [72, "\tif *verboseArg {"], [73, "\t\toutput = verbose{}"], [74, "\t}"], [75, ""], [76, "\tstat, err := os.Stdin.Stat()"], [77, "\tif err != nil {"], [78, "\t\toutput.Error(\"[!] Couldnt read Stdin\", err)"], [79, "\t}"], [80, ""], [81, "\tif (stat.Mode() & os.ModeCharDevice) == 0 {"], [82, "\t\tscanner := bufio.NewScanner(os.Stdin)"], [83, "\t\tfor scanner.Scan() {"], [84, "\t\t\turls = append(urls, scanner.Text())"], [85, "\t\t}"], [86, "\t\tif err := scanner.Err(); err != nil {"], [87, "\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)"], [88, "\t\t}"], [89, "\t\tif len(urls) > 0 {"], [90, "\t\t\toutput.Log(\"[+] Received urls from Stdin\")"], [91, "\t\t}"], [92, "\t}"], [93, ""], [94, "\tif *inputFileArg != \"\" {"], [95, "\t\tlines, err := readLines(*inputFileArg)"], [96, "\t\tif err != nil {"], [97, "\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)"], [98, "\t\t}"], [99, "\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)"], [100, "\t\turls = append(urls, lines...)"], [101, "\t}"], [102, ""], [103, "\tif *urlArg != \"\" {"], [104, "\t\toutput.Log(\"[+] Set url to \" + *urlArg)"], [105, "\t\turls = append(urls, *urlArg)"], [106, "\t}"], [107, ""], [108, "\tif len(urls) == 0 {"], [109, "\t\toutput.Error(\"[!] No urls supplied\", nil)"], [110, "\t\tos.Exit(3)"], [111, "\t}"], [112, ""], [113, "\tif *resolveArg && !*completeArg {"], [114, "\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)"], [115, "\t\tos.Exit(3)"], [116, "\t}"], [117, ""], [118, "\tfor _, e := range urls {"], [119, "\t\tvar sourcesBak []string"], [120, "\t\tvar completedSuccessfully = true"], [121, "\t\toutput.Log(\"[+] Getting sources from \" + e)"], [122, "\t\tsources, err := getScriptSrc(e)"], [123, "\t\tif err != nil {"], [124, "\t\t\toutput.Error(\"[!] Couldn't get sources from \"+e, err)"], [125, "\t\t}"], [126, ""], [127, "\t\tif *completeArg {"], [128, "\t\t\toutput.Log(\"[+] Completing URLs\")"], [129, "\t\t\tsourcesBak = sources"], [130, "\t\t\tsources, err = completeUrls(sources, e)"], [131, "\t\t\tif err != nil {"], [132, "\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)"], [133, "\t\t\t\tsources = sourcesBak"], [134, "\t\t\t\tcompletedSuccessfully = false"], [135, "\t\t\t}"], [136, "\t\t}"], [137, ""], [138, "\t\tif *resolveArg && *completeArg {"], [139, "\t\t\tif completedSuccessfully {"], [140, "\t\t\t\toutput.Log(\"[+] Resolving files\")"], [141, "\t\t\t\tsourcesBak = sources"], [142, "\t\t\t\tsources, err = resolveUrls(sources)"], [143, "\t\t\t\tif err != nil {"], [144, "\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)"], [145, "\t\t\t\t\tsources = sourcesBak"], [146, "\t\t\t\t}"], [147, "\t\t\t} else {"], [148, "\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)"], [149, "\t\t\t}"], [150, "\t\t} else if *resolveArg {"], [151, "\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)"], [152, "\t\t}"], [153, ""], [154, "\t\tfor _, i := range sources {"], [155, "\t\t\tfmt.Println(i)"], [156, "\t\t}"], [157, ""], [158, "\t\tif *outputFileArg != \"\" {"], [159, "\t\t\tallSources = append(allSources, sources...)"], [160, "\t\t}"], [161, ""], [162, "\t}"], [163, ""], [164, "\t// Save to file"], [165, "\tif *outputFileArg != \"\" {"], [166, "\t\toutput.Log(\"[+] Saving output to \" + *outputFileArg)"], [167, "\t\terr := saveToFile(allSources, *outputFileArg)"], [168, "\t\tif err != nil {"], [169, "\t\t\toutput.Error(\"[!] Couldn't save to output file \"+*outputFileArg, err)"], [170, "\t\t}"], [171, "\t}"], [177, "\tfile, err := os.Create(path)"], [178, "\tif err != nil {"], [179, "\t\treturn err"], [180, "\t}"], [181, "\tdefer file.Close()"], [182, ""], [183, "\tw := bufio.NewWriter(file)"], [184, "\tfor _, line := range sources {"], [185, "\t\tfmt.Fprintln(w, line)"], [186, "\t}"], [187, "\treturn w.Flush()"], [191, "\t// Request the HTML page."], [192, "\tres, err := http.Get(url)"], [193, "\tif err != nil {"], [194, "\t\treturn nil, err"], [195, "\t}"], [196, "\tdefer res.Body.Close()"], [197, "\tif res.StatusCode != 200 {"], [198, "\t\toutput.Error(\"[!] \"+url+\" returned an \"+strconv.Itoa(res.StatusCode)+\" instead of an 200 OK\", nil)"], [199, "\t\treturn nil, nil"], [200, "\t}"], [201, ""], [202, "\t// Load the HTML document"], [203, "\tdoc, err := goquery.NewDocumentFromReader(res.Body)"], [204, "\tif err != nil {"], [205, "\t\treturn nil, err"], [206, "\t}"], [207, ""], [208, "\tvar sources []string"], [209, ""], [210, "\t// Find the script tags, and get the src"], [211, "\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {"], [212, "\t\tsrc, _ := s.Attr(\"src\")"], [213, "\t\tif src != \"\" {"], [214, "\t\t\tsources = append(sources, src)"], [215, "\t\t}"], [216, "\t})"], [217, ""], [218, "\treturn sources, nil"], [223, "\tfile, err := os.Open(path)"], [224, "\tif err != nil {"], [225, "\t\treturn nil, err"], [226, "\t}"], [227, "\tdefer file.Close()"], [228, ""], [229, "\tvar lines []string"], [230, "\tscanner := bufio.NewScanner(file)"], [231, "\tfor scanner.Scan() {"], [232, "\t\tlines = append(lines, scanner.Text())"], [233, "\t}"], [234, "\treturn lines, scanner.Err()"], [238, "\tfor i := len(s) - 1; i >= 0; i-- {"], [239, "\t\tresp, err := http.Get(s[i])"], [240, "\t\tif err != nil {"], [241, "\t\t\treturn nil, err"], [242, "\t\t}"], [243, "\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {"], [244, "\t\t\ts = append(s[:i], s[i+1:]...)"], [245, "\t\t}"], [246, "\t}"], [247, "\treturn s, nil"], [251, "\tu, err := url.Parse(mainUrl)"], [252, "\tif err != nil {"], [253, "\t\treturn nil, err"], [254, "\t}"], [255, ""], [256, "\tfor i := range s {"], [257, "\t\tif strings.HasPrefix(s[i], \"//\") {"], [258, "\t\t\ts[i] = u.Scheme + \":\" + s[i]"], [259, "\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {"], [260, "\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]"], [261, "\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {"], [262, "\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]"], [263, "\t\t}"], [264, "\t}"], [265, "\treturn s, nil"]], "deleted": [[4, "        \"bufio\""], [5, "        \"flag\""], [6, "        \"fmt\""], [7, "        \"net/http\""], [8, "        \"net/url\""], [9, "        \"os\""], [10, "        \"strings\""], [13, "        \"github.com/PuerkitoBio/goquery\""], [18, "        Log(msg string)"], [30, "type verbose struct{"], [31, ""], [39, "        l.Log(msg)"], [42, "func (v verbose) Error(msg string, err error) {"], [62, "\tplainArg := flag.Bool(\"plain\", false, \"Output only the results\")"], [63, "\tsilentArg := flag.Bool(\"silent\", false, \"Dont output anything\")"], [69, "        var urls []string"], [70, "        var allSources []string"], [71, ""], [72, "        if *silentArg || *plainArg {"], [73, "                output = silent{}"], [74, "        } else {"], [75, "                output = verbose{}"], [76, "        }"], [77, ""], [78, "        stat, err := os.Stdin.Stat()"], [79, "        if err != nil {"], [80, "                output.Error(\"[!] Couldnt read Stdin\", err)"], [81, "        }"], [82, ""], [83, "        if (stat.Mode() & os.ModeCharDevice) == 0 {"], [84, "                scanner := bufio.NewScanner(os.Stdin)"], [85, "                for scanner.Scan() {"], [86, "                        urls = append(urls, scanner.Text())"], [87, "                }"], [88, "                if err := scanner.Err(); err != nil {"], [89, "                        output.Error(\"[!] Couldnt read Stdin\", err)"], [90, "                }"], [91, "                if len(urls) > 0 {"], [92, "                        output.Log(\"[+] Received urls from Stdin\")"], [93, "                }"], [94, "        }"], [95, ""], [96, "        if *inputFileArg != \"\" {"], [97, "                lines, err := readLines(*inputFileArg)"], [98, "                if err != nil {"], [99, "                        output.Error(\"[!] Couldn't read from input file\", err)"], [100, "                }"], [101, "                output.Log(\"[+] Set url file to \" + *inputFileArg)"], [102, "                urls = append(urls, lines...)"], [103, "        }"], [104, ""], [105, "        if *urlArg != \"\" {"], [106, "                output.Log(\"[+] Set url to \" + *urlArg)"], [107, "                urls = append(urls, *urlArg)"], [108, "        }"], [109, ""], [110, "        if len(urls) == 0 {"], [111, "                output.Error(\"[!] No urls supplied\", nil)"], [112, "                os.Exit(3)"], [113, "        }"], [114, ""], [115, "        if *resolveArg && !*completeArg {"], [116, "                output.Error(\"[!] Resolve can only be used in combination with -complete\", nil)"], [117, "                os.Exit(3)"], [118, "        }"], [119, ""], [120, "        for _, e := range urls {"], [121, "                var sourcesBak []string"], [122, "                var completedSuccessfully = true"], [123, "                output.Log(\"[+] Getting sources from \" + e)"], [124, "                sources, err := getScriptSrc(e)"], [125, "                if err != nil {"], [126, "                        output.Error(\"[!] Couldn't get sources from \" + e, err)"], [127, "                }"], [128, ""], [129, "                if *completeArg {"], [130, "                        output.Log(\"[+] Completing URLs\")"], [131, "                        sourcesBak = sources"], [132, "                        sources, err = completeUrls(sources, e)"], [133, "                        if err != nil {"], [134, "                                output.Error(\"[!] Couldn't complete URLs\", err)"], [135, "                                sources = sourcesBak"], [136, "                                completedSuccessfully = false"], [137, "                        }"], [138, "                }"], [139, ""], [140, "                if *resolveArg && *completeArg {"], [141, "                        if completedSuccessfully {"], [142, "                                output.Log(\"[+] Resolving files\")"], [143, "                                sourcesBak = sources"], [144, "                                sources, err = resolveUrls(sources)"], [145, "                                if err != nil {"], [146, "                                        output.Error(\"[!] Couldn't resolve URLs\", err)"], [147, "                                        sources = sourcesBak"], [148, "                                }"], [149, "                        } else {"], [150, "                                output.Error(\"[!] Couldn't resolve URLs\", nil)"], [151, "                        }"], [152, "                } else if *resolveArg {"], [153, "                        output.Error(\"[!] Resolve can only be used in combination with -complete\", nil)"], [154, "                }"], [155, ""], [156, "                if !*silentArg {"], [157, "                        for _, i := range sources {"], [158, "                                fmt.Println(i)"], [159, "                        }"], [160, "                }"], [161, ""], [162, "                if *outputFileArg != \"\" {"], [163, "                        allSources = append(allSources, sources...)"], [164, "                }"], [165, ""], [166, "        }"], [167, ""], [168, "        // Save to file"], [169, "        if *outputFileArg != \"\" {"], [170, "                output.Log(\"[+] Saving output to \" + *outputFileArg)"], [171, "                err := saveToFile(allSources, *outputFileArg)"], [172, "                if err != nil {"], [173, "                        output.Error(\"[!] Couldn't save to output file \" + *outputFileArg, err)"], [174, "                }"], [175, "        }"], [181, "        file, err := os.Create(path)"], [182, "        if err != nil {"], [183, "                return err"], [184, "        }"], [185, "        defer file.Close()"], [186, ""], [187, "        w := bufio.NewWriter(file)"], [188, "        for _, line := range sources {"], [189, "                fmt.Fprintln(w, line)"], [190, "        }"], [191, "        return w.Flush()"], [195, "        // Request the HTML page."], [196, "        res, err := http.Get(url)"], [197, "        if err != nil {"], [198, "                return nil, err"], [199, "        }"], [200, "        defer res.Body.Close()"], [201, "        if res.StatusCode != 200 {"], [202, "                output.Error(\"[!] \" + url + \" returned an \" + strconv.Itoa(res.StatusCode) + \" instead of an 200 OK\", nil)"], [203, "                return nil, nil"], [204, "        }"], [205, ""], [206, "        // Load the HTML document"], [207, "        doc, err := goquery.NewDocumentFromReader(res.Body)"], [208, "        if err != nil {"], [209, "                return nil, err"], [210, "        }"], [211, ""], [212, "        var sources []string"], [213, ""], [214, "        // Find the script tags, and get the src"], [215, "        doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {"], [216, "                src, _ := s.Attr(\"src\")"], [217, "                if src != \"\" {"], [218, "                        sources = append(sources, src)"], [219, "                }"], [220, "        })"], [221, ""], [222, "        return sources, nil"], [227, "        file, err := os.Open(path)"], [228, "        if err != nil {"], [229, "                return nil, err"], [230, "        }"], [231, "        defer file.Close()"], [232, ""], [233, "        var lines []string"], [234, "        scanner := bufio.NewScanner(file)"], [235, "        for scanner.Scan() {"], [236, "                lines = append(lines, scanner.Text())"], [237, "        }"], [238, "        return lines, scanner.Err()"], [242, "        for i := len(s) - 1; i >= 0; i-- {"], [243, "                resp, err := http.Get(s[i])"], [244, "                if err != nil {"], [245, "                        return nil, err"], [246, "                }"], [247, "                if resp.StatusCode != 200 && resp.StatusCode != 304 {"], [248, "                        s = append(s[:i], s[i+1:]...)"], [249, "                }"], [250, "        }"], [251, "        return s, nil"], [255, "        u, err := url.Parse(mainUrl)"], [256, "        if err != nil {"], [257, "                return nil, err"], [258, "        }"], [259, ""], [260, "        for i, _ := range s {"], [261, "                if strings.HasPrefix(s[i], \"//\") {"], [262, "                        s[i] = u.Scheme + \":\" + s[i]"], [263, "                } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {"], [264, "                        s[i] = u.Scheme + \"://\" + u.Host + s[i]"], [265, "                } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {"], [266, "                        s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]"], [267, "                }"], [268, "        }"], [269, "        return s, nil"]]}, "added_lines": 194, "deleted_lines": 198, "source_code": "package main\n\nimport (\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n\t\"github.com/logrusorgru/aurora\"\n)\n\ntype logger interface {\n\tLog(msg string)\n\tError(msg string, err error)\n}\n\ntype silent struct{}\n\nfunc (s silent) Log(msg string) {\n}\n\nfunc (s silent) Error(msg string, err error) {\n}\n\ntype verbose struct {\n}\n\nfunc (v verbose) Log(msg string) {\n\tfmt.Println(au.Cyan(msg))\n}\n\nfunc Log(l logger, msg string) {\n\tl.Log(msg)\n}\n\nfunc (v verbose) Error(msg string, err error) {\n\tfmt.Fprintln(os.Stderr, au.Red(msg))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n\t}\n}\n\nfunc Error(l logger, msg string, err error) {\n\tl.Error(msg, err)\n}\n\nvar output logger\nvar au aurora.Aurora\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n\tflag.Parse()\n\n\tau = aurora.NewAurora(!*noColorsArg)\n\n\tvar urls []string\n\tvar allSources []string\n\n\toutput = silent{}\n\n\tif *verboseArg {\n\t\toutput = verbose{}\n\t}\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\toutput.Log(\"[+] Received urls from Stdin\")\n\t\t}\n\t}\n\n\tif *inputFileArg != \"\" {\n\t\tlines, err := readLines(*inputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)\n\t\t}\n\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\toutput.Log(\"[+] Set url to \" + *urlArg)\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\toutput.Error(\"[!] No urls supplied\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tif *resolveArg && !*completeArg {\n\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tvar sourcesBak []string\n\t\tvar completedSuccessfully = true\n\t\toutput.Log(\"[+] Getting sources from \" + e)\n\t\tsources, err := getScriptSrc(e)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't get sources from \"+e, err)\n\t\t}\n\n\t\tif *completeArg {\n\t\t\toutput.Log(\"[+] Completing URLs\")\n\t\t\tsourcesBak = sources\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)\n\t\t\t\tsources = sourcesBak\n\t\t\t\tcompletedSuccessfully = false\n\t\t\t}\n\t\t}\n\n\t\tif *resolveArg && *completeArg {\n\t\t\tif completedSuccessfully {\n\t\t\t\toutput.Log(\"[+] Resolving files\")\n\t\t\t\tsourcesBak = sources\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)\n\t\t\t\t\tsources = sourcesBak\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)\n\t\t\t}\n\t\t} else if *resolveArg {\n\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\t}\n\n\t\tfor _, i := range sources {\n\t\t\tfmt.Println(i)\n\t\t}\n\n\t\tif *outputFileArg != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFileArg != \"\" {\n\t\toutput.Log(\"[+] Saving output to \" + *outputFileArg)\n\t\terr := saveToFile(allSources, *outputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't save to output file \"+*outputFileArg, err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string) ([]string, error) {\n\t// Request the HTML page.\n\tres, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\toutput.Error(\"[!] \"+url+\" returned an \"+strconv.Itoa(res.StatusCode)+\" instead of an 200 OK\", nil)\n\t\treturn nil, nil\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "source_code_before": "package main\n\nimport (\n        \"bufio\"\n        \"flag\"\n        \"fmt\"\n        \"net/http\"\n        \"net/url\"\n        \"os\"\n        \"strings\"\n\t\"strconv\"\n\n        \"github.com/PuerkitoBio/goquery\"\n\t\"github.com/logrusorgru/aurora\"\n)\n\ntype logger interface {\n        Log(msg string)\n\tError(msg string, err error)\n}\n\ntype silent struct{}\n\nfunc (s silent) Log(msg string) {\n}\n\nfunc (s silent) Error(msg string, err error) {\n}\n\ntype verbose struct{\n\t\n}\n\nfunc (v verbose) Log(msg string) {\n\tfmt.Println(au.Cyan(msg))\n}\n\nfunc Log(l logger, msg string) {\n        l.Log(msg)\n}\n\nfunc (v verbose) Error(msg string, err error) {\t\n\tfmt.Fprintln(os.Stderr, au.Red(msg))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n\t}\n}\n\nfunc Error(l logger, msg string, err error) {\n\tl.Error(msg, err)\n}\n\nvar output logger\nvar au aurora.Aurora\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tplainArg := flag.Bool(\"plain\", false, \"Output only the results\")\n\tsilentArg := flag.Bool(\"silent\", false, \"Dont output anything\")\n\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n\tflag.Parse()\n\n\tau = aurora.NewAurora(!*noColorsArg)\n\n        var urls []string\n        var allSources []string\n\n        if *silentArg || *plainArg {\n                output = silent{}\n        } else {\n                output = verbose{}\n        }\n\n        stat, err := os.Stdin.Stat()\n        if err != nil {\n                output.Error(\"[!] Couldnt read Stdin\", err)\n        }\n\n        if (stat.Mode() & os.ModeCharDevice) == 0 {\n                scanner := bufio.NewScanner(os.Stdin)\n                for scanner.Scan() {\n                        urls = append(urls, scanner.Text())\n                }\n                if err := scanner.Err(); err != nil {\n                        output.Error(\"[!] Couldnt read Stdin\", err)\n                }\n                if len(urls) > 0 {\n                        output.Log(\"[+] Received urls from Stdin\")\n                }\n        }\n\n        if *inputFileArg != \"\" {\n                lines, err := readLines(*inputFileArg)\n                if err != nil {\n                        output.Error(\"[!] Couldn't read from input file\", err)\n                }\n                output.Log(\"[+] Set url file to \" + *inputFileArg)\n                urls = append(urls, lines...)\n        }\n\n        if *urlArg != \"\" {\n                output.Log(\"[+] Set url to \" + *urlArg)\n                urls = append(urls, *urlArg)\n        }\n\n        if len(urls) == 0 {\n                output.Error(\"[!] No urls supplied\", nil)\n                os.Exit(3)\n        }\n\n        if *resolveArg && !*completeArg {\n                output.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n                os.Exit(3)\n        }\n\n        for _, e := range urls {\n                var sourcesBak []string\n                var completedSuccessfully = true\n                output.Log(\"[+] Getting sources from \" + e)\n                sources, err := getScriptSrc(e)\n                if err != nil {\n                        output.Error(\"[!] Couldn't get sources from \" + e, err)\n                }\n\n                if *completeArg {\n                        output.Log(\"[+] Completing URLs\")\n                        sourcesBak = sources\n                        sources, err = completeUrls(sources, e)\n                        if err != nil {\n                                output.Error(\"[!] Couldn't complete URLs\", err)\n                                sources = sourcesBak\n                                completedSuccessfully = false\n                        }\n                }\n\n                if *resolveArg && *completeArg {\n                        if completedSuccessfully {\n                                output.Log(\"[+] Resolving files\")\n                                sourcesBak = sources\n                                sources, err = resolveUrls(sources)\n                                if err != nil {\n                                        output.Error(\"[!] Couldn't resolve URLs\", err)\n                                        sources = sourcesBak\n                                }\n                        } else {\n                                output.Error(\"[!] Couldn't resolve URLs\", nil)\n                        }\n                } else if *resolveArg {\n                        output.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n                }\n\n                if !*silentArg {\n                        for _, i := range sources {\n                                fmt.Println(i)\n                        }\n                }\n\n                if *outputFileArg != \"\" {\n                        allSources = append(allSources, sources...)\n                }\n\n        }\n\n        // Save to file\n        if *outputFileArg != \"\" {\n                output.Log(\"[+] Saving output to \" + *outputFileArg)\n                err := saveToFile(allSources, *outputFileArg)\n                if err != nil {\n                        output.Error(\"[!] Couldn't save to output file \" + *outputFileArg, err)\n                }\n        }\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n        file, err := os.Create(path)\n        if err != nil {\n                return err\n        }\n        defer file.Close()\n\n        w := bufio.NewWriter(file)\n        for _, line := range sources {\n                fmt.Fprintln(w, line)\n        }\n        return w.Flush()\n}\n\nfunc getScriptSrc(url string) ([]string, error) {\n        // Request the HTML page.\n        res, err := http.Get(url)\n        if err != nil {\n                return nil, err\n        }\n        defer res.Body.Close()\n        if res.StatusCode != 200 {\n                output.Error(\"[!] \" + url + \" returned an \" + strconv.Itoa(res.StatusCode) + \" instead of an 200 OK\", nil)\n                return nil, nil\n        }\n\n        // Load the HTML document\n        doc, err := goquery.NewDocumentFromReader(res.Body)\n        if err != nil {\n                return nil, err\n        }\n\n        var sources []string\n\n        // Find the script tags, and get the src\n        doc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n                src, _ := s.Attr(\"src\")\n                if src != \"\" {\n                        sources = append(sources, src)\n                }\n        })\n\n        return sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n        file, err := os.Open(path)\n        if err != nil {\n                return nil, err\n        }\n        defer file.Close()\n\n        var lines []string\n        scanner := bufio.NewScanner(file)\n        for scanner.Scan() {\n                lines = append(lines, scanner.Text())\n        }\n        return lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n        for i := len(s) - 1; i >= 0; i-- {\n                resp, err := http.Get(s[i])\n                if err != nil {\n                        return nil, err\n                }\n                if resp.StatusCode != 200 && resp.StatusCode != 304 {\n                        s = append(s[:i], s[i+1:]...)\n                }\n        }\n        return s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n        u, err := url.Parse(mainUrl)\n        if err != nil {\n                return nil, err\n        }\n\n        for i, _ := range s {\n                if strings.HasPrefix(s[i], \"//\") {\n                        s[i] = u.Scheme + \":\" + s[i]\n                } else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n                        s[i] = u.Scheme + \"://\" + u.Host + s[i]\n                } else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n                        s[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n                }\n        }\n        return s, nil\n}\n", "methods": [{"name": "Log", "start_line": 24, "end_line": 25}, {"name": "Error", "start_line": 27, "end_line": 28}, {"name": "Log", "start_line": 33, "end_line": 35}, {"name": "Log", "start_line": 37, "end_line": 39}, {"name": "Error", "start_line": 41, "end_line": 46}, {"name": "Error", "start_line": 48, "end_line": 50}, {"name": "main", "start_line": 55, "end_line": 173}, {"name": "saveToFile", "start_line": 176, "end_line": 188}, {"name": "", "start_line": 211, "end_line": 216}, {"name": "getScriptSrc", "start_line": 190, "end_line": 219}, {"name": "readLines", "start_line": 222, "end_line": 235}, {"name": "resolveUrls", "start_line": 237, "end_line": 248}, {"name": "completeUrls", "start_line": 250, "end_line": 266}], "methods_before": [{"name": "Log", "start_line": 24, "end_line": 25}, {"name": "Error", "start_line": 27, "end_line": 28}, {"name": "Log", "start_line": 34, "end_line": 36}, {"name": "Log", "start_line": 38, "end_line": 40}, {"name": "Error", "start_line": 42, "end_line": 47}, {"name": "Error", "start_line": 49, "end_line": 51}, {"name": "main", "start_line": 56, "end_line": 177}, {"name": "saveToFile", "start_line": 180, "end_line": 192}, {"name": "", "start_line": 215, "end_line": 220}, {"name": "getScriptSrc", "start_line": 194, "end_line": 223}, {"name": "readLines", "start_line": 226, "end_line": 239}, {"name": "resolveUrls", "start_line": 241, "end_line": 252}, {"name": "completeUrls", "start_line": 254, "end_line": 270}], "changed_methods": [{"name": "resolveUrls", "start_line": 237, "end_line": 248}, {"name": "", "start_line": 211, "end_line": 216}, {"name": "saveToFile", "start_line": 176, "end_line": 188}, {"name": "Error", "start_line": 41, "end_line": 46}, {"name": "main", "start_line": 55, "end_line": 173}, {"name": "readLines", "start_line": 222, "end_line": 235}, {"name": "getScriptSrc", "start_line": 190, "end_line": 219}, {"name": "completeUrls", "start_line": 250, "end_line": 266}, {"name": "Log", "start_line": 37, "end_line": 39}], "nloc": 217, "complexity": 58, "token_count": 1376}], "dmm_unit_size": 1.0, "dmm_unit_complexity": 1.0, "dmm_unit_interfacing": 0.0},
    {"hash": "366a9003b7c038fa5d794207e0dad86dd3524461", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-15 00:35:26+01:00", "author_timezone": -3600, "committer_date": "2018-11-15 00:35:26+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["182ac41bb06787600269fa578e0407e7e29e6ffb"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 6, "insertions": 5, "lines": 11, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -35,8 +35,7 @@ getJS -h\n | -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n | -input   | Input file with urls            | getJS -input=domains.txt |\n | -output   | The file where to save the output to        | getJS -output=output.txt |\n-| -plain  | Only output the results | getJS -plain |\n-| -silent  | Output nothing           | getJS -silent |\n+| -verbose  | Display info of what is going on           | getJS -verbose |\n | -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n | -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n | -nocolors   | Don't color the output   | getJS -nocolors |\n@@ -46,20 +45,20 @@ getJS -h\n  ![screenshot](https://poc-server.com/getJS/screenshot.png)\n \n     \n-getJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n+getJS supports stdin data. To pipe urls to getJS, use the following:  \n \n ```bash\n-$ cat domains.txt | getJS -plain\n+$ cat domains.txt | getJS\n ```  \n   \n To save the js files, you can use:  \n ```bash\n-$ getJS -url=https://poc-server.com -plain | xargs wget\n+$ getJS -url=https://poc-server.com | xargs wget\n ```\n   \n If you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n ```bash\n-$ getJS -url=https://poc-server.com -plain | tojson\n+$ getJS -url=https://poc-server.com | tojson\n ```  \n   \n To feed urls from a file use:  \n", "diff_parsed": {"added": [[38, "| -verbose  | Display info of what is going on           | getJS -verbose |"], [48, "getJS supports stdin data. To pipe urls to getJS, use the following:"], [51, "$ cat domains.txt | getJS"], [56, "$ getJS -url=https://poc-server.com | xargs wget"], [61, "$ getJS -url=https://poc-server.com | tojson"]], "deleted": [[38, "| -plain  | Only output the results | getJS -plain |"], [39, "| -silent  | Output nothing           | getJS -silent |"], [49, "getJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional)."], [52, "$ cat domains.txt | getJS -plain"], [57, "$ getJS -url=https://poc-server.com -plain | xargs wget"], [62, "$ getJS -url=https://poc-server.com -plain | tojson"]]}, "added_lines": 5, "deleted_lines": 6, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -verbose  | Display info of what is going on           | getJS -verbose |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n| -nocolors   | Don't color the output   | getJS -nocolors |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following:  \n\n```bash\n$ cat domains.txt | getJS\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues and/or pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -plain  | Only output the results | getJS -plain |\n| -silent  | Output nothing           | getJS -silent |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n| -nocolors   | Don't color the output   | getJS -nocolors |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following (-plain is optional).  \n\n```bash\n$ cat domains.txt | getJS -plain\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com -plain | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com -plain | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues and/or pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "fbeb172bbffc5b1ed43705c2d56ca3396da27f11", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-11-15 00:41:35+01:00", "author_timezone": -3600, "committer_date": "2018-11-15 00:41:35+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["366a9003b7c038fa5d794207e0dad86dd3524461"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -42,7 +42,7 @@ getJS -h\n \n ## Examples  \n   \n- ![screenshot](https://poc-server.com/getJS/screenshot.png)\n+ ![screenshot](https://poc-server.com/getJS/screenshot_.png)\n \n     \n getJS supports stdin data. To pipe urls to getJS, use the following:  \n", "diff_parsed": {"added": [[45, " ![screenshot](https://poc-server.com/getJS/screenshot_.png)"]], "deleted": [[45, " ![screenshot](https://poc-server.com/getJS/screenshot.png)"]]}, "added_lines": 1, "deleted_lines": 1, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -verbose  | Display info of what is going on           | getJS -verbose |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n| -nocolors   | Don't color the output   | getJS -nocolors |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot_.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following:  \n\n```bash\n$ cat domains.txt | getJS\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues and/or pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -verbose  | Display info of what is going on           | getJS -verbose |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n| -nocolors   | Don't color the output   | getJS -nocolors |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following:  \n\n```bash\n$ cat domains.txt | getJS\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues and/or pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "7d36b0617d9cd6f1dbd0f0240d8f94231716f225", "msg": "Adds scraping of data-src attributes \n\n`data-src` attributes within the `<script>` tag can reference a `.js` file", "author": {"name": "Abss", "email": "33752861+Abss0x7tbh@users.noreply.github.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2020-04-08 21:52:23+05:30", "author_timezone": -19800, "committer_date": "2020-04-08 21:52:23+05:30", "committer_timezone": -19800, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["fbeb172bbffc5b1ed43705c2d56ca3396da27f11"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 0, "insertions": 4, "lines": 4, "files": 1, "modified_files": [{"old_path": "main.go", "new_path": "main.go", "filename": "main.go", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -210,9 +210,13 @@ func getScriptSrc(url string) ([]string, error) {\n \t// Find the script tags, and get the src\n \tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n \t\tsrc, _ := s.Attr(\"src\")\n+\t\tdsrc, _ := s.Attr(\"data-src\")\n \t\tif src != \"\" {\n \t\t\tsources = append(sources, src)\n \t\t}\n+\t\tif dsrc != \"\" {\n+\t\t\tsources = append(sources, dsrc)\n+\t\t}\n \t})\n \n \treturn sources, nil\n", "diff_parsed": {"added": [[213, "\t\tdsrc, _ := s.Attr(\"data-src\")"], [217, "\t\tif dsrc != \"\" {"], [218, "\t\t\tsources = append(sources, dsrc)"], [219, "\t\t}"]], "deleted": []}, "added_lines": 4, "deleted_lines": 0, "source_code": "package main\n\nimport (\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n\t\"github.com/logrusorgru/aurora\"\n)\n\ntype logger interface {\n\tLog(msg string)\n\tError(msg string, err error)\n}\n\ntype silent struct{}\n\nfunc (s silent) Log(msg string) {\n}\n\nfunc (s silent) Error(msg string, err error) {\n}\n\ntype verbose struct {\n}\n\nfunc (v verbose) Log(msg string) {\n\tfmt.Println(au.Cyan(msg))\n}\n\nfunc Log(l logger, msg string) {\n\tl.Log(msg)\n}\n\nfunc (v verbose) Error(msg string, err error) {\n\tfmt.Fprintln(os.Stderr, au.Red(msg))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n\t}\n}\n\nfunc Error(l logger, msg string, err error) {\n\tl.Error(msg, err)\n}\n\nvar output logger\nvar au aurora.Aurora\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n\tflag.Parse()\n\n\tau = aurora.NewAurora(!*noColorsArg)\n\n\tvar urls []string\n\tvar allSources []string\n\n\toutput = silent{}\n\n\tif *verboseArg {\n\t\toutput = verbose{}\n\t}\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\toutput.Log(\"[+] Received urls from Stdin\")\n\t\t}\n\t}\n\n\tif *inputFileArg != \"\" {\n\t\tlines, err := readLines(*inputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)\n\t\t}\n\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\toutput.Log(\"[+] Set url to \" + *urlArg)\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\toutput.Error(\"[!] No urls supplied\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tif *resolveArg && !*completeArg {\n\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tvar sourcesBak []string\n\t\tvar completedSuccessfully = true\n\t\toutput.Log(\"[+] Getting sources from \" + e)\n\t\tsources, err := getScriptSrc(e)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't get sources from \"+e, err)\n\t\t}\n\n\t\tif *completeArg {\n\t\t\toutput.Log(\"[+] Completing URLs\")\n\t\t\tsourcesBak = sources\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)\n\t\t\t\tsources = sourcesBak\n\t\t\t\tcompletedSuccessfully = false\n\t\t\t}\n\t\t}\n\n\t\tif *resolveArg && *completeArg {\n\t\t\tif completedSuccessfully {\n\t\t\t\toutput.Log(\"[+] Resolving files\")\n\t\t\t\tsourcesBak = sources\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)\n\t\t\t\t\tsources = sourcesBak\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)\n\t\t\t}\n\t\t} else if *resolveArg {\n\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\t}\n\n\t\tfor _, i := range sources {\n\t\t\tfmt.Println(i)\n\t\t}\n\n\t\tif *outputFileArg != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFileArg != \"\" {\n\t\toutput.Log(\"[+] Saving output to \" + *outputFileArg)\n\t\terr := saveToFile(allSources, *outputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't save to output file \"+*outputFileArg, err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string) ([]string, error) {\n\t// Request the HTML page.\n\tres, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\toutput.Error(\"[!] \"+url+\" returned an \"+strconv.Itoa(res.StatusCode)+\" instead of an 200 OK\", nil)\n\t\treturn nil, nil\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tdsrc, _ := s.Attr(\"data-src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t\tif dsrc != \"\" {\n\t\t\tsources = append(sources, dsrc)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "source_code_before": "package main\n\nimport (\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n\t\"github.com/logrusorgru/aurora\"\n)\n\ntype logger interface {\n\tLog(msg string)\n\tError(msg string, err error)\n}\n\ntype silent struct{}\n\nfunc (s silent) Log(msg string) {\n}\n\nfunc (s silent) Error(msg string, err error) {\n}\n\ntype verbose struct {\n}\n\nfunc (v verbose) Log(msg string) {\n\tfmt.Println(au.Cyan(msg))\n}\n\nfunc Log(l logger, msg string) {\n\tl.Log(msg)\n}\n\nfunc (v verbose) Error(msg string, err error) {\n\tfmt.Fprintln(os.Stderr, au.Red(msg))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n\t}\n}\n\nfunc Error(l logger, msg string, err error) {\n\tl.Error(msg, err)\n}\n\nvar output logger\nvar au aurora.Aurora\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n\tflag.Parse()\n\n\tau = aurora.NewAurora(!*noColorsArg)\n\n\tvar urls []string\n\tvar allSources []string\n\n\toutput = silent{}\n\n\tif *verboseArg {\n\t\toutput = verbose{}\n\t}\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\toutput.Log(\"[+] Received urls from Stdin\")\n\t\t}\n\t}\n\n\tif *inputFileArg != \"\" {\n\t\tlines, err := readLines(*inputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)\n\t\t}\n\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\toutput.Log(\"[+] Set url to \" + *urlArg)\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\toutput.Error(\"[!] No urls supplied\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tif *resolveArg && !*completeArg {\n\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tvar sourcesBak []string\n\t\tvar completedSuccessfully = true\n\t\toutput.Log(\"[+] Getting sources from \" + e)\n\t\tsources, err := getScriptSrc(e)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't get sources from \"+e, err)\n\t\t}\n\n\t\tif *completeArg {\n\t\t\toutput.Log(\"[+] Completing URLs\")\n\t\t\tsourcesBak = sources\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)\n\t\t\t\tsources = sourcesBak\n\t\t\t\tcompletedSuccessfully = false\n\t\t\t}\n\t\t}\n\n\t\tif *resolveArg && *completeArg {\n\t\t\tif completedSuccessfully {\n\t\t\t\toutput.Log(\"[+] Resolving files\")\n\t\t\t\tsourcesBak = sources\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)\n\t\t\t\t\tsources = sourcesBak\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)\n\t\t\t}\n\t\t} else if *resolveArg {\n\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\t}\n\n\t\tfor _, i := range sources {\n\t\t\tfmt.Println(i)\n\t\t}\n\n\t\tif *outputFileArg != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFileArg != \"\" {\n\t\toutput.Log(\"[+] Saving output to \" + *outputFileArg)\n\t\terr := saveToFile(allSources, *outputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't save to output file \"+*outputFileArg, err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string) ([]string, error) {\n\t// Request the HTML page.\n\tres, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\toutput.Error(\"[!] \"+url+\" returned an \"+strconv.Itoa(res.StatusCode)+\" instead of an 200 OK\", nil)\n\t\treturn nil, nil\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "methods": [{"name": "Log", "start_line": 24, "end_line": 25}, {"name": "Error", "start_line": 27, "end_line": 28}, {"name": "Log", "start_line": 33, "end_line": 35}, {"name": "Log", "start_line": 37, "end_line": 39}, {"name": "Error", "start_line": 41, "end_line": 46}, {"name": "Error", "start_line": 48, "end_line": 50}, {"name": "main", "start_line": 55, "end_line": 173}, {"name": "saveToFile", "start_line": 176, "end_line": 188}, {"name": "", "start_line": 211, "end_line": 220}, {"name": "getScriptSrc", "start_line": 190, "end_line": 223}, {"name": "readLines", "start_line": 226, "end_line": 239}, {"name": "resolveUrls", "start_line": 241, "end_line": 252}, {"name": "completeUrls", "start_line": 254, "end_line": 270}], "methods_before": [{"name": "Log", "start_line": 24, "end_line": 25}, {"name": "Error", "start_line": 27, "end_line": 28}, {"name": "Log", "start_line": 33, "end_line": 35}, {"name": "Log", "start_line": 37, "end_line": 39}, {"name": "Error", "start_line": 41, "end_line": 46}, {"name": "Error", "start_line": 48, "end_line": 50}, {"name": "main", "start_line": 55, "end_line": 173}, {"name": "saveToFile", "start_line": 176, "end_line": 188}, {"name": "", "start_line": 211, "end_line": 216}, {"name": "getScriptSrc", "start_line": 190, "end_line": 219}, {"name": "readLines", "start_line": 222, "end_line": 235}, {"name": "resolveUrls", "start_line": 237, "end_line": 248}, {"name": "completeUrls", "start_line": 250, "end_line": 266}], "changed_methods": [{"name": "", "start_line": 211, "end_line": 220}, {"name": "getScriptSrc", "start_line": 190, "end_line": 223}], "nloc": 221, "complexity": 59, "token_count": 1400}], "dmm_unit_size": 1.0, "dmm_unit_complexity": 1.0, "dmm_unit_interfacing": 1.0},
    {"hash": "9a1629c64dbba722303a81621cda6b5a2cbc9e5c", "msg": "Merge pull request #4 from Abss0x7tbh/master\n\nAdds scraping of data-src attributes", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2020-04-25 14:38:40+02:00", "author_timezone": -7200, "committer_date": "2020-04-25 14:38:40+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": true, "parents": ["fbeb172bbffc5b1ed43705c2d56ca3396da27f11", "7d36b0617d9cd6f1dbd0f0240d8f94231716f225"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 0, "insertions": 4, "lines": 4, "files": 1, "modified_files": [], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "24abf5aa4421e2ef619cb600ef089df35c1547ae", "msg": "added string formatting", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "003random", "email": "003random@protonmail.com"}, "author_date": "2020-10-05 13:29:19+00:00", "author_timezone": 0, "committer_date": "2020-10-05 13:29:19+00:00", "committer_timezone": 0, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["fbeb172bbffc5b1ed43705c2d56ca3396da27f11"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 6, "insertions": 5, "lines": 11, "files": 1, "modified_files": [{"old_path": "main.go", "new_path": "main.go", "filename": "main.go", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -7,7 +7,6 @@ import (\n \t\"net/http\"\n \t\"net/url\"\n \t\"os\"\n-\t\"strconv\"\n \t\"strings\"\n \n \t\"github.com/PuerkitoBio/goquery\"\n@@ -101,7 +100,7 @@ func main() {\n \t}\n \n \tif *urlArg != \"\" {\n-\t\toutput.Log(\"[+] Set url to \" + *urlArg)\n+\t\toutput.Log(fmt.Sprintf(\"[+] Set url to %s\", *urlArg))\n \t\turls = append(urls, *urlArg)\n \t}\n \n@@ -121,7 +120,7 @@ func main() {\n \t\toutput.Log(\"[+] Getting sources from \" + e)\n \t\tsources, err := getScriptSrc(e)\n \t\tif err != nil {\n-\t\t\toutput.Error(\"[!] Couldn't get sources from \"+e, err)\n+\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't get sources from %s\", e), err)\n \t\t}\n \n \t\tif *completeArg {\n@@ -163,10 +162,10 @@ func main() {\n \n \t// Save to file\n \tif *outputFileArg != \"\" {\n-\t\toutput.Log(\"[+] Saving output to \" + *outputFileArg)\n+\t\toutput.Log(fmt.Sprintf(\"[+] Saving output to %s\", *outputFileArg))\n \t\terr := saveToFile(allSources, *outputFileArg)\n \t\tif err != nil {\n-\t\t\toutput.Error(\"[!] Couldn't save to output file \"+*outputFileArg, err)\n+\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't save to output file %s\", *outputFileArg), err)\n \t\t}\n \t}\n \n@@ -195,7 +194,7 @@ func getScriptSrc(url string) ([]string, error) {\n \t}\n \tdefer res.Body.Close()\n \tif res.StatusCode != 200 {\n-\t\toutput.Error(\"[!] \"+url+\" returned an \"+strconv.Itoa(res.StatusCode)+\" instead of an 200 OK\", nil)\n+\t\toutput.Error(fmt.Sprintf(\"[!] %s returned an %d instead of %d\", url, res.StatusCode, http.StatusOK), nil)\n \t\treturn nil, nil\n \t}\n \n", "diff_parsed": {"added": [[103, "\t\toutput.Log(fmt.Sprintf(\"[+] Set url to %s\", *urlArg))"], [123, "\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't get sources from %s\", e), err)"], [165, "\t\toutput.Log(fmt.Sprintf(\"[+] Saving output to %s\", *outputFileArg))"], [168, "\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't save to output file %s\", *outputFileArg), err)"], [197, "\t\toutput.Error(fmt.Sprintf(\"[!] %s returned an %d instead of %d\", url, res.StatusCode, http.StatusOK), nil)"]], "deleted": [[10, "\t\"strconv\""], [104, "\t\toutput.Log(\"[+] Set url to \" + *urlArg)"], [124, "\t\t\toutput.Error(\"[!] Couldn't get sources from \"+e, err)"], [166, "\t\toutput.Log(\"[+] Saving output to \" + *outputFileArg)"], [169, "\t\t\toutput.Error(\"[!] Couldn't save to output file \"+*outputFileArg, err)"], [198, "\t\toutput.Error(\"[!] \"+url+\" returned an \"+strconv.Itoa(res.StatusCode)+\" instead of an 200 OK\", nil)"]]}, "added_lines": 5, "deleted_lines": 6, "source_code": "package main\n\nimport (\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n\t\"github.com/logrusorgru/aurora\"\n)\n\ntype logger interface {\n\tLog(msg string)\n\tError(msg string, err error)\n}\n\ntype silent struct{}\n\nfunc (s silent) Log(msg string) {\n}\n\nfunc (s silent) Error(msg string, err error) {\n}\n\ntype verbose struct {\n}\n\nfunc (v verbose) Log(msg string) {\n\tfmt.Println(au.Cyan(msg))\n}\n\nfunc Log(l logger, msg string) {\n\tl.Log(msg)\n}\n\nfunc (v verbose) Error(msg string, err error) {\n\tfmt.Fprintln(os.Stderr, au.Red(msg))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n\t}\n}\n\nfunc Error(l logger, msg string, err error) {\n\tl.Error(msg, err)\n}\n\nvar output logger\nvar au aurora.Aurora\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n\tflag.Parse()\n\n\tau = aurora.NewAurora(!*noColorsArg)\n\n\tvar urls []string\n\tvar allSources []string\n\n\toutput = silent{}\n\n\tif *verboseArg {\n\t\toutput = verbose{}\n\t}\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\toutput.Log(\"[+] Received urls from Stdin\")\n\t\t}\n\t}\n\n\tif *inputFileArg != \"\" {\n\t\tlines, err := readLines(*inputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)\n\t\t}\n\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\toutput.Log(fmt.Sprintf(\"[+] Set url to %s\", *urlArg))\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\toutput.Error(\"[!] No urls supplied\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tif *resolveArg && !*completeArg {\n\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tvar sourcesBak []string\n\t\tvar completedSuccessfully = true\n\t\toutput.Log(\"[+] Getting sources from \" + e)\n\t\tsources, err := getScriptSrc(e)\n\t\tif err != nil {\n\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't get sources from %s\", e), err)\n\t\t}\n\n\t\tif *completeArg {\n\t\t\toutput.Log(\"[+] Completing URLs\")\n\t\t\tsourcesBak = sources\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)\n\t\t\t\tsources = sourcesBak\n\t\t\t\tcompletedSuccessfully = false\n\t\t\t}\n\t\t}\n\n\t\tif *resolveArg && *completeArg {\n\t\t\tif completedSuccessfully {\n\t\t\t\toutput.Log(\"[+] Resolving files\")\n\t\t\t\tsourcesBak = sources\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)\n\t\t\t\t\tsources = sourcesBak\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)\n\t\t\t}\n\t\t} else if *resolveArg {\n\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\t}\n\n\t\tfor _, i := range sources {\n\t\t\tfmt.Println(i)\n\t\t}\n\n\t\tif *outputFileArg != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFileArg != \"\" {\n\t\toutput.Log(fmt.Sprintf(\"[+] Saving output to %s\", *outputFileArg))\n\t\terr := saveToFile(allSources, *outputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't save to output file %s\", *outputFileArg), err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string) ([]string, error) {\n\t// Request the HTML page.\n\tres, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\toutput.Error(fmt.Sprintf(\"[!] %s returned an %d instead of %d\", url, res.StatusCode, http.StatusOK), nil)\n\t\treturn nil, nil\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "source_code_before": "package main\n\nimport (\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n\t\"github.com/logrusorgru/aurora\"\n)\n\ntype logger interface {\n\tLog(msg string)\n\tError(msg string, err error)\n}\n\ntype silent struct{}\n\nfunc (s silent) Log(msg string) {\n}\n\nfunc (s silent) Error(msg string, err error) {\n}\n\ntype verbose struct {\n}\n\nfunc (v verbose) Log(msg string) {\n\tfmt.Println(au.Cyan(msg))\n}\n\nfunc Log(l logger, msg string) {\n\tl.Log(msg)\n}\n\nfunc (v verbose) Error(msg string, err error) {\n\tfmt.Fprintln(os.Stderr, au.Red(msg))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n\t}\n}\n\nfunc Error(l logger, msg string, err error) {\n\tl.Error(msg, err)\n}\n\nvar output logger\nvar au aurora.Aurora\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n\tflag.Parse()\n\n\tau = aurora.NewAurora(!*noColorsArg)\n\n\tvar urls []string\n\tvar allSources []string\n\n\toutput = silent{}\n\n\tif *verboseArg {\n\t\toutput = verbose{}\n\t}\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\toutput.Log(\"[+] Received urls from Stdin\")\n\t\t}\n\t}\n\n\tif *inputFileArg != \"\" {\n\t\tlines, err := readLines(*inputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)\n\t\t}\n\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\toutput.Log(\"[+] Set url to \" + *urlArg)\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\toutput.Error(\"[!] No urls supplied\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tif *resolveArg && !*completeArg {\n\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tvar sourcesBak []string\n\t\tvar completedSuccessfully = true\n\t\toutput.Log(\"[+] Getting sources from \" + e)\n\t\tsources, err := getScriptSrc(e)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't get sources from \"+e, err)\n\t\t}\n\n\t\tif *completeArg {\n\t\t\toutput.Log(\"[+] Completing URLs\")\n\t\t\tsourcesBak = sources\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)\n\t\t\t\tsources = sourcesBak\n\t\t\t\tcompletedSuccessfully = false\n\t\t\t}\n\t\t}\n\n\t\tif *resolveArg && *completeArg {\n\t\t\tif completedSuccessfully {\n\t\t\t\toutput.Log(\"[+] Resolving files\")\n\t\t\t\tsourcesBak = sources\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)\n\t\t\t\t\tsources = sourcesBak\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)\n\t\t\t}\n\t\t} else if *resolveArg {\n\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\t}\n\n\t\tfor _, i := range sources {\n\t\t\tfmt.Println(i)\n\t\t}\n\n\t\tif *outputFileArg != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFileArg != \"\" {\n\t\toutput.Log(\"[+] Saving output to \" + *outputFileArg)\n\t\terr := saveToFile(allSources, *outputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't save to output file \"+*outputFileArg, err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string) ([]string, error) {\n\t// Request the HTML page.\n\tres, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\toutput.Error(\"[!] \"+url+\" returned an \"+strconv.Itoa(res.StatusCode)+\" instead of an 200 OK\", nil)\n\t\treturn nil, nil\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "methods": [{"name": "Log", "start_line": 23, "end_line": 24}, {"name": "Error", "start_line": 26, "end_line": 27}, {"name": "Log", "start_line": 32, "end_line": 34}, {"name": "Log", "start_line": 36, "end_line": 38}, {"name": "Error", "start_line": 40, "end_line": 45}, {"name": "Error", "start_line": 47, "end_line": 49}, {"name": "main", "start_line": 54, "end_line": 172}, {"name": "saveToFile", "start_line": 175, "end_line": 187}, {"name": "", "start_line": 210, "end_line": 215}, {"name": "getScriptSrc", "start_line": 189, "end_line": 218}, {"name": "readLines", "start_line": 221, "end_line": 234}, {"name": "resolveUrls", "start_line": 236, "end_line": 247}, {"name": "completeUrls", "start_line": 249, "end_line": 265}], "methods_before": [{"name": "Log", "start_line": 24, "end_line": 25}, {"name": "Error", "start_line": 27, "end_line": 28}, {"name": "Log", "start_line": 33, "end_line": 35}, {"name": "Log", "start_line": 37, "end_line": 39}, {"name": "Error", "start_line": 41, "end_line": 46}, {"name": "Error", "start_line": 48, "end_line": 50}, {"name": "main", "start_line": 55, "end_line": 173}, {"name": "saveToFile", "start_line": 176, "end_line": 188}, {"name": "", "start_line": 211, "end_line": 216}, {"name": "getScriptSrc", "start_line": 190, "end_line": 219}, {"name": "readLines", "start_line": 222, "end_line": 235}, {"name": "resolveUrls", "start_line": 237, "end_line": 248}, {"name": "completeUrls", "start_line": 250, "end_line": 266}], "changed_methods": [{"name": "getScriptSrc", "start_line": 189, "end_line": 218}, {"name": "main", "start_line": 54, "end_line": 172}], "nloc": 216, "complexity": 58, "token_count": 1395}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "ee9fc91581b4ba54c9ac2813d733cc897445179d", "msg": "Merge pull request #9 from 003random/formatting\n\nadded string formatting", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2020-10-05 15:32:19+02:00", "author_timezone": -7200, "committer_date": "2020-10-05 15:32:19+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": true, "parents": ["9a1629c64dbba722303a81621cda6b5a2cbc9e5c", "24abf5aa4421e2ef619cb600ef089df35c1547ae"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 6, "insertions": 5, "lines": 11, "files": 1, "modified_files": [], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "2cd95a34d0891506270ba7db47b3df49fa08d760", "msg": "add optional flag for request headers. Thanks bp0lr #7", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "003random", "email": "003random@protonmail.com"}, "author_date": "2020-10-05 13:53:44+00:00", "author_timezone": 0, "committer_date": "2020-10-05 13:53:44+00:00", "committer_timezone": 0, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["fbeb172bbffc5b1ed43705c2d56ca3396da27f11"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 5, "insertions": 20, "lines": 25, "files": 1, "modified_files": [{"old_path": "main.go", "new_path": "main.go", "filename": "main.go", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -2,7 +2,6 @@ package main\n \n import (\n \t\"bufio\"\n-\t\"flag\"\n \t\"fmt\"\n \t\"net/http\"\n \t\"net/url\"\n@@ -12,6 +11,7 @@ import (\n \n \t\"github.com/PuerkitoBio/goquery\"\n \t\"github.com/logrusorgru/aurora\"\n+\tflag \"github.com/spf13/pflag\"\n )\n \n type logger interface {\n@@ -60,6 +60,7 @@ func main() {\n \tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n \tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n \tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n+\tHeaderArg := flag.StringArrayP(\"header\", \"H\", nil, \"Any HTTP headers(-H \\\"Authorization:Bearer token\\\")\")\n \tflag.Parse()\n \n \tau = aurora.NewAurora(!*noColorsArg)\n@@ -119,7 +120,7 @@ func main() {\n \t\tvar sourcesBak []string\n \t\tvar completedSuccessfully = true\n \t\toutput.Log(\"[+] Getting sources from \" + e)\n-\t\tsources, err := getScriptSrc(e)\n+\t\tsources, err := getScriptSrc(e, *HeaderArg)\n \t\tif err != nil {\n \t\t\toutput.Error(\"[!] Couldn't get sources from \"+e, err)\n \t\t}\n@@ -187,11 +188,25 @@ func saveToFile(sources []string, path string) error {\n \treturn w.Flush()\n }\n \n-func getScriptSrc(url string) ([]string, error) {\n+func getScriptSrc(url string, headers []string) ([]string, error) {\n \t// Request the HTML page.\n-\tres, err := http.Get(url)\n+\treq, err := http.NewRequest(\"GET\", url, nil)\n \tif err != nil {\n-\t\treturn nil, err\n+\t\treturn []string{}, err\n+\t}\n+\n+\tfor _, d := range headers {\n+\t\tvalues := strings.Split(d, \":\")\n+\t\tif len(values) == 2 {\n+\t\t\toutput.Log(\"[+] New Header: \" + values[0] + \": \" + values[1])\n+\t\t\treq.Header.Set(values[0], values[1])\n+\t\t}\n+\t}\n+\n+\tclient := new(http.Client)\n+\tres, err := client.Do(req)\n+\tif err != nil {\n+\t\treturn []string{}, err\n \t}\n \tdefer res.Body.Close()\n \tif res.StatusCode != 200 {\n", "diff_parsed": {"added": [[14, "\tflag \"github.com/spf13/pflag\""], [63, "\tHeaderArg := flag.StringArrayP(\"header\", \"H\", nil, \"Any HTTP headers(-H \\\"Authorization:Bearer token\\\")\")"], [123, "\t\tsources, err := getScriptSrc(e, *HeaderArg)"], [191, "func getScriptSrc(url string, headers []string) ([]string, error) {"], [193, "\treq, err := http.NewRequest(\"GET\", url, nil)"], [195, "\t\treturn []string{}, err"], [196, "\t}"], [197, ""], [198, "\tfor _, d := range headers {"], [199, "\t\tvalues := strings.Split(d, \":\")"], [200, "\t\tif len(values) == 2 {"], [201, "\t\t\toutput.Log(\"[+] New Header: \" + values[0] + \": \" + values[1])"], [202, "\t\t\treq.Header.Set(values[0], values[1])"], [203, "\t\t}"], [204, "\t}"], [205, ""], [206, "\tclient := new(http.Client)"], [207, "\tres, err := client.Do(req)"], [208, "\tif err != nil {"], [209, "\t\treturn []string{}, err"]], "deleted": [[5, "\t\"flag\""], [122, "\t\tsources, err := getScriptSrc(e)"], [190, "func getScriptSrc(url string) ([]string, error) {"], [192, "\tres, err := http.Get(url)"], [194, "\t\treturn nil, err"]]}, "added_lines": 20, "deleted_lines": 5, "source_code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n\t\"github.com/logrusorgru/aurora\"\n\tflag \"github.com/spf13/pflag\"\n)\n\ntype logger interface {\n\tLog(msg string)\n\tError(msg string, err error)\n}\n\ntype silent struct{}\n\nfunc (s silent) Log(msg string) {\n}\n\nfunc (s silent) Error(msg string, err error) {\n}\n\ntype verbose struct {\n}\n\nfunc (v verbose) Log(msg string) {\n\tfmt.Println(au.Cyan(msg))\n}\n\nfunc Log(l logger, msg string) {\n\tl.Log(msg)\n}\n\nfunc (v verbose) Error(msg string, err error) {\n\tfmt.Fprintln(os.Stderr, au.Red(msg))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n\t}\n}\n\nfunc Error(l logger, msg string, err error) {\n\tl.Error(msg, err)\n}\n\nvar output logger\nvar au aurora.Aurora\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n\tHeaderArg := flag.StringArrayP(\"header\", \"H\", nil, \"Any HTTP headers(-H \\\"Authorization:Bearer token\\\")\")\n\tflag.Parse()\n\n\tau = aurora.NewAurora(!*noColorsArg)\n\n\tvar urls []string\n\tvar allSources []string\n\n\toutput = silent{}\n\n\tif *verboseArg {\n\t\toutput = verbose{}\n\t}\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\toutput.Log(\"[+] Received urls from Stdin\")\n\t\t}\n\t}\n\n\tif *inputFileArg != \"\" {\n\t\tlines, err := readLines(*inputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)\n\t\t}\n\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\toutput.Log(\"[+] Set url to \" + *urlArg)\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\toutput.Error(\"[!] No urls supplied\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tif *resolveArg && !*completeArg {\n\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tvar sourcesBak []string\n\t\tvar completedSuccessfully = true\n\t\toutput.Log(\"[+] Getting sources from \" + e)\n\t\tsources, err := getScriptSrc(e, *HeaderArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't get sources from \"+e, err)\n\t\t}\n\n\t\tif *completeArg {\n\t\t\toutput.Log(\"[+] Completing URLs\")\n\t\t\tsourcesBak = sources\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)\n\t\t\t\tsources = sourcesBak\n\t\t\t\tcompletedSuccessfully = false\n\t\t\t}\n\t\t}\n\n\t\tif *resolveArg && *completeArg {\n\t\t\tif completedSuccessfully {\n\t\t\t\toutput.Log(\"[+] Resolving files\")\n\t\t\t\tsourcesBak = sources\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)\n\t\t\t\t\tsources = sourcesBak\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)\n\t\t\t}\n\t\t} else if *resolveArg {\n\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\t}\n\n\t\tfor _, i := range sources {\n\t\t\tfmt.Println(i)\n\t\t}\n\n\t\tif *outputFileArg != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFileArg != \"\" {\n\t\toutput.Log(\"[+] Saving output to \" + *outputFileArg)\n\t\terr := saveToFile(allSources, *outputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't save to output file \"+*outputFileArg, err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string, headers []string) ([]string, error) {\n\t// Request the HTML page.\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\n\tfor _, d := range headers {\n\t\tvalues := strings.Split(d, \":\")\n\t\tif len(values) == 2 {\n\t\t\toutput.Log(\"[+] New Header: \" + values[0] + \": \" + values[1])\n\t\t\treq.Header.Set(values[0], values[1])\n\t\t}\n\t}\n\n\tclient := new(http.Client)\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\toutput.Error(\"[!] \"+url+\" returned an \"+strconv.Itoa(res.StatusCode)+\" instead of an 200 OK\", nil)\n\t\treturn nil, nil\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "source_code_before": "package main\n\nimport (\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n\t\"github.com/logrusorgru/aurora\"\n)\n\ntype logger interface {\n\tLog(msg string)\n\tError(msg string, err error)\n}\n\ntype silent struct{}\n\nfunc (s silent) Log(msg string) {\n}\n\nfunc (s silent) Error(msg string, err error) {\n}\n\ntype verbose struct {\n}\n\nfunc (v verbose) Log(msg string) {\n\tfmt.Println(au.Cyan(msg))\n}\n\nfunc Log(l logger, msg string) {\n\tl.Log(msg)\n}\n\nfunc (v verbose) Error(msg string, err error) {\n\tfmt.Fprintln(os.Stderr, au.Red(msg))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n\t}\n}\n\nfunc Error(l logger, msg string, err error) {\n\tl.Error(msg, err)\n}\n\nvar output logger\nvar au aurora.Aurora\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n\tflag.Parse()\n\n\tau = aurora.NewAurora(!*noColorsArg)\n\n\tvar urls []string\n\tvar allSources []string\n\n\toutput = silent{}\n\n\tif *verboseArg {\n\t\toutput = verbose{}\n\t}\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\toutput.Log(\"[+] Received urls from Stdin\")\n\t\t}\n\t}\n\n\tif *inputFileArg != \"\" {\n\t\tlines, err := readLines(*inputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)\n\t\t}\n\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\toutput.Log(\"[+] Set url to \" + *urlArg)\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\toutput.Error(\"[!] No urls supplied\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tif *resolveArg && !*completeArg {\n\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tvar sourcesBak []string\n\t\tvar completedSuccessfully = true\n\t\toutput.Log(\"[+] Getting sources from \" + e)\n\t\tsources, err := getScriptSrc(e)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't get sources from \"+e, err)\n\t\t}\n\n\t\tif *completeArg {\n\t\t\toutput.Log(\"[+] Completing URLs\")\n\t\t\tsourcesBak = sources\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)\n\t\t\t\tsources = sourcesBak\n\t\t\t\tcompletedSuccessfully = false\n\t\t\t}\n\t\t}\n\n\t\tif *resolveArg && *completeArg {\n\t\t\tif completedSuccessfully {\n\t\t\t\toutput.Log(\"[+] Resolving files\")\n\t\t\t\tsourcesBak = sources\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)\n\t\t\t\t\tsources = sourcesBak\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)\n\t\t\t}\n\t\t} else if *resolveArg {\n\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\t}\n\n\t\tfor _, i := range sources {\n\t\t\tfmt.Println(i)\n\t\t}\n\n\t\tif *outputFileArg != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFileArg != \"\" {\n\t\toutput.Log(\"[+] Saving output to \" + *outputFileArg)\n\t\terr := saveToFile(allSources, *outputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't save to output file \"+*outputFileArg, err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string) ([]string, error) {\n\t// Request the HTML page.\n\tres, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\toutput.Error(\"[!] \"+url+\" returned an \"+strconv.Itoa(res.StatusCode)+\" instead of an 200 OK\", nil)\n\t\treturn nil, nil\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "methods": [{"name": "Log", "start_line": 24, "end_line": 25}, {"name": "Error", "start_line": 27, "end_line": 28}, {"name": "Log", "start_line": 33, "end_line": 35}, {"name": "Log", "start_line": 37, "end_line": 39}, {"name": "Error", "start_line": 41, "end_line": 46}, {"name": "Error", "start_line": 48, "end_line": 50}, {"name": "main", "start_line": 55, "end_line": 174}, {"name": "saveToFile", "start_line": 177, "end_line": 189}, {"name": "", "start_line": 226, "end_line": 231}, {"name": "getScriptSrc", "start_line": 191, "end_line": 234}, {"name": "readLines", "start_line": 237, "end_line": 250}, {"name": "resolveUrls", "start_line": 252, "end_line": 263}, {"name": "completeUrls", "start_line": 265, "end_line": 281}], "methods_before": [{"name": "Log", "start_line": 24, "end_line": 25}, {"name": "Error", "start_line": 27, "end_line": 28}, {"name": "Log", "start_line": 33, "end_line": 35}, {"name": "Log", "start_line": 37, "end_line": 39}, {"name": "Error", "start_line": 41, "end_line": 46}, {"name": "Error", "start_line": 48, "end_line": 50}, {"name": "main", "start_line": 55, "end_line": 173}, {"name": "saveToFile", "start_line": 176, "end_line": 188}, {"name": "", "start_line": 211, "end_line": 216}, {"name": "getScriptSrc", "start_line": 190, "end_line": 219}, {"name": "readLines", "start_line": 222, "end_line": 235}, {"name": "resolveUrls", "start_line": 237, "end_line": 248}, {"name": "completeUrls", "start_line": 250, "end_line": 266}], "changed_methods": [{"name": "getScriptSrc", "start_line": 190, "end_line": 219}, {"name": "getScriptSrc", "start_line": 191, "end_line": 234}, {"name": "main", "start_line": 55, "end_line": 174}], "nloc": 230, "complexity": 61, "token_count": 1501}], "dmm_unit_size": 0.0, "dmm_unit_complexity": 0.0, "dmm_unit_interfacing": 1.0},
    {"hash": "f21c5b0434af0934cd0c4446f6de647bc04fd9ea", "msg": "Merge pull request #10 from 003random/headers\n\nadd optional flag for request headers. Thanks bp0lr #7", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2020-10-05 15:54:21+02:00", "author_timezone": -7200, "committer_date": "2020-10-05 15:54:21+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": true, "parents": ["ee9fc91581b4ba54c9ac2813d733cc897445179d", "2cd95a34d0891506270ba7db47b3df49fa08d760"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 5, "insertions": 20, "lines": 25, "files": 1, "modified_files": [], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "71595f0ec5b729f40165dd0448c78a662b29e01d", "msg": "add insecure option to skip tls verification", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "003random", "email": "003random@protonmail.com"}, "author_date": "2020-10-05 14:08:24+00:00", "author_timezone": 0, "committer_date": "2020-10-05 14:08:24+00:00", "committer_timezone": 0, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["2cd95a34d0891506270ba7db47b3df49fa08d760"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 4, "insertions": 19, "lines": 23, "files": 1, "modified_files": [{"old_path": "main.go", "new_path": "main.go", "filename": "main.go", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -2,6 +2,7 @@ package main\n \n import (\n \t\"bufio\"\n+\t\"crypto/tls\"\n \t\"fmt\"\n \t\"net/http\"\n \t\"net/url\"\n@@ -53,7 +54,7 @@ var output logger\n var au aurora.Aurora\n \n func main() {\n-\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n+\turlArg := flag.String(\"url\", \"U\", \"The url to get the javascript sources from\")\n \toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n \tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n \tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n@@ -61,6 +62,7 @@ func main() {\n \tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n \tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n \tHeaderArg := flag.StringArrayP(\"header\", \"H\", nil, \"Any HTTP headers(-H \\\"Authorization:Bearer token\\\")\")\n+\tinsecureArg := flag.Bool(\"insecure\", false, \"Check the SSL security checks. Use when the certificate is expired or invalid\")\n \tflag.Parse()\n \n \tau = aurora.NewAurora(!*noColorsArg)\n@@ -120,7 +122,7 @@ func main() {\n \t\tvar sourcesBak []string\n \t\tvar completedSuccessfully = true\n \t\toutput.Log(\"[+] Getting sources from \" + e)\n-\t\tsources, err := getScriptSrc(e, *HeaderArg)\n+\t\tsources, err := getScriptSrc(e, *HeaderArg, *insecureArg)\n \t\tif err != nil {\n \t\t\toutput.Error(\"[!] Couldn't get sources from \"+e, err)\n \t\t}\n@@ -188,7 +190,7 @@ func saveToFile(sources []string, path string) error {\n \treturn w.Flush()\n }\n \n-func getScriptSrc(url string, headers []string) ([]string, error) {\n+func getScriptSrc(url string, headers []string, insecure bool) ([]string, error) {\n \t// Request the HTML page.\n \treq, err := http.NewRequest(\"GET\", url, nil)\n \tif err != nil {\n@@ -203,7 +205,20 @@ func getScriptSrc(url string, headers []string) ([]string, error) {\n \t\t}\n \t}\n \n-\tclient := new(http.Client)\n+\ttr := &http.Transport{\n+\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: false},\n+\t}\n+\n+\tvar client = &http.Client{\n+\t\tTransport: tr,\n+\t}\n+\n+\tif insecure {\n+\t\tclient.Transport = &http.Transport{\n+\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n+\t\t}\n+\t}\n+\n \tres, err := client.Do(req)\n \tif err != nil {\n \t\treturn []string{}, err\n", "diff_parsed": {"added": [[5, "\t\"crypto/tls\""], [57, "\turlArg := flag.String(\"url\", \"U\", \"The url to get the javascript sources from\")"], [65, "\tinsecureArg := flag.Bool(\"insecure\", false, \"Check the SSL security checks. Use when the certificate is expired or invalid\")"], [125, "\t\tsources, err := getScriptSrc(e, *HeaderArg, *insecureArg)"], [193, "func getScriptSrc(url string, headers []string, insecure bool) ([]string, error) {"], [208, "\ttr := &http.Transport{"], [209, "\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: false},"], [210, "\t}"], [211, ""], [212, "\tvar client = &http.Client{"], [213, "\t\tTransport: tr,"], [214, "\t}"], [215, ""], [216, "\tif insecure {"], [217, "\t\tclient.Transport = &http.Transport{"], [218, "\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},"], [219, "\t\t}"], [220, "\t}"], [221, ""]], "deleted": [[56, "\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")"], [123, "\t\tsources, err := getScriptSrc(e, *HeaderArg)"], [191, "func getScriptSrc(url string, headers []string) ([]string, error) {"], [206, "\tclient := new(http.Client)"]]}, "added_lines": 19, "deleted_lines": 4, "source_code": "package main\n\nimport (\n\t\"bufio\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n\t\"github.com/logrusorgru/aurora\"\n\tflag \"github.com/spf13/pflag\"\n)\n\ntype logger interface {\n\tLog(msg string)\n\tError(msg string, err error)\n}\n\ntype silent struct{}\n\nfunc (s silent) Log(msg string) {\n}\n\nfunc (s silent) Error(msg string, err error) {\n}\n\ntype verbose struct {\n}\n\nfunc (v verbose) Log(msg string) {\n\tfmt.Println(au.Cyan(msg))\n}\n\nfunc Log(l logger, msg string) {\n\tl.Log(msg)\n}\n\nfunc (v verbose) Error(msg string, err error) {\n\tfmt.Fprintln(os.Stderr, au.Red(msg))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n\t}\n}\n\nfunc Error(l logger, msg string, err error) {\n\tl.Error(msg, err)\n}\n\nvar output logger\nvar au aurora.Aurora\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"U\", \"The url to get the javascript sources from\")\n\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n\tHeaderArg := flag.StringArrayP(\"header\", \"H\", nil, \"Any HTTP headers(-H \\\"Authorization:Bearer token\\\")\")\n\tinsecureArg := flag.Bool(\"insecure\", false, \"Check the SSL security checks. Use when the certificate is expired or invalid\")\n\tflag.Parse()\n\n\tau = aurora.NewAurora(!*noColorsArg)\n\n\tvar urls []string\n\tvar allSources []string\n\n\toutput = silent{}\n\n\tif *verboseArg {\n\t\toutput = verbose{}\n\t}\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\toutput.Log(\"[+] Received urls from Stdin\")\n\t\t}\n\t}\n\n\tif *inputFileArg != \"\" {\n\t\tlines, err := readLines(*inputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)\n\t\t}\n\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\toutput.Log(\"[+] Set url to \" + *urlArg)\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\toutput.Error(\"[!] No urls supplied\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tif *resolveArg && !*completeArg {\n\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tvar sourcesBak []string\n\t\tvar completedSuccessfully = true\n\t\toutput.Log(\"[+] Getting sources from \" + e)\n\t\tsources, err := getScriptSrc(e, *HeaderArg, *insecureArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't get sources from \"+e, err)\n\t\t}\n\n\t\tif *completeArg {\n\t\t\toutput.Log(\"[+] Completing URLs\")\n\t\t\tsourcesBak = sources\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)\n\t\t\t\tsources = sourcesBak\n\t\t\t\tcompletedSuccessfully = false\n\t\t\t}\n\t\t}\n\n\t\tif *resolveArg && *completeArg {\n\t\t\tif completedSuccessfully {\n\t\t\t\toutput.Log(\"[+] Resolving files\")\n\t\t\t\tsourcesBak = sources\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)\n\t\t\t\t\tsources = sourcesBak\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)\n\t\t\t}\n\t\t} else if *resolveArg {\n\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\t}\n\n\t\tfor _, i := range sources {\n\t\t\tfmt.Println(i)\n\t\t}\n\n\t\tif *outputFileArg != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFileArg != \"\" {\n\t\toutput.Log(\"[+] Saving output to \" + *outputFileArg)\n\t\terr := saveToFile(allSources, *outputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't save to output file \"+*outputFileArg, err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string, headers []string, insecure bool) ([]string, error) {\n\t// Request the HTML page.\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\n\tfor _, d := range headers {\n\t\tvalues := strings.Split(d, \":\")\n\t\tif len(values) == 2 {\n\t\t\toutput.Log(\"[+] New Header: \" + values[0] + \": \" + values[1])\n\t\t\treq.Header.Set(values[0], values[1])\n\t\t}\n\t}\n\n\ttr := &http.Transport{\n\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: false},\n\t}\n\n\tvar client = &http.Client{\n\t\tTransport: tr,\n\t}\n\n\tif insecure {\n\t\tclient.Transport = &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t\t}\n\t}\n\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\toutput.Error(\"[!] \"+url+\" returned an \"+strconv.Itoa(res.StatusCode)+\" instead of an 200 OK\", nil)\n\t\treturn nil, nil\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "source_code_before": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n\t\"github.com/logrusorgru/aurora\"\n\tflag \"github.com/spf13/pflag\"\n)\n\ntype logger interface {\n\tLog(msg string)\n\tError(msg string, err error)\n}\n\ntype silent struct{}\n\nfunc (s silent) Log(msg string) {\n}\n\nfunc (s silent) Error(msg string, err error) {\n}\n\ntype verbose struct {\n}\n\nfunc (v verbose) Log(msg string) {\n\tfmt.Println(au.Cyan(msg))\n}\n\nfunc Log(l logger, msg string) {\n\tl.Log(msg)\n}\n\nfunc (v verbose) Error(msg string, err error) {\n\tfmt.Fprintln(os.Stderr, au.Red(msg))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n\t}\n}\n\nfunc Error(l logger, msg string, err error) {\n\tl.Error(msg, err)\n}\n\nvar output logger\nvar au aurora.Aurora\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n\tHeaderArg := flag.StringArrayP(\"header\", \"H\", nil, \"Any HTTP headers(-H \\\"Authorization:Bearer token\\\")\")\n\tflag.Parse()\n\n\tau = aurora.NewAurora(!*noColorsArg)\n\n\tvar urls []string\n\tvar allSources []string\n\n\toutput = silent{}\n\n\tif *verboseArg {\n\t\toutput = verbose{}\n\t}\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\toutput.Log(\"[+] Received urls from Stdin\")\n\t\t}\n\t}\n\n\tif *inputFileArg != \"\" {\n\t\tlines, err := readLines(*inputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)\n\t\t}\n\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\toutput.Log(\"[+] Set url to \" + *urlArg)\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\toutput.Error(\"[!] No urls supplied\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tif *resolveArg && !*completeArg {\n\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tvar sourcesBak []string\n\t\tvar completedSuccessfully = true\n\t\toutput.Log(\"[+] Getting sources from \" + e)\n\t\tsources, err := getScriptSrc(e, *HeaderArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't get sources from \"+e, err)\n\t\t}\n\n\t\tif *completeArg {\n\t\t\toutput.Log(\"[+] Completing URLs\")\n\t\t\tsourcesBak = sources\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)\n\t\t\t\tsources = sourcesBak\n\t\t\t\tcompletedSuccessfully = false\n\t\t\t}\n\t\t}\n\n\t\tif *resolveArg && *completeArg {\n\t\t\tif completedSuccessfully {\n\t\t\t\toutput.Log(\"[+] Resolving files\")\n\t\t\t\tsourcesBak = sources\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)\n\t\t\t\t\tsources = sourcesBak\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)\n\t\t\t}\n\t\t} else if *resolveArg {\n\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\t}\n\n\t\tfor _, i := range sources {\n\t\t\tfmt.Println(i)\n\t\t}\n\n\t\tif *outputFileArg != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFileArg != \"\" {\n\t\toutput.Log(\"[+] Saving output to \" + *outputFileArg)\n\t\terr := saveToFile(allSources, *outputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't save to output file \"+*outputFileArg, err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string, headers []string) ([]string, error) {\n\t// Request the HTML page.\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\n\tfor _, d := range headers {\n\t\tvalues := strings.Split(d, \":\")\n\t\tif len(values) == 2 {\n\t\t\toutput.Log(\"[+] New Header: \" + values[0] + \": \" + values[1])\n\t\t\treq.Header.Set(values[0], values[1])\n\t\t}\n\t}\n\n\tclient := new(http.Client)\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\toutput.Error(\"[!] \"+url+\" returned an \"+strconv.Itoa(res.StatusCode)+\" instead of an 200 OK\", nil)\n\t\treturn nil, nil\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "methods": [{"name": "Log", "start_line": 25, "end_line": 26}, {"name": "Error", "start_line": 28, "end_line": 29}, {"name": "Log", "start_line": 34, "end_line": 36}, {"name": "Log", "start_line": 38, "end_line": 40}, {"name": "Error", "start_line": 42, "end_line": 47}, {"name": "Error", "start_line": 49, "end_line": 51}, {"name": "main", "start_line": 56, "end_line": 176}, {"name": "saveToFile", "start_line": 179, "end_line": 191}, {"name": "", "start_line": 241, "end_line": 246}, {"name": "getScriptSrc", "start_line": 193, "end_line": 249}, {"name": "readLines", "start_line": 252, "end_line": 265}, {"name": "resolveUrls", "start_line": 267, "end_line": 278}, {"name": "completeUrls", "start_line": 280, "end_line": 296}], "methods_before": [{"name": "Log", "start_line": 24, "end_line": 25}, {"name": "Error", "start_line": 27, "end_line": 28}, {"name": "Log", "start_line": 33, "end_line": 35}, {"name": "Log", "start_line": 37, "end_line": 39}, {"name": "Error", "start_line": 41, "end_line": 46}, {"name": "Error", "start_line": 48, "end_line": 50}, {"name": "main", "start_line": 55, "end_line": 174}, {"name": "saveToFile", "start_line": 177, "end_line": 189}, {"name": "", "start_line": 226, "end_line": 231}, {"name": "getScriptSrc", "start_line": 191, "end_line": 234}, {"name": "readLines", "start_line": 237, "end_line": 250}, {"name": "resolveUrls", "start_line": 252, "end_line": 263}, {"name": "completeUrls", "start_line": 265, "end_line": 281}], "changed_methods": [{"name": "getScriptSrc", "start_line": 191, "end_line": 234}, {"name": "main", "start_line": 56, "end_line": 176}, {"name": "getScriptSrc", "start_line": 193, "end_line": 249}], "nloc": 242, "complexity": 62, "token_count": 1571}], "dmm_unit_size": 0.0, "dmm_unit_complexity": 0.0, "dmm_unit_interfacing": 0.0},
    {"hash": "0f09a5991d7b0692ed4c90b9364821b1579d9ccf", "msg": "Merge pull request #11 from 003random/headers\n\nadd insecure option to skip tls verification", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2020-10-05 16:09:11+02:00", "author_timezone": -7200, "committer_date": "2020-10-05 16:09:11+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": true, "parents": ["f21c5b0434af0934cd0c4446f6de647bc04fd9ea", "71595f0ec5b729f40165dd0448c78a662b29e01d"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 4, "insertions": 19, "lines": 23, "files": 1, "modified_files": [], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "8d930222e4624bccb16ea17840408edbd4af066c", "msg": "add request method arg and request timeout arg", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "003random", "email": "003random@protonmail.com"}, "author_date": "2020-10-05 14:18:55+00:00", "author_timezone": 0, "committer_date": "2020-10-05 14:18:55+00:00", "committer_timezone": 0, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["0f09a5991d7b0692ed4c90b9364821b1579d9ccf"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 12, "insertions": 10, "lines": 22, "files": 1, "modified_files": [{"old_path": "main.go", "new_path": "main.go", "filename": "main.go", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -8,6 +8,7 @@ import (\n \t\"net/url\"\n \t\"os\"\n \t\"strings\"\n+\t\"time\"\n \n \t\"github.com/PuerkitoBio/goquery\"\n \t\"github.com/logrusorgru/aurora\"\n@@ -53,7 +54,8 @@ var output logger\n var au aurora.Aurora\n \n func main() {\n-\turlArg := flag.String(\"url\", \"U\", \"The url to get the javascript sources from\")\n+\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n+\tmethodArg := flag.String(\"method\", \"GET\", \"The request method. e.g. GET or POST\")\n \toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n \tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n \tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n@@ -62,6 +64,7 @@ func main() {\n \tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n \tHeaderArg := flag.StringArrayP(\"header\", \"H\", nil, \"Any HTTP headers(-H \\\"Authorization:Bearer token\\\")\")\n \tinsecureArg := flag.Bool(\"insecure\", false, \"Check the SSL security checks. Use when the certificate is expired or invalid\")\n+\ttimeoutArg := flag.Int(\"timeout\", 10, \"Max timeout for the requests\")\n \tflag.Parse()\n \n \tau = aurora.NewAurora(!*noColorsArg)\n@@ -121,7 +124,7 @@ func main() {\n \t\tvar sourcesBak []string\n \t\tvar completedSuccessfully = true\n \t\toutput.Log(\"[+] Getting sources from \" + e)\n-\t\tsources, err := getScriptSrc(e, *HeaderArg, *insecureArg)\n+\t\tsources, err := getScriptSrc(e, *methodArg, *HeaderArg, *insecureArg, *timeoutArg)\n \t\tif err != nil {\n \t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't get sources from %s\", e), err)\n \t\t}\n@@ -174,7 +177,6 @@ func main() {\n \n }\n \n-// ToDO: Use channel instead of slide, and use io.Writer instead of file path\n func saveToFile(sources []string, path string) error {\n \tfile, err := os.Create(path)\n \tif err != nil {\n@@ -189,9 +191,9 @@ func saveToFile(sources []string, path string) error {\n \treturn w.Flush()\n }\n \n-func getScriptSrc(url string, headers []string, insecure bool) ([]string, error) {\n+func getScriptSrc(url string, method string, headers []string, insecure bool, timeout int) ([]string, error) {\n \t// Request the HTML page.\n-\treq, err := http.NewRequest(\"GET\", url, nil)\n+\treq, err := http.NewRequest(method, url, nil)\n \tif err != nil {\n \t\treturn []string{}, err\n \t}\n@@ -205,19 +207,15 @@ func getScriptSrc(url string, headers []string, insecure bool) ([]string, error)\n \t}\n \n \ttr := &http.Transport{\n-\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: false},\n+\t\tResponseHeaderTimeout: time.Duration(time.Duration(timeout) * time.Second),\n+\t\tTLSClientConfig:       &tls.Config{InsecureSkipVerify: insecure},\n \t}\n \n \tvar client = &http.Client{\n+\t\tTimeout:   time.Duration(time.Duration(timeout) * time.Second),\n \t\tTransport: tr,\n \t}\n \n-\tif insecure {\n-\t\tclient.Transport = &http.Transport{\n-\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n-\t\t}\n-\t}\n-\n \tres, err := client.Do(req)\n \tif err != nil {\n \t\treturn []string{}, err\n", "diff_parsed": {"added": [[11, "\t\"time\""], [57, "\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")"], [58, "\tmethodArg := flag.String(\"method\", \"GET\", \"The request method. e.g. GET or POST\")"], [67, "\ttimeoutArg := flag.Int(\"timeout\", 10, \"Max timeout for the requests\")"], [127, "\t\tsources, err := getScriptSrc(e, *methodArg, *HeaderArg, *insecureArg, *timeoutArg)"], [194, "func getScriptSrc(url string, method string, headers []string, insecure bool, timeout int) ([]string, error) {"], [196, "\treq, err := http.NewRequest(method, url, nil)"], [210, "\t\tResponseHeaderTimeout: time.Duration(time.Duration(timeout) * time.Second),"], [211, "\t\tTLSClientConfig:       &tls.Config{InsecureSkipVerify: insecure},"], [215, "\t\tTimeout:   time.Duration(time.Duration(timeout) * time.Second),"]], "deleted": [[56, "\turlArg := flag.String(\"url\", \"U\", \"The url to get the javascript sources from\")"], [124, "\t\tsources, err := getScriptSrc(e, *HeaderArg, *insecureArg)"], [177, "// ToDO: Use channel instead of slide, and use io.Writer instead of file path"], [192, "func getScriptSrc(url string, headers []string, insecure bool) ([]string, error) {"], [194, "\treq, err := http.NewRequest(\"GET\", url, nil)"], [208, "\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: false},"], [215, "\tif insecure {"], [216, "\t\tclient.Transport = &http.Transport{"], [217, "\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},"], [218, "\t\t}"], [219, "\t}"], [220, ""]]}, "added_lines": 10, "deleted_lines": 12, "source_code": "package main\n\nimport (\n\t\"bufio\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n\t\"github.com/logrusorgru/aurora\"\n\tflag \"github.com/spf13/pflag\"\n)\n\ntype logger interface {\n\tLog(msg string)\n\tError(msg string, err error)\n}\n\ntype silent struct{}\n\nfunc (s silent) Log(msg string) {\n}\n\nfunc (s silent) Error(msg string, err error) {\n}\n\ntype verbose struct {\n}\n\nfunc (v verbose) Log(msg string) {\n\tfmt.Println(au.Cyan(msg))\n}\n\nfunc Log(l logger, msg string) {\n\tl.Log(msg)\n}\n\nfunc (v verbose) Error(msg string, err error) {\n\tfmt.Fprintln(os.Stderr, au.Red(msg))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n\t}\n}\n\nfunc Error(l logger, msg string, err error) {\n\tl.Error(msg, err)\n}\n\nvar output logger\nvar au aurora.Aurora\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\tmethodArg := flag.String(\"method\", \"GET\", \"The request method. e.g. GET or POST\")\n\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n\tHeaderArg := flag.StringArrayP(\"header\", \"H\", nil, \"Any HTTP headers(-H \\\"Authorization:Bearer token\\\")\")\n\tinsecureArg := flag.Bool(\"insecure\", false, \"Check the SSL security checks. Use when the certificate is expired or invalid\")\n\ttimeoutArg := flag.Int(\"timeout\", 10, \"Max timeout for the requests\")\n\tflag.Parse()\n\n\tau = aurora.NewAurora(!*noColorsArg)\n\n\tvar urls []string\n\tvar allSources []string\n\n\toutput = silent{}\n\n\tif *verboseArg {\n\t\toutput = verbose{}\n\t}\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\toutput.Log(\"[+] Received urls from Stdin\")\n\t\t}\n\t}\n\n\tif *inputFileArg != \"\" {\n\t\tlines, err := readLines(*inputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)\n\t\t}\n\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\toutput.Log(fmt.Sprintf(\"[+] Set url to %s\", *urlArg))\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\toutput.Error(\"[!] No urls supplied\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tif *resolveArg && !*completeArg {\n\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tvar sourcesBak []string\n\t\tvar completedSuccessfully = true\n\t\toutput.Log(\"[+] Getting sources from \" + e)\n\t\tsources, err := getScriptSrc(e, *methodArg, *HeaderArg, *insecureArg, *timeoutArg)\n\t\tif err != nil {\n\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't get sources from %s\", e), err)\n\t\t}\n\n\t\tif *completeArg {\n\t\t\toutput.Log(\"[+] Completing URLs\")\n\t\t\tsourcesBak = sources\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)\n\t\t\t\tsources = sourcesBak\n\t\t\t\tcompletedSuccessfully = false\n\t\t\t}\n\t\t}\n\n\t\tif *resolveArg && *completeArg {\n\t\t\tif completedSuccessfully {\n\t\t\t\toutput.Log(\"[+] Resolving files\")\n\t\t\t\tsourcesBak = sources\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)\n\t\t\t\t\tsources = sourcesBak\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)\n\t\t\t}\n\t\t} else if *resolveArg {\n\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\t}\n\n\t\tfor _, i := range sources {\n\t\t\tfmt.Println(i)\n\t\t}\n\n\t\tif *outputFileArg != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFileArg != \"\" {\n\t\toutput.Log(fmt.Sprintf(\"[+] Saving output to %s\", *outputFileArg))\n\t\terr := saveToFile(allSources, *outputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't save to output file %s\", *outputFileArg), err)\n\t\t}\n\t}\n\n}\n\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string, method string, headers []string, insecure bool, timeout int) ([]string, error) {\n\t// Request the HTML page.\n\treq, err := http.NewRequest(method, url, nil)\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\n\tfor _, d := range headers {\n\t\tvalues := strings.Split(d, \":\")\n\t\tif len(values) == 2 {\n\t\t\toutput.Log(\"[+] New Header: \" + values[0] + \": \" + values[1])\n\t\t\treq.Header.Set(values[0], values[1])\n\t\t}\n\t}\n\n\ttr := &http.Transport{\n\t\tResponseHeaderTimeout: time.Duration(time.Duration(timeout) * time.Second),\n\t\tTLSClientConfig:       &tls.Config{InsecureSkipVerify: insecure},\n\t}\n\n\tvar client = &http.Client{\n\t\tTimeout:   time.Duration(time.Duration(timeout) * time.Second),\n\t\tTransport: tr,\n\t}\n\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\toutput.Error(fmt.Sprintf(\"[!] %s returned an %d instead of %d\", url, res.StatusCode, http.StatusOK), nil)\n\t\treturn nil, nil\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tdsrc, _ := s.Attr(\"data-src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t\tif dsrc != \"\" {\n\t\t\tsources = append(sources, dsrc)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "source_code_before": "package main\n\nimport (\n\t\"bufio\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n\t\"github.com/logrusorgru/aurora\"\n\tflag \"github.com/spf13/pflag\"\n)\n\ntype logger interface {\n\tLog(msg string)\n\tError(msg string, err error)\n}\n\ntype silent struct{}\n\nfunc (s silent) Log(msg string) {\n}\n\nfunc (s silent) Error(msg string, err error) {\n}\n\ntype verbose struct {\n}\n\nfunc (v verbose) Log(msg string) {\n\tfmt.Println(au.Cyan(msg))\n}\n\nfunc Log(l logger, msg string) {\n\tl.Log(msg)\n}\n\nfunc (v verbose) Error(msg string, err error) {\n\tfmt.Fprintln(os.Stderr, au.Red(msg))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n\t}\n}\n\nfunc Error(l logger, msg string, err error) {\n\tl.Error(msg, err)\n}\n\nvar output logger\nvar au aurora.Aurora\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"U\", \"The url to get the javascript sources from\")\n\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n\tHeaderArg := flag.StringArrayP(\"header\", \"H\", nil, \"Any HTTP headers(-H \\\"Authorization:Bearer token\\\")\")\n\tinsecureArg := flag.Bool(\"insecure\", false, \"Check the SSL security checks. Use when the certificate is expired or invalid\")\n\tflag.Parse()\n\n\tau = aurora.NewAurora(!*noColorsArg)\n\n\tvar urls []string\n\tvar allSources []string\n\n\toutput = silent{}\n\n\tif *verboseArg {\n\t\toutput = verbose{}\n\t}\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\toutput.Log(\"[+] Received urls from Stdin\")\n\t\t}\n\t}\n\n\tif *inputFileArg != \"\" {\n\t\tlines, err := readLines(*inputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)\n\t\t}\n\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\toutput.Log(fmt.Sprintf(\"[+] Set url to %s\", *urlArg))\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\toutput.Error(\"[!] No urls supplied\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tif *resolveArg && !*completeArg {\n\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tvar sourcesBak []string\n\t\tvar completedSuccessfully = true\n\t\toutput.Log(\"[+] Getting sources from \" + e)\n\t\tsources, err := getScriptSrc(e, *HeaderArg, *insecureArg)\n\t\tif err != nil {\n\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't get sources from %s\", e), err)\n\t\t}\n\n\t\tif *completeArg {\n\t\t\toutput.Log(\"[+] Completing URLs\")\n\t\t\tsourcesBak = sources\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)\n\t\t\t\tsources = sourcesBak\n\t\t\t\tcompletedSuccessfully = false\n\t\t\t}\n\t\t}\n\n\t\tif *resolveArg && *completeArg {\n\t\t\tif completedSuccessfully {\n\t\t\t\toutput.Log(\"[+] Resolving files\")\n\t\t\t\tsourcesBak = sources\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)\n\t\t\t\t\tsources = sourcesBak\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)\n\t\t\t}\n\t\t} else if *resolveArg {\n\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\t}\n\n\t\tfor _, i := range sources {\n\t\t\tfmt.Println(i)\n\t\t}\n\n\t\tif *outputFileArg != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFileArg != \"\" {\n\t\toutput.Log(fmt.Sprintf(\"[+] Saving output to %s\", *outputFileArg))\n\t\terr := saveToFile(allSources, *outputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't save to output file %s\", *outputFileArg), err)\n\t\t}\n\t}\n\n}\n\n// ToDO: Use channel instead of slide, and use io.Writer instead of file path\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string, headers []string, insecure bool) ([]string, error) {\n\t// Request the HTML page.\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\n\tfor _, d := range headers {\n\t\tvalues := strings.Split(d, \":\")\n\t\tif len(values) == 2 {\n\t\t\toutput.Log(\"[+] New Header: \" + values[0] + \": \" + values[1])\n\t\t\treq.Header.Set(values[0], values[1])\n\t\t}\n\t}\n\n\ttr := &http.Transport{\n\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: false},\n\t}\n\n\tvar client = &http.Client{\n\t\tTransport: tr,\n\t}\n\n\tif insecure {\n\t\tclient.Transport = &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t\t}\n\t}\n\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\toutput.Error(fmt.Sprintf(\"[!] %s returned an %d instead of %d\", url, res.StatusCode, http.StatusOK), nil)\n\t\treturn nil, nil\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tdsrc, _ := s.Attr(\"data-src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t\tif dsrc != \"\" {\n\t\t\tsources = append(sources, dsrc)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "methods": [{"name": "Log", "start_line": 25, "end_line": 26}, {"name": "Error", "start_line": 28, "end_line": 29}, {"name": "Log", "start_line": 34, "end_line": 36}, {"name": "Log", "start_line": 38, "end_line": 40}, {"name": "Error", "start_line": 42, "end_line": 47}, {"name": "Error", "start_line": 49, "end_line": 51}, {"name": "main", "start_line": 56, "end_line": 178}, {"name": "saveToFile", "start_line": 180, "end_line": 192}, {"name": "", "start_line": 238, "end_line": 247}, {"name": "getScriptSrc", "start_line": 194, "end_line": 250}, {"name": "readLines", "start_line": 253, "end_line": 266}, {"name": "resolveUrls", "start_line": 268, "end_line": 279}, {"name": "completeUrls", "start_line": 281, "end_line": 297}], "methods_before": [{"name": "Log", "start_line": 24, "end_line": 25}, {"name": "Error", "start_line": 27, "end_line": 28}, {"name": "Log", "start_line": 33, "end_line": 35}, {"name": "Log", "start_line": 37, "end_line": 39}, {"name": "Error", "start_line": 41, "end_line": 46}, {"name": "Error", "start_line": 48, "end_line": 50}, {"name": "main", "start_line": 55, "end_line": 175}, {"name": "saveToFile", "start_line": 178, "end_line": 190}, {"name": "", "start_line": 240, "end_line": 249}, {"name": "getScriptSrc", "start_line": 192, "end_line": 252}, {"name": "readLines", "start_line": 255, "end_line": 268}, {"name": "resolveUrls", "start_line": 270, "end_line": 281}, {"name": "completeUrls", "start_line": 283, "end_line": 299}], "changed_methods": [{"name": "main", "start_line": 56, "end_line": 178}, {"name": "getScriptSrc", "start_line": 194, "end_line": 250}, {"name": "getScriptSrc", "start_line": 192, "end_line": 252}], "nloc": 245, "complexity": 62, "token_count": 1661}], "dmm_unit_size": 1.0, "dmm_unit_complexity": 1.0, "dmm_unit_interfacing": 1.0},
    {"hash": "428cda9d8520b7f4b846b73cdd5bd5c15bed9fa5", "msg": "Merge pull request #12 from 003random/timeout\n\nadd request method arg and request timeout arg", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2020-10-05 16:19:40+02:00", "author_timezone": -7200, "committer_date": "2020-10-05 16:19:40+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": true, "parents": ["0f09a5991d7b0692ed4c90b9364821b1579d9ccf", "8d930222e4624bccb16ea17840408edbd4af066c"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 12, "insertions": 10, "lines": 22, "files": 1, "modified_files": [], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "334286187f9bf4d6264c324c1cf04d3d537b73c1", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2020-10-05 16:25:57+02:00", "author_timezone": -7200, "committer_date": "2020-10-05 16:25:57+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["428cda9d8520b7f4b846b73cdd5bd5c15bed9fa5"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 15, "insertions": 19, "lines": 34, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -22,7 +22,7 @@ go get github.com/003random/getJS\n \n # Usage  \n Note: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \n-Example: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n+Example: `echo \"https://github.com\" | getJS --url https://example.com --input domains.txt`  \n   \n To get all  options, do:  \n ```bash\n@@ -32,13 +32,17 @@ getJS -h\n \n | Flag | Description | Example |\n |------|-------------|---------|\n-| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n-| -input   | Input file with urls            | getJS -input=domains.txt |\n-| -output   | The file where to save the output to        | getJS -output=output.txt |\n-| -verbose  | Display info of what is going on           | getJS -verbose |\n-| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n-| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n-| -nocolors   | Don't color the output   | getJS -nocolors |\n+| --url   | The url to get the javascript sources from | getJS --url https://poc-server.com |\n+| --method   | The request method. e.g. POST or GET. Default: \"GET\"| getJS --url https://poc-server.com --method POST |\n+| --timeout   | The request timeout. Default: 10 (secs) | getJS --url https://poc-server.com --timeout 15 |\n+| --insecure   | Skip SSL certificate verification. Use when the cert is expired or invalid | getJS --url https://poc-server.com --insecure |\n+| --header   | Custom request header(s). -H \"Authorization: Bearer token\" | getJS --url https://poc-server.com --insecure |\n+| --input   | Input file with urls            | getJS --input domains.txt |\n+| --output   | The file where to save the output to        | getJS --output output.txt |\n+| --verbose  | Display info of what is going on           | getJS --verbose |\n+| --complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS --complete |\n+| --resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with --complete)   | getJS --complete --resolve |\n+| --nocolors   | Don't color the output   | getJS --nocolors |\n \n ## Examples  \n   \n@@ -53,32 +57,32 @@ $ cat domains.txt | getJS\n   \n To save the js files, you can use:  \n ```bash\n-$ getJS -url=https://poc-server.com | xargs wget\n+$ getJS --url https://poc-server.com | xargs wget\n ```\n   \n If you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n ```bash\n-$ getJS -url=https://poc-server.com | tojson\n+$ getJS --url https://poc-server.com | tojson\n ```  \n   \n To feed urls from a file use:  \n ```bash\n-$ getJS -input=domains.txt\n+$ getJS --input domains.txt\n ```  \n   \n To save the results to a file, and don't display anything, use:  \n ```bash\n-$ getJS -url=https://poc-server.com -output=results.txt\n+$ getJS --url https://poc-server.com --output results.txt\n ```  \n   \n If you want to have a list of full urls as output use:  \n ```bash\n-$ getJS -url=domains.txt -complete\n+$ getJS --url domains.txt -complete\n ```  \n   \n If you want to only show the existing js files, use:  \n ```bash\n-$ getJS -url=domains.txt -complete -resolve\n+$ getJS --url domains.txt --complete --resolve\n ```  \n \n ## Built With\n@@ -102,4 +106,4 @@ This project is licensed under the MIT License.\n     \n ---\n     \n-*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n+*This is my first tool written in GO. I created it to learn the language more. (useful feeback is always welcome!)*\n", "diff_parsed": {"added": [[25, "Example: `echo \"https://github.com\" | getJS --url https://example.com --input domains.txt`"], [35, "| --url   | The url to get the javascript sources from | getJS --url https://poc-server.com |"], [36, "| --method   | The request method. e.g. POST or GET. Default: \"GET\"| getJS --url https://poc-server.com --method POST |"], [37, "| --timeout   | The request timeout. Default: 10 (secs) | getJS --url https://poc-server.com --timeout 15 |"], [38, "| --insecure   | Skip SSL certificate verification. Use when the cert is expired or invalid | getJS --url https://poc-server.com --insecure |"], [39, "| --header   | Custom request header(s). -H \"Authorization: Bearer token\" | getJS --url https://poc-server.com --insecure |"], [40, "| --input   | Input file with urls            | getJS --input domains.txt |"], [41, "| --output   | The file where to save the output to        | getJS --output output.txt |"], [42, "| --verbose  | Display info of what is going on           | getJS --verbose |"], [43, "| --complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS --complete |"], [44, "| --resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with --complete)   | getJS --complete --resolve |"], [45, "| --nocolors   | Don't color the output   | getJS --nocolors |"], [60, "$ getJS --url https://poc-server.com | xargs wget"], [65, "$ getJS --url https://poc-server.com | tojson"], [70, "$ getJS --input domains.txt"], [75, "$ getJS --url https://poc-server.com --output results.txt"], [80, "$ getJS --url domains.txt -complete"], [85, "$ getJS --url domains.txt --complete --resolve"], [109, "*This is my first tool written in GO. I created it to learn the language more. (useful feeback is always welcome!)*"]], "deleted": [[25, "Example: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`"], [35, "| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |"], [36, "| -input   | Input file with urls            | getJS -input=domains.txt |"], [37, "| -output   | The file where to save the output to        | getJS -output=output.txt |"], [38, "| -verbose  | Display info of what is going on           | getJS -verbose |"], [39, "| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |"], [40, "| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |"], [41, "| -nocolors   | Don't color the output   | getJS -nocolors |"], [56, "$ getJS -url=https://poc-server.com | xargs wget"], [61, "$ getJS -url=https://poc-server.com | tojson"], [66, "$ getJS -input=domains.txt"], [71, "$ getJS -url=https://poc-server.com -output=results.txt"], [76, "$ getJS -url=domains.txt -complete"], [81, "$ getJS -url=domains.txt -complete -resolve"], [105, "*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*"]]}, "added_lines": 19, "deleted_lines": 15, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS --url https://example.com --input domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| --url   | The url to get the javascript sources from | getJS --url https://poc-server.com |\n| --method   | The request method. e.g. POST or GET. Default: \"GET\"| getJS --url https://poc-server.com --method POST |\n| --timeout   | The request timeout. Default: 10 (secs) | getJS --url https://poc-server.com --timeout 15 |\n| --insecure   | Skip SSL certificate verification. Use when the cert is expired or invalid | getJS --url https://poc-server.com --insecure |\n| --header   | Custom request header(s). -H \"Authorization: Bearer token\" | getJS --url https://poc-server.com --insecure |\n| --input   | Input file with urls            | getJS --input domains.txt |\n| --output   | The file where to save the output to        | getJS --output output.txt |\n| --verbose  | Display info of what is going on           | getJS --verbose |\n| --complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS --complete |\n| --resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with --complete)   | getJS --complete --resolve |\n| --nocolors   | Don't color the output   | getJS --nocolors |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot_.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following:  \n\n```bash\n$ cat domains.txt | getJS\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS --url https://poc-server.com | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS --url https://poc-server.com | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS --input domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS --url https://poc-server.com --output results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS --url domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS --url domains.txt --complete --resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues and/or pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. (useful feeback is always welcome!)*\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS -url=https://example.com -input=domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| -url   | The url to get the javascript sources from | getJS -url=htt<span></span>ps://poc-server.com |\n| -input   | Input file with urls            | getJS -input=domains.txt |\n| -output   | The file where to save the output to        | getJS -output=output.txt |\n| -verbose  | Display info of what is going on           | getJS -verbose |\n| -complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS -complete |\n| -resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with -complete)   | getJS -complete -resolve |\n| -nocolors   | Don't color the output   | getJS -nocolors |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot_.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following:  \n\n```bash\n$ cat domains.txt | getJS\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS -url=https://poc-server.com | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS -url=https://poc-server.com | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS -input=domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS -url=https://poc-server.com -output=results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS -url=domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS -url=domains.txt -complete -resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues and/or pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. Please don't hate on my coding style xD (useful feeback is always welcome!)*\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "8ece11eabc62cd8b131ed2e1a9541a581722343f", "msg": "readLines: accept an io.Reader instead of a file path", "author": {"name": "Miguel \u00c1ngel Jimeno", "email": "miguelangel4b@gmail.com"}, "committer": {"name": "Miguel \u00c1ngel Jimeno", "email": "miguelangel4b@gmail.com"}, "author_date": "2020-10-05 18:26:05+02:00", "author_timezone": -7200, "committer_date": "2020-10-05 18:26:05+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["334286187f9bf4d6264c324c1cf04d3d537b73c1"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 10, "insertions": 11, "lines": 21, "files": 1, "modified_files": [{"old_path": "main.go", "new_path": "main.go", "filename": "main.go", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -4,6 +4,7 @@ import (\n \t\"bufio\"\n \t\"crypto/tls\"\n \t\"fmt\"\n+\t\"io\"\n \t\"net/http\"\n \t\"net/url\"\n \t\"os\"\n@@ -97,7 +98,14 @@ func main() {\n \t}\n \n \tif *inputFileArg != \"\" {\n-\t\tlines, err := readLines(*inputFileArg)\n+\t\tf, err := os.Open(*inputFileArg)\n+\t\tif err != nil {\n+\t\t\toutput.Error(\"[!] Couldn't open input file\", err)\n+\t\t\treturn\n+\t\t}\n+\t\tdefer f.Close()\n+\n+\t\tlines, err := readLines(f)\n \t\tif err != nil {\n \t\t\toutput.Error(\"[!] Couldn't read from input file\", err)\n \t\t}\n@@ -249,16 +257,9 @@ func getScriptSrc(url string, method string, headers []string, insecure bool, ti\n \treturn sources, nil\n }\n \n-// ToDo: Use io.Writer instead of a file path\n-func readLines(path string) ([]string, error) {\n-\tfile, err := os.Open(path)\n-\tif err != nil {\n-\t\treturn nil, err\n-\t}\n-\tdefer file.Close()\n-\n+func readLines(r io.Reader) ([]string, error) {\n \tvar lines []string\n-\tscanner := bufio.NewScanner(file)\n+\tscanner := bufio.NewScanner(r)\n \tfor scanner.Scan() {\n \t\tlines = append(lines, scanner.Text())\n \t}\n", "diff_parsed": {"added": [[7, "\t\"io\""], [101, "\t\tf, err := os.Open(*inputFileArg)"], [102, "\t\tif err != nil {"], [103, "\t\t\toutput.Error(\"[!] Couldn't open input file\", err)"], [104, "\t\t\treturn"], [105, "\t\t}"], [106, "\t\tdefer f.Close()"], [107, ""], [108, "\t\tlines, err := readLines(f)"], [260, "func readLines(r io.Reader) ([]string, error) {"], [262, "\tscanner := bufio.NewScanner(r)"]], "deleted": [[100, "\t\tlines, err := readLines(*inputFileArg)"], [252, "// ToDo: Use io.Writer instead of a file path"], [253, "func readLines(path string) ([]string, error) {"], [254, "\tfile, err := os.Open(path)"], [255, "\tif err != nil {"], [256, "\t\treturn nil, err"], [257, "\t}"], [258, "\tdefer file.Close()"], [259, ""], [261, "\tscanner := bufio.NewScanner(file)"]]}, "added_lines": 11, "deleted_lines": 10, "source_code": "package main\n\nimport (\n\t\"bufio\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n\t\"github.com/logrusorgru/aurora\"\n\tflag \"github.com/spf13/pflag\"\n)\n\ntype logger interface {\n\tLog(msg string)\n\tError(msg string, err error)\n}\n\ntype silent struct{}\n\nfunc (s silent) Log(msg string) {\n}\n\nfunc (s silent) Error(msg string, err error) {\n}\n\ntype verbose struct {\n}\n\nfunc (v verbose) Log(msg string) {\n\tfmt.Println(au.Cyan(msg))\n}\n\nfunc Log(l logger, msg string) {\n\tl.Log(msg)\n}\n\nfunc (v verbose) Error(msg string, err error) {\n\tfmt.Fprintln(os.Stderr, au.Red(msg))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n\t}\n}\n\nfunc Error(l logger, msg string, err error) {\n\tl.Error(msg, err)\n}\n\nvar output logger\nvar au aurora.Aurora\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\tmethodArg := flag.String(\"method\", \"GET\", \"The request method. e.g. GET or POST\")\n\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n\tHeaderArg := flag.StringArrayP(\"header\", \"H\", nil, \"Any HTTP headers(-H \\\"Authorization:Bearer token\\\")\")\n\tinsecureArg := flag.Bool(\"insecure\", false, \"Check the SSL security checks. Use when the certificate is expired or invalid\")\n\ttimeoutArg := flag.Int(\"timeout\", 10, \"Max timeout for the requests\")\n\tflag.Parse()\n\n\tau = aurora.NewAurora(!*noColorsArg)\n\n\tvar urls []string\n\tvar allSources []string\n\n\toutput = silent{}\n\n\tif *verboseArg {\n\t\toutput = verbose{}\n\t}\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\toutput.Log(\"[+] Received urls from Stdin\")\n\t\t}\n\t}\n\n\tif *inputFileArg != \"\" {\n\t\tf, err := os.Open(*inputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't open input file\", err)\n\t\t\treturn\n\t\t}\n\t\tdefer f.Close()\n\n\t\tlines, err := readLines(f)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)\n\t\t}\n\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\toutput.Log(fmt.Sprintf(\"[+] Set url to %s\", *urlArg))\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\toutput.Error(\"[!] No urls supplied\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tif *resolveArg && !*completeArg {\n\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tvar sourcesBak []string\n\t\tvar completedSuccessfully = true\n\t\toutput.Log(\"[+] Getting sources from \" + e)\n\t\tsources, err := getScriptSrc(e, *methodArg, *HeaderArg, *insecureArg, *timeoutArg)\n\t\tif err != nil {\n\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't get sources from %s\", e), err)\n\t\t}\n\n\t\tif *completeArg {\n\t\t\toutput.Log(\"[+] Completing URLs\")\n\t\t\tsourcesBak = sources\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)\n\t\t\t\tsources = sourcesBak\n\t\t\t\tcompletedSuccessfully = false\n\t\t\t}\n\t\t}\n\n\t\tif *resolveArg && *completeArg {\n\t\t\tif completedSuccessfully {\n\t\t\t\toutput.Log(\"[+] Resolving files\")\n\t\t\t\tsourcesBak = sources\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)\n\t\t\t\t\tsources = sourcesBak\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)\n\t\t\t}\n\t\t} else if *resolveArg {\n\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\t}\n\n\t\tfor _, i := range sources {\n\t\t\tfmt.Println(i)\n\t\t}\n\n\t\tif *outputFileArg != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFileArg != \"\" {\n\t\toutput.Log(fmt.Sprintf(\"[+] Saving output to %s\", *outputFileArg))\n\t\terr := saveToFile(allSources, *outputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't save to output file %s\", *outputFileArg), err)\n\t\t}\n\t}\n\n}\n\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string, method string, headers []string, insecure bool, timeout int) ([]string, error) {\n\t// Request the HTML page.\n\treq, err := http.NewRequest(method, url, nil)\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\n\tfor _, d := range headers {\n\t\tvalues := strings.Split(d, \":\")\n\t\tif len(values) == 2 {\n\t\t\toutput.Log(\"[+] New Header: \" + values[0] + \": \" + values[1])\n\t\t\treq.Header.Set(values[0], values[1])\n\t\t}\n\t}\n\n\ttr := &http.Transport{\n\t\tResponseHeaderTimeout: time.Duration(time.Duration(timeout) * time.Second),\n\t\tTLSClientConfig:       &tls.Config{InsecureSkipVerify: insecure},\n\t}\n\n\tvar client = &http.Client{\n\t\tTimeout:   time.Duration(time.Duration(timeout) * time.Second),\n\t\tTransport: tr,\n\t}\n\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\toutput.Error(fmt.Sprintf(\"[!] %s returned an %d instead of %d\", url, res.StatusCode, http.StatusOK), nil)\n\t\treturn nil, nil\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tdsrc, _ := s.Attr(\"data-src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t\tif dsrc != \"\" {\n\t\t\tsources = append(sources, dsrc)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\nfunc readLines(r io.Reader) ([]string, error) {\n\tvar lines []string\n\tscanner := bufio.NewScanner(r)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "source_code_before": "package main\n\nimport (\n\t\"bufio\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n\t\"github.com/logrusorgru/aurora\"\n\tflag \"github.com/spf13/pflag\"\n)\n\ntype logger interface {\n\tLog(msg string)\n\tError(msg string, err error)\n}\n\ntype silent struct{}\n\nfunc (s silent) Log(msg string) {\n}\n\nfunc (s silent) Error(msg string, err error) {\n}\n\ntype verbose struct {\n}\n\nfunc (v verbose) Log(msg string) {\n\tfmt.Println(au.Cyan(msg))\n}\n\nfunc Log(l logger, msg string) {\n\tl.Log(msg)\n}\n\nfunc (v verbose) Error(msg string, err error) {\n\tfmt.Fprintln(os.Stderr, au.Red(msg))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n\t}\n}\n\nfunc Error(l logger, msg string, err error) {\n\tl.Error(msg, err)\n}\n\nvar output logger\nvar au aurora.Aurora\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\tmethodArg := flag.String(\"method\", \"GET\", \"The request method. e.g. GET or POST\")\n\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n\tHeaderArg := flag.StringArrayP(\"header\", \"H\", nil, \"Any HTTP headers(-H \\\"Authorization:Bearer token\\\")\")\n\tinsecureArg := flag.Bool(\"insecure\", false, \"Check the SSL security checks. Use when the certificate is expired or invalid\")\n\ttimeoutArg := flag.Int(\"timeout\", 10, \"Max timeout for the requests\")\n\tflag.Parse()\n\n\tau = aurora.NewAurora(!*noColorsArg)\n\n\tvar urls []string\n\tvar allSources []string\n\n\toutput = silent{}\n\n\tif *verboseArg {\n\t\toutput = verbose{}\n\t}\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\toutput.Log(\"[+] Received urls from Stdin\")\n\t\t}\n\t}\n\n\tif *inputFileArg != \"\" {\n\t\tlines, err := readLines(*inputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)\n\t\t}\n\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\toutput.Log(fmt.Sprintf(\"[+] Set url to %s\", *urlArg))\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\toutput.Error(\"[!] No urls supplied\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tif *resolveArg && !*completeArg {\n\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tvar sourcesBak []string\n\t\tvar completedSuccessfully = true\n\t\toutput.Log(\"[+] Getting sources from \" + e)\n\t\tsources, err := getScriptSrc(e, *methodArg, *HeaderArg, *insecureArg, *timeoutArg)\n\t\tif err != nil {\n\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't get sources from %s\", e), err)\n\t\t}\n\n\t\tif *completeArg {\n\t\t\toutput.Log(\"[+] Completing URLs\")\n\t\t\tsourcesBak = sources\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)\n\t\t\t\tsources = sourcesBak\n\t\t\t\tcompletedSuccessfully = false\n\t\t\t}\n\t\t}\n\n\t\tif *resolveArg && *completeArg {\n\t\t\tif completedSuccessfully {\n\t\t\t\toutput.Log(\"[+] Resolving files\")\n\t\t\t\tsourcesBak = sources\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)\n\t\t\t\t\tsources = sourcesBak\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)\n\t\t\t}\n\t\t} else if *resolveArg {\n\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\t}\n\n\t\tfor _, i := range sources {\n\t\t\tfmt.Println(i)\n\t\t}\n\n\t\tif *outputFileArg != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFileArg != \"\" {\n\t\toutput.Log(fmt.Sprintf(\"[+] Saving output to %s\", *outputFileArg))\n\t\terr := saveToFile(allSources, *outputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't save to output file %s\", *outputFileArg), err)\n\t\t}\n\t}\n\n}\n\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string, method string, headers []string, insecure bool, timeout int) ([]string, error) {\n\t// Request the HTML page.\n\treq, err := http.NewRequest(method, url, nil)\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\n\tfor _, d := range headers {\n\t\tvalues := strings.Split(d, \":\")\n\t\tif len(values) == 2 {\n\t\t\toutput.Log(\"[+] New Header: \" + values[0] + \": \" + values[1])\n\t\t\treq.Header.Set(values[0], values[1])\n\t\t}\n\t}\n\n\ttr := &http.Transport{\n\t\tResponseHeaderTimeout: time.Duration(time.Duration(timeout) * time.Second),\n\t\tTLSClientConfig:       &tls.Config{InsecureSkipVerify: insecure},\n\t}\n\n\tvar client = &http.Client{\n\t\tTimeout:   time.Duration(time.Duration(timeout) * time.Second),\n\t\tTransport: tr,\n\t}\n\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\toutput.Error(fmt.Sprintf(\"[!] %s returned an %d instead of %d\", url, res.StatusCode, http.StatusOK), nil)\n\t\treturn nil, nil\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tdsrc, _ := s.Attr(\"data-src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t\tif dsrc != \"\" {\n\t\t\tsources = append(sources, dsrc)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\n// ToDo: Use io.Writer instead of a file path\nfunc readLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "methods": [{"name": "Log", "start_line": 26, "end_line": 27}, {"name": "Error", "start_line": 29, "end_line": 30}, {"name": "Log", "start_line": 35, "end_line": 37}, {"name": "Log", "start_line": 39, "end_line": 41}, {"name": "Error", "start_line": 43, "end_line": 48}, {"name": "Error", "start_line": 50, "end_line": 52}, {"name": "main", "start_line": 57, "end_line": 186}, {"name": "saveToFile", "start_line": 188, "end_line": 200}, {"name": "", "start_line": 246, "end_line": 255}, {"name": "getScriptSrc", "start_line": 202, "end_line": 258}, {"name": "readLines", "start_line": 260, "end_line": 267}, {"name": "resolveUrls", "start_line": 269, "end_line": 280}, {"name": "completeUrls", "start_line": 282, "end_line": 298}], "methods_before": [{"name": "Log", "start_line": 25, "end_line": 26}, {"name": "Error", "start_line": 28, "end_line": 29}, {"name": "Log", "start_line": 34, "end_line": 36}, {"name": "Log", "start_line": 38, "end_line": 40}, {"name": "Error", "start_line": 42, "end_line": 47}, {"name": "Error", "start_line": 49, "end_line": 51}, {"name": "main", "start_line": 56, "end_line": 178}, {"name": "saveToFile", "start_line": 180, "end_line": 192}, {"name": "", "start_line": 238, "end_line": 247}, {"name": "getScriptSrc", "start_line": 194, "end_line": 250}, {"name": "readLines", "start_line": 253, "end_line": 266}, {"name": "resolveUrls", "start_line": 268, "end_line": 279}, {"name": "completeUrls", "start_line": 281, "end_line": 297}], "changed_methods": [{"name": "main", "start_line": 57, "end_line": 186}, {"name": "readLines", "start_line": 253, "end_line": 266}, {"name": "readLines", "start_line": 260, "end_line": 267}], "nloc": 247, "complexity": 62, "token_count": 1669}], "dmm_unit_size": 0.0, "dmm_unit_complexity": 0.0, "dmm_unit_interfacing": 1.0},
    {"hash": "0318baa2c823a538c8a228e8e59bf8e009fce4bf", "msg": "Merge pull request #13 from jimen0/readlines-io-reader\n\nreadLines: accept an io.Reader instead of a file path", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2020-10-05 19:40:05+02:00", "author_timezone": -7200, "committer_date": "2020-10-05 19:40:05+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": true, "parents": ["334286187f9bf4d6264c324c1cf04d3d537b73c1", "8ece11eabc62cd8b131ed2e1a9541a581722343f"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 10, "insertions": 11, "lines": 21, "files": 1, "modified_files": [], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "794d865256be0373c1c7a839377aff4609eb2b24", "msg": "Update README.md to fix wget command example\n\nFix command example to download the files using wget, which required the --complete flag that wasn't present.", "author": {"name": "Fededamian", "email": "fededamian@gmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2021-04-01 22:47:54-03:00", "author_timezone": 10800, "committer_date": "2021-04-01 22:47:54-03:00", "committer_timezone": 10800, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["0318baa2c823a538c8a228e8e59bf8e009fce4bf"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -57,7 +57,7 @@ $ cat domains.txt | getJS\n   \n To save the js files, you can use:  \n ```bash\n-$ getJS --url https://poc-server.com | xargs wget\n+$ getJS --complete --url https://poc-server.com | xargs wget\n ```\n   \n If you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n", "diff_parsed": {"added": [[60, "$ getJS --complete --url https://poc-server.com | xargs wget"]], "deleted": [[60, "$ getJS --url https://poc-server.com | xargs wget"]]}, "added_lines": 1, "deleted_lines": 1, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS --url https://example.com --input domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| --url   | The url to get the javascript sources from | getJS --url https://poc-server.com |\n| --method   | The request method. e.g. POST or GET. Default: \"GET\"| getJS --url https://poc-server.com --method POST |\n| --timeout   | The request timeout. Default: 10 (secs) | getJS --url https://poc-server.com --timeout 15 |\n| --insecure   | Skip SSL certificate verification. Use when the cert is expired or invalid | getJS --url https://poc-server.com --insecure |\n| --header   | Custom request header(s). -H \"Authorization: Bearer token\" | getJS --url https://poc-server.com --insecure |\n| --input   | Input file with urls            | getJS --input domains.txt |\n| --output   | The file where to save the output to        | getJS --output output.txt |\n| --verbose  | Display info of what is going on           | getJS --verbose |\n| --complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS --complete |\n| --resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with --complete)   | getJS --complete --resolve |\n| --nocolors   | Don't color the output   | getJS --nocolors |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot_.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following:  \n\n```bash\n$ cat domains.txt | getJS\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS --complete --url https://poc-server.com | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS --url https://poc-server.com | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS --input domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS --url https://poc-server.com --output results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS --url domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS --url domains.txt --complete --resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues and/or pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. (useful feeback is always welcome!)*\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS --url https://example.com --input domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| --url   | The url to get the javascript sources from | getJS --url https://poc-server.com |\n| --method   | The request method. e.g. POST or GET. Default: \"GET\"| getJS --url https://poc-server.com --method POST |\n| --timeout   | The request timeout. Default: 10 (secs) | getJS --url https://poc-server.com --timeout 15 |\n| --insecure   | Skip SSL certificate verification. Use when the cert is expired or invalid | getJS --url https://poc-server.com --insecure |\n| --header   | Custom request header(s). -H \"Authorization: Bearer token\" | getJS --url https://poc-server.com --insecure |\n| --input   | Input file with urls            | getJS --input domains.txt |\n| --output   | The file where to save the output to        | getJS --output output.txt |\n| --verbose  | Display info of what is going on           | getJS --verbose |\n| --complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS --complete |\n| --resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with --complete)   | getJS --complete --resolve |\n| --nocolors   | Don't color the output   | getJS --nocolors |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot_.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following:  \n\n```bash\n$ cat domains.txt | getJS\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS --url https://poc-server.com | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS --url https://poc-server.com | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS --input domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS --url https://poc-server.com --output results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS --url domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS --url domains.txt --complete --resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues and/or pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. (useful feeback is always welcome!)*\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "27b6a8d257c8e5f0d4ed428f506ccb299a9098b5", "msg": "Merge pull request #14 from fededamian/patch-1\n\nUpdate README.md to fix wget command example", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2021-05-21 14:07:01+02:00", "author_timezone": -7200, "committer_date": "2021-05-21 14:07:01+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": true, "parents": ["0318baa2c823a538c8a228e8e59bf8e009fce4bf", "794d865256be0373c1c7a839377aff4609eb2b24"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "04c72bfeaa37075cf426af356137635681732289", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2021-09-08 17:26:59+02:00", "author_timezone": -7200, "committer_date": "2021-09-08 17:26:59+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["27b6a8d257c8e5f0d4ed428f506ccb299a9098b5"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -36,7 +36,7 @@ getJS -h\n | --method   | The request method. e.g. POST or GET. Default: \"GET\"| getJS --url https://poc-server.com --method POST |\n | --timeout   | The request timeout. Default: 10 (secs) | getJS --url https://poc-server.com --timeout 15 |\n | --insecure   | Skip SSL certificate verification. Use when the cert is expired or invalid | getJS --url https://poc-server.com --insecure |\n-| --header   | Custom request header(s). -H \"Authorization: Bearer token\" | getJS --url https://poc-server.com --insecure |\n+| --header   | Custom request header(s) | getJS --url https://poc-server.com --header \"Authorization: Bearer token\" |\n | --input   | Input file with urls            | getJS --input domains.txt |\n | --output   | The file where to save the output to        | getJS --output output.txt |\n | --verbose  | Display info of what is going on           | getJS --verbose |\n", "diff_parsed": {"added": [[39, "| --header   | Custom request header(s) | getJS --url https://poc-server.com --header \"Authorization: Bearer token\" |"]], "deleted": [[39, "| --header   | Custom request header(s). -H \"Authorization: Bearer token\" | getJS --url https://poc-server.com --insecure |"]]}, "added_lines": 1, "deleted_lines": 1, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS --url https://example.com --input domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| --url   | The url to get the javascript sources from | getJS --url https://poc-server.com |\n| --method   | The request method. e.g. POST or GET. Default: \"GET\"| getJS --url https://poc-server.com --method POST |\n| --timeout   | The request timeout. Default: 10 (secs) | getJS --url https://poc-server.com --timeout 15 |\n| --insecure   | Skip SSL certificate verification. Use when the cert is expired or invalid | getJS --url https://poc-server.com --insecure |\n| --header   | Custom request header(s) | getJS --url https://poc-server.com --header \"Authorization: Bearer token\" |\n| --input   | Input file with urls            | getJS --input domains.txt |\n| --output   | The file where to save the output to        | getJS --output output.txt |\n| --verbose  | Display info of what is going on           | getJS --verbose |\n| --complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS --complete |\n| --resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with --complete)   | getJS --complete --resolve |\n| --nocolors   | Don't color the output   | getJS --nocolors |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot_.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following:  \n\n```bash\n$ cat domains.txt | getJS\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS --complete --url https://poc-server.com | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS --url https://poc-server.com | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS --input domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS --url https://poc-server.com --output results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS --url domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS --url domains.txt --complete --resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues and/or pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. (useful feeback is always welcome!)*\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS --url https://example.com --input domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| --url   | The url to get the javascript sources from | getJS --url https://poc-server.com |\n| --method   | The request method. e.g. POST or GET. Default: \"GET\"| getJS --url https://poc-server.com --method POST |\n| --timeout   | The request timeout. Default: 10 (secs) | getJS --url https://poc-server.com --timeout 15 |\n| --insecure   | Skip SSL certificate verification. Use when the cert is expired or invalid | getJS --url https://poc-server.com --insecure |\n| --header   | Custom request header(s). -H \"Authorization: Bearer token\" | getJS --url https://poc-server.com --insecure |\n| --input   | Input file with urls            | getJS --input domains.txt |\n| --output   | The file where to save the output to        | getJS --output output.txt |\n| --verbose  | Display info of what is going on           | getJS --verbose |\n| --complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS --complete |\n| --resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with --complete)   | getJS --complete --resolve |\n| --nocolors   | Don't color the output   | getJS --nocolors |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot_.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following:  \n\n```bash\n$ cat domains.txt | getJS\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS --complete --url https://poc-server.com | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS --url https://poc-server.com | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS --input domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS --url https://poc-server.com --output results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS --url domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS --url domains.txt --complete --resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues and/or pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. (useful feeback is always welcome!)*\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "a9a746410446bb117e58ce47dbccc1e51020b2a0", "msg": "Update README.md", "author": {"name": "Najam Ul Saqib", "email": "najamulsaqib@tutamail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2022-02-16 18:36:06+05:00", "author_timezone": -18000, "committer_date": "2022-02-16 18:36:06+05:00", "committer_timezone": -18000, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["04c72bfeaa37075cf426af356137635681732289"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -17,7 +17,7 @@ Make sure you have [GO](https://golang.org/) installed on your system.\n getJS is written in GO. You can install it with `go get`:\n \n ```\n-go get github.com/003random/getJS\n+go install github.com/003random/getJS@latest\n ```\n \n # Usage  \n", "diff_parsed": {"added": [[20, "go install github.com/003random/getJS@latest"]], "deleted": [[20, "go get github.com/003random/getJS"]]}, "added_lines": 1, "deleted_lines": 1, "source_code": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo install github.com/003random/getJS@latest\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS --url https://example.com --input domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| --url   | The url to get the javascript sources from | getJS --url https://poc-server.com |\n| --method   | The request method. e.g. POST or GET. Default: \"GET\"| getJS --url https://poc-server.com --method POST |\n| --timeout   | The request timeout. Default: 10 (secs) | getJS --url https://poc-server.com --timeout 15 |\n| --insecure   | Skip SSL certificate verification. Use when the cert is expired or invalid | getJS --url https://poc-server.com --insecure |\n| --header   | Custom request header(s) | getJS --url https://poc-server.com --header \"Authorization: Bearer token\" |\n| --input   | Input file with urls            | getJS --input domains.txt |\n| --output   | The file where to save the output to        | getJS --output output.txt |\n| --verbose  | Display info of what is going on           | getJS --verbose |\n| --complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS --complete |\n| --resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with --complete)   | getJS --complete --resolve |\n| --nocolors   | Don't color the output   | getJS --nocolors |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot_.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following:  \n\n```bash\n$ cat domains.txt | getJS\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS --complete --url https://poc-server.com | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS --url https://poc-server.com | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS --input domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS --url https://poc-server.com --output results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS --url domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS --url domains.txt --complete --resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues and/or pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. (useful feeback is always welcome!)*\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo get github.com/003random/getJS\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS --url https://example.com --input domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| --url   | The url to get the javascript sources from | getJS --url https://poc-server.com |\n| --method   | The request method. e.g. POST or GET. Default: \"GET\"| getJS --url https://poc-server.com --method POST |\n| --timeout   | The request timeout. Default: 10 (secs) | getJS --url https://poc-server.com --timeout 15 |\n| --insecure   | Skip SSL certificate verification. Use when the cert is expired or invalid | getJS --url https://poc-server.com --insecure |\n| --header   | Custom request header(s) | getJS --url https://poc-server.com --header \"Authorization: Bearer token\" |\n| --input   | Input file with urls            | getJS --input domains.txt |\n| --output   | The file where to save the output to        | getJS --output output.txt |\n| --verbose  | Display info of what is going on           | getJS --verbose |\n| --complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS --complete |\n| --resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with --complete)   | getJS --complete --resolve |\n| --nocolors   | Don't color the output   | getJS --nocolors |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot_.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following:  \n\n```bash\n$ cat domains.txt | getJS\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS --complete --url https://poc-server.com | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS --url https://poc-server.com | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS --input domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS --url https://poc-server.com --output results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS --url domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS --url domains.txt --complete --resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues and/or pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. (useful feeback is always welcome!)*\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "2f687c7fce089090a2160759a52c4ba23dec8e1f", "msg": "Merge pull request #18 from njmulsqb/patch-1\n\nUpdate README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2022-03-18 12:17:27+01:00", "author_timezone": -3600, "committer_date": "2022-03-18 12:17:27+01:00", "committer_timezone": -3600, "branches": "{'master'}", "in_main_branch": true, "merge": true, "parents": ["04c72bfeaa37075cf426af356137635681732289", "a9a746410446bb117e58ce47dbccc1e51020b2a0"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "86ea726c97e9b7d57309af5cf53b2144240c83c4", "msg": "Refactor: CLI and package support with v2", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "003random", "email": "003random@protonmail.com"}, "author_date": "2024-07-07 18:27:15+00:00", "author_timezone": 0, "committer_date": "2024-07-07 18:27:15+00:00", "committer_timezone": 0, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["2f687c7fce089090a2160759a52c4ba23dec8e1f"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 328, "insertions": 648, "lines": 976, "files": 8, "modified_files": [{"old_path": null, "new_path": "LICENSE", "filename": "LICENSE", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,21 @@\n+MIT License\n+\n+Copyright (c) 2024 003random\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE.\n", "diff_parsed": {"added": [[1, "MIT License"], [2, ""], [3, "Copyright (c) 2024 003random"], [4, ""], [5, "Permission is hereby granted, free of charge, to any person obtaining a copy"], [6, "of this software and associated documentation files (the \"Software\"), to deal"], [7, "in the Software without restriction, including without limitation the rights"], [8, "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"], [9, "copies of the Software, and to permit persons to whom the Software is"], [10, "furnished to do so, subject to the following conditions:"], [11, ""], [12, "The above copyright notice and this permission notice shall be included in all"], [13, "copies or substantial portions of the Software."], [14, ""], [15, "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"], [16, "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"], [17, "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"], [18, "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"], [19, "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"], [20, "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE"], [21, "SOFTWARE."]], "deleted": []}, "added_lines": 21, "deleted_lines": 0, "source_code": "MIT License\n\nCopyright (c) 2024 003random\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n", "source_code_before": null, "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}, {"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -1,109 +1,140 @@\n-# GetJS\n-[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n-[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n+<h2 align=\"center\">JavaScript Extraction CLI & Package</h2>\n+<p align=\"center\">\n+  <a href=\"https://pkg.go.dev/github.com/003random/getJS\">\n+    <img src=\"https://pkg.go.dev/badge/github.com/003random/getJS\">\n+  </a>\n+  <a href=\"https://github.com/003random/getJS/releases\">\n+    <img src=\"https://img.shields.io/github/release/003random/getJS.svg\">\n+  </a>\n+    <a href=\"https://github.com/003random/getJS/blob/master/LICENSE\">\n+    <img src=\"https://img.shields.io/badge/license-MIT-blue.svg\">\n+  </a>\n+</p>\n \n-getJS is a tool to extract all the javascript files from a set of given urls.  \n \n-The urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n+[getJS](https://github.com/003random/getJS) is a versatile tool designed to extract JavaScript sources from web pages. It offers both a command-line interface (CLI) for straightforward URL processing and a package interface for more customized integrations.\n \n-varying from completing the urls, to resolving the files.\n+## Table of Contents\n \n-## Prerequisites\n+- [Installation](#installation)\n+- [CLI Usage](#cli-usage)\n+  - [Options](#options)\n+  - [Examples](#examples)\n+- [Package Usage](#package-usage)\n+  - [Importing the Extractor](#importing-the-extractor)\n+  - [Example](#example)\n+- [Version Information](#version-information)\n+- [Contributing](#contributing)\n+- [License](#license)\n \n-Make sure you have [GO](https://golang.org/) installed on your system.  \n+## Installation\n \n-### Installing\n+To install `getJS`, use the following command:\n \n-getJS is written in GO. You can install it with `go get`:\n+`go get github.com/003random/getJS`\n \n-```\n-go install github.com/003random/getJS@latest\n-```\n+## CLI Usage\n \n-# Usage  \n-Note: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \n-Example: `echo \"https://github.com\" | getJS --url https://example.com --input domains.txt`  \n-  \n-To get all  options, do:  \n-```bash\n-getJS -h\n-```\n-  \n-\n-| Flag | Description | Example |\n-|------|-------------|---------|\n-| --url   | The url to get the javascript sources from | getJS --url https://poc-server.com |\n-| --method   | The request method. e.g. POST or GET. Default: \"GET\"| getJS --url https://poc-server.com --method POST |\n-| --timeout   | The request timeout. Default: 10 (secs) | getJS --url https://poc-server.com --timeout 15 |\n-| --insecure   | Skip SSL certificate verification. Use when the cert is expired or invalid | getJS --url https://poc-server.com --insecure |\n-| --header   | Custom request header(s) | getJS --url https://poc-server.com --header \"Authorization: Bearer token\" |\n-| --input   | Input file with urls            | getJS --input domains.txt |\n-| --output   | The file where to save the output to        | getJS --output output.txt |\n-| --verbose  | Display info of what is going on           | getJS --verbose |\n-| --complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS --complete |\n-| --resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with --complete)   | getJS --complete --resolve |\n-| --nocolors   | Don't color the output   | getJS --nocolors |\n-\n-## Examples  \n-  \n- ![screenshot](https://poc-server.com/getJS/screenshot_.png)\n-\n-    \n-getJS supports stdin data. To pipe urls to getJS, use the following:  \n-\n-```bash\n-$ cat domains.txt | getJS\n-```  \n-  \n-To save the js files, you can use:  \n-```bash\n-$ getJS --complete --url https://poc-server.com | xargs wget\n+### Options\n+\n+`getJS` provides several command-line options to customize its behavior:\n+\n+- `-url string`: The URL from which JavaScript sources should be extracted.\n+- `-input string`: Optional URLs input files. Each URL should be on a new line in plain text format. Can be used multiple times.\n+- `-output string`: Optional output file where results are written to. Can be used multiple times.\n+- `-complete`: Complete/Autofill relative URLs by adding the current origin.\n+- `-resolve`: Resolve the JavaScript files. Can only be used in combination with `--complete`.\n+- `-threads int`: The number of processing threads to spawn (default: 2).\n+- `-verbose`: Print verbose runtime information and errors.\n+- `-method string`: The request method used to fetch remote contents (default: \"GET\").\n+- `-header string`: Optional request headers to add to the requests. Can be used multiple times.\n+- `-timeout duration`: The request timeout while fetching remote contents (default: 5s).\n+\n+### Examples\n+\n+#### Extracting JavaScript from a Single URL\n+\n+`getJS -url https://destroy.ai`\n+\n+or \n+\n+`curl https://destroy.ai | getJS`\n+\n+#### Using Custom Request Options\n+\n+`getJS -url \"http://example.com\" -header \"User-Agent: foo bar\" -method POST --timeout=15s`\n+\n+#### Processing Multiple URLs from a File\n+\n+`getJS -input foo.txt -input bar.txt`\n+\n+#### Saving Results to an Output File\n+\n+`getJS -url \"http://example.com\" -output results.txt`\n+\n+## Package Usage\n+\n+### Importing the Extractor\n+\n+To use `getJS` as a package, you need to import the `extractor` package and utilize its functions directly.\n+\n+### Example\n+\n+```Go\n+package main\n+\n+import (\n+    \"fmt\"\n+    \"log\"\n+    \"net/http\"\n+    \"net/url\"\n+\n+    \"github.com/003random/getJS/extractor\"\n+)\n+\n+func main() {\n+    baseURL, err := url.Parse(\"https://google.com\")\n+    if (err != nil) {\n+        log.Fatalf(\"Error parsing base URL: %v\", err)\n+    }\n+\n+    resp, err := extractor.FetchResponse(baseURL.String(), \"GET\", http.Header{})\n+    if (err != nil) {\n+        log.Fatalf(\"Error fetching response: %v\", err)\n+    }\n+    defer resp.Body.Close()\n+\n+    // Custom extraction points (optional).\n+    extractionPoints := map[string][]string{\n+        \"script\": {\"src\", \"data-src\"},\n+        \"a\": {\"href\"},\n+    }\n+\n+    sources, err := extractor.ExtractSources(resp.Body, extractionPoints)\n+    if (err != nil) {\n+        log.Fatalf(\"Error extracting sources: %v\", err)\n+    }\n+\n+    // Filtering and extending extracted sources.\n+    filtered, err := extractor.Filter(sources, extractor.WithComplete(baseURL), extractor.WithResolve())\n+    if (err != nil) {\n+        log.Fatalf(\"Error filtering sources: %v\", err)\n+    }\n+\n+    for source := range filtered {\n+        fmt.Println(source.String())\n+    }\n+}\n ```\n-  \n-If you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n-```bash\n-$ getJS --url https://poc-server.com | tojson\n-```  \n-  \n-To feed urls from a file use:  \n-```bash\n-$ getJS --input domains.txt\n-```  \n-  \n-To save the results to a file, and don't display anything, use:  \n-```bash\n-$ getJS --url https://poc-server.com --output results.txt\n-```  \n-  \n-If you want to have a list of full urls as output use:  \n-```bash\n-$ getJS --url domains.txt -complete\n-```  \n-  \n-If you want to only show the existing js files, use:  \n-```bash\n-$ getJS --url domains.txt --complete --resolve\n-```  \n-\n-## Built With\n-\n-* [GO](http://golang.org/) - GOlanguage\n-* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n \n+## Version Information\n+\n+This is the v2 version of `getJS`. The original version can be found under the tag [v1](https://github.com/003random/getJS/tree/v1).\n \n ## Contributing\n \n-You are free to submit any issues and/or pull requests :)\n+Contributions are welcome! Please open an issue or submit a pull request for any bugs, feature requests, or improvements.\n \n ## License\n \n-This project is licensed under the MIT License.\n-\n-## Acknowledgments\n-\n-* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n-  \n-    \n----\n-    \n-*This is my first tool written in GO. I created it to learn the language more. (useful feeback is always welcome!)*\n+This project is licensed under the MIT License. See the [LICENSE](https://github.com/003random/getJS/blob/master/LICENSE) file for details.\n", "diff_parsed": {"added": [[1, "<h2 align=\"center\">JavaScript Extraction CLI & Package</h2>"], [2, "<p align=\"center\">"], [3, "  <a href=\"https://pkg.go.dev/github.com/003random/getJS\">"], [4, "    <img src=\"https://pkg.go.dev/badge/github.com/003random/getJS\">"], [5, "  </a>"], [6, "  <a href=\"https://github.com/003random/getJS/releases\">"], [7, "    <img src=\"https://img.shields.io/github/release/003random/getJS.svg\">"], [8, "  </a>"], [9, "    <a href=\"https://github.com/003random/getJS/blob/master/LICENSE\">"], [10, "    <img src=\"https://img.shields.io/badge/license-MIT-blue.svg\">"], [11, "  </a>"], [12, "</p>"], [15, "[getJS](https://github.com/003random/getJS) is a versatile tool designed to extract JavaScript sources from web pages. It offers both a command-line interface (CLI) for straightforward URL processing and a package interface for more customized integrations."], [17, "## Table of Contents"], [19, "- [Installation](#installation)"], [20, "- [CLI Usage](#cli-usage)"], [21, "  - [Options](#options)"], [22, "  - [Examples](#examples)"], [23, "- [Package Usage](#package-usage)"], [24, "  - [Importing the Extractor](#importing-the-extractor)"], [25, "  - [Example](#example)"], [26, "- [Version Information](#version-information)"], [27, "- [Contributing](#contributing)"], [28, "- [License](#license)"], [30, "## Installation"], [32, "To install `getJS`, use the following command:"], [34, "`go get github.com/003random/getJS`"], [36, "## CLI Usage"], [38, "### Options"], [39, ""], [40, "`getJS` provides several command-line options to customize its behavior:"], [41, ""], [42, "- `-url string`: The URL from which JavaScript sources should be extracted."], [43, "- `-input string`: Optional URLs input files. Each URL should be on a new line in plain text format. Can be used multiple times."], [44, "- `-output string`: Optional output file where results are written to. Can be used multiple times."], [45, "- `-complete`: Complete/Autofill relative URLs by adding the current origin."], [46, "- `-resolve`: Resolve the JavaScript files. Can only be used in combination with `--complete`."], [47, "- `-threads int`: The number of processing threads to spawn (default: 2)."], [48, "- `-verbose`: Print verbose runtime information and errors."], [49, "- `-method string`: The request method used to fetch remote contents (default: \"GET\")."], [50, "- `-header string`: Optional request headers to add to the requests. Can be used multiple times."], [51, "- `-timeout duration`: The request timeout while fetching remote contents (default: 5s)."], [52, ""], [53, "### Examples"], [54, ""], [55, "#### Extracting JavaScript from a Single URL"], [56, ""], [57, "`getJS -url https://destroy.ai`"], [58, ""], [59, "or"], [60, ""], [61, "`curl https://destroy.ai | getJS`"], [62, ""], [63, "#### Using Custom Request Options"], [64, ""], [65, "`getJS -url \"http://example.com\" -header \"User-Agent: foo bar\" -method POST --timeout=15s`"], [66, ""], [67, "#### Processing Multiple URLs from a File"], [68, ""], [69, "`getJS -input foo.txt -input bar.txt`"], [70, ""], [71, "#### Saving Results to an Output File"], [72, ""], [73, "`getJS -url \"http://example.com\" -output results.txt`"], [74, ""], [75, "## Package Usage"], [76, ""], [77, "### Importing the Extractor"], [78, ""], [79, "To use `getJS` as a package, you need to import the `extractor` package and utilize its functions directly."], [80, ""], [81, "### Example"], [82, ""], [83, "```Go"], [84, "package main"], [85, ""], [86, "import ("], [87, "    \"fmt\""], [88, "    \"log\""], [89, "    \"net/http\""], [90, "    \"net/url\""], [91, ""], [92, "    \"github.com/003random/getJS/extractor\""], [93, ")"], [94, ""], [95, "func main() {"], [96, "    baseURL, err := url.Parse(\"https://google.com\")"], [97, "    if (err != nil) {"], [98, "        log.Fatalf(\"Error parsing base URL: %v\", err)"], [99, "    }"], [100, ""], [101, "    resp, err := extractor.FetchResponse(baseURL.String(), \"GET\", http.Header{})"], [102, "    if (err != nil) {"], [103, "        log.Fatalf(\"Error fetching response: %v\", err)"], [104, "    }"], [105, "    defer resp.Body.Close()"], [106, ""], [107, "    // Custom extraction points (optional)."], [108, "    extractionPoints := map[string][]string{"], [109, "        \"script\": {\"src\", \"data-src\"},"], [110, "        \"a\": {\"href\"},"], [111, "    }"], [112, ""], [113, "    sources, err := extractor.ExtractSources(resp.Body, extractionPoints)"], [114, "    if (err != nil) {"], [115, "        log.Fatalf(\"Error extracting sources: %v\", err)"], [116, "    }"], [117, ""], [118, "    // Filtering and extending extracted sources."], [119, "    filtered, err := extractor.Filter(sources, extractor.WithComplete(baseURL), extractor.WithResolve())"], [120, "    if (err != nil) {"], [121, "        log.Fatalf(\"Error filtering sources: %v\", err)"], [122, "    }"], [123, ""], [124, "    for source := range filtered {"], [125, "        fmt.Println(source.String())"], [126, "    }"], [127, "}"], [130, "## Version Information"], [131, ""], [132, "This is the v2 version of `getJS`. The original version can be found under the tag [v1](https://github.com/003random/getJS/tree/v1)."], [136, "Contributions are welcome! Please open an issue or submit a pull request for any bugs, feature requests, or improvements."], [140, "This project is licensed under the MIT License. See the [LICENSE](https://github.com/003random/getJS/blob/master/LICENSE) file for details."]], "deleted": [[1, "# GetJS"], [2, "[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)"], [3, "[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)"], [5, "getJS is a tool to extract all the javascript files from a set of given urls."], [7, "The urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options,"], [9, "varying from completing the urls, to resolving the files."], [11, "## Prerequisites"], [13, "Make sure you have [GO](https://golang.org/) installed on your system."], [15, "### Installing"], [17, "getJS is written in GO. You can install it with `go get`:"], [19, "```"], [20, "go install github.com/003random/getJS@latest"], [21, "```"], [23, "# Usage"], [24, "Note: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)"], [25, "Example: `echo \"https://github.com\" | getJS --url https://example.com --input domains.txt`"], [26, ""], [27, "To get all  options, do:"], [28, "```bash"], [29, "getJS -h"], [30, "```"], [31, ""], [32, ""], [33, "| Flag | Description | Example |"], [34, "|------|-------------|---------|"], [35, "| --url   | The url to get the javascript sources from | getJS --url https://poc-server.com |"], [36, "| --method   | The request method. e.g. POST or GET. Default: \"GET\"| getJS --url https://poc-server.com --method POST |"], [37, "| --timeout   | The request timeout. Default: 10 (secs) | getJS --url https://poc-server.com --timeout 15 |"], [38, "| --insecure   | Skip SSL certificate verification. Use when the cert is expired or invalid | getJS --url https://poc-server.com --insecure |"], [39, "| --header   | Custom request header(s) | getJS --url https://poc-server.com --header \"Authorization: Bearer token\" |"], [40, "| --input   | Input file with urls            | getJS --input domains.txt |"], [41, "| --output   | The file where to save the output to        | getJS --output output.txt |"], [42, "| --verbose  | Display info of what is going on           | getJS --verbose |"], [43, "| --complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS --complete |"], [44, "| --resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with --complete)   | getJS --complete --resolve |"], [45, "| --nocolors   | Don't color the output   | getJS --nocolors |"], [46, ""], [47, "## Examples"], [48, ""], [49, " ![screenshot](https://poc-server.com/getJS/screenshot_.png)"], [50, ""], [51, ""], [52, "getJS supports stdin data. To pipe urls to getJS, use the following:"], [53, ""], [54, "```bash"], [55, "$ cat domains.txt | getJS"], [56, "```"], [57, ""], [58, "To save the js files, you can use:"], [59, "```bash"], [60, "$ getJS --complete --url https://poc-server.com | xargs wget"], [62, ""], [63, "If you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):"], [64, "```bash"], [65, "$ getJS --url https://poc-server.com | tojson"], [66, "```"], [67, ""], [68, "To feed urls from a file use:"], [69, "```bash"], [70, "$ getJS --input domains.txt"], [71, "```"], [72, ""], [73, "To save the results to a file, and don't display anything, use:"], [74, "```bash"], [75, "$ getJS --url https://poc-server.com --output results.txt"], [76, "```"], [77, ""], [78, "If you want to have a list of full urls as output use:"], [79, "```bash"], [80, "$ getJS --url domains.txt -complete"], [81, "```"], [82, ""], [83, "If you want to only show the existing js files, use:"], [84, "```bash"], [85, "$ getJS --url domains.txt --complete --resolve"], [86, "```"], [87, ""], [88, "## Built With"], [89, ""], [90, "* [GO](http://golang.org/) - GOlanguage"], [91, "* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO"], [96, "You are free to submit any issues and/or pull requests :)"], [100, "This project is licensed under the MIT License."], [101, ""], [102, "## Acknowledgments"], [103, ""], [104, "* [@jimen0](https://github.com/jimen0) for helping getting me started with GO"], [105, ""], [106, ""], [107, "---"], [108, ""], [109, "*This is my first tool written in GO. I created it to learn the language more. (useful feeback is always welcome!)*"]]}, "added_lines": 123, "deleted_lines": 91, "source_code": "<h2 align=\"center\">JavaScript Extraction CLI & Package</h2>\n<p align=\"center\">\n  <a href=\"https://pkg.go.dev/github.com/003random/getJS\">\n    <img src=\"https://pkg.go.dev/badge/github.com/003random/getJS\">\n  </a>\n  <a href=\"https://github.com/003random/getJS/releases\">\n    <img src=\"https://img.shields.io/github/release/003random/getJS.svg\">\n  </a>\n    <a href=\"https://github.com/003random/getJS/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/badge/license-MIT-blue.svg\">\n  </a>\n</p>\n\n\n[getJS](https://github.com/003random/getJS) is a versatile tool designed to extract JavaScript sources from web pages. It offers both a command-line interface (CLI) for straightforward URL processing and a package interface for more customized integrations.\n\n## Table of Contents\n\n- [Installation](#installation)\n- [CLI Usage](#cli-usage)\n  - [Options](#options)\n  - [Examples](#examples)\n- [Package Usage](#package-usage)\n  - [Importing the Extractor](#importing-the-extractor)\n  - [Example](#example)\n- [Version Information](#version-information)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\nTo install `getJS`, use the following command:\n\n`go get github.com/003random/getJS`\n\n## CLI Usage\n\n### Options\n\n`getJS` provides several command-line options to customize its behavior:\n\n- `-url string`: The URL from which JavaScript sources should be extracted.\n- `-input string`: Optional URLs input files. Each URL should be on a new line in plain text format. Can be used multiple times.\n- `-output string`: Optional output file where results are written to. Can be used multiple times.\n- `-complete`: Complete/Autofill relative URLs by adding the current origin.\n- `-resolve`: Resolve the JavaScript files. Can only be used in combination with `--complete`.\n- `-threads int`: The number of processing threads to spawn (default: 2).\n- `-verbose`: Print verbose runtime information and errors.\n- `-method string`: The request method used to fetch remote contents (default: \"GET\").\n- `-header string`: Optional request headers to add to the requests. Can be used multiple times.\n- `-timeout duration`: The request timeout while fetching remote contents (default: 5s).\n\n### Examples\n\n#### Extracting JavaScript from a Single URL\n\n`getJS -url https://destroy.ai`\n\nor \n\n`curl https://destroy.ai | getJS`\n\n#### Using Custom Request Options\n\n`getJS -url \"http://example.com\" -header \"User-Agent: foo bar\" -method POST --timeout=15s`\n\n#### Processing Multiple URLs from a File\n\n`getJS -input foo.txt -input bar.txt`\n\n#### Saving Results to an Output File\n\n`getJS -url \"http://example.com\" -output results.txt`\n\n## Package Usage\n\n### Importing the Extractor\n\nTo use `getJS` as a package, you need to import the `extractor` package and utilize its functions directly.\n\n### Example\n\n```Go\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n\n    \"github.com/003random/getJS/extractor\"\n)\n\nfunc main() {\n    baseURL, err := url.Parse(\"https://google.com\")\n    if (err != nil) {\n        log.Fatalf(\"Error parsing base URL: %v\", err)\n    }\n\n    resp, err := extractor.FetchResponse(baseURL.String(), \"GET\", http.Header{})\n    if (err != nil) {\n        log.Fatalf(\"Error fetching response: %v\", err)\n    }\n    defer resp.Body.Close()\n\n    // Custom extraction points (optional).\n    extractionPoints := map[string][]string{\n        \"script\": {\"src\", \"data-src\"},\n        \"a\": {\"href\"},\n    }\n\n    sources, err := extractor.ExtractSources(resp.Body, extractionPoints)\n    if (err != nil) {\n        log.Fatalf(\"Error extracting sources: %v\", err)\n    }\n\n    // Filtering and extending extracted sources.\n    filtered, err := extractor.Filter(sources, extractor.WithComplete(baseURL), extractor.WithResolve())\n    if (err != nil) {\n        log.Fatalf(\"Error filtering sources: %v\", err)\n    }\n\n    for source := range filtered {\n        fmt.Println(source.String())\n    }\n}\n```\n\n## Version Information\n\nThis is the v2 version of `getJS`. The original version can be found under the tag [v1](https://github.com/003random/getJS/tree/v1).\n\n## Contributing\n\nContributions are welcome! Please open an issue or submit a pull request for any bugs, feature requests, or improvements.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](https://github.com/003random/getJS/blob/master/LICENSE) file for details.\n", "source_code_before": "# GetJS\n[![License](https://img.shields.io/badge/license-MIT-_red.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/003random/getJS/issues)\n\ngetJS is a tool to extract all the javascript files from a set of given urls.  \n\nThe urls can also be piped to getJS, or you can specify a singel url with the -url argument. getJS offers a range of options, \n\nvarying from completing the urls, to resolving the files.\n\n## Prerequisites\n\nMake sure you have [GO](https://golang.org/) installed on your system.  \n\n### Installing\n\ngetJS is written in GO. You can install it with `go get`:\n\n```\ngo install github.com/003random/getJS@latest\n```\n\n# Usage  \nNote: When you supply urls from different sources, e.g. with stdin and an input file, it will add all the urls together :)  \nExample: `echo \"https://github.com\" | getJS --url https://example.com --input domains.txt`  \n  \nTo get all  options, do:  \n```bash\ngetJS -h\n```\n  \n\n| Flag | Description | Example |\n|------|-------------|---------|\n| --url   | The url to get the javascript sources from | getJS --url https://poc-server.com |\n| --method   | The request method. e.g. POST or GET. Default: \"GET\"| getJS --url https://poc-server.com --method POST |\n| --timeout   | The request timeout. Default: 10 (secs) | getJS --url https://poc-server.com --timeout 15 |\n| --insecure   | Skip SSL certificate verification. Use when the cert is expired or invalid | getJS --url https://poc-server.com --insecure |\n| --header   | Custom request header(s) | getJS --url https://poc-server.com --header \"Authorization: Bearer token\" |\n| --input   | Input file with urls            | getJS --input domains.txt |\n| --output   | The file where to save the output to        | getJS --output output.txt |\n| --verbose  | Display info of what is going on           | getJS --verbose |\n| --complete  | Complete the urls. e.g. /js/index.js -> htt<span></span>ps://example.<span></span>com/js/index.js  | getJS --complete |\n| --resolve   | Resolve the output and filter out the non existing files (Can only be used in combination with --complete)   | getJS --complete --resolve |\n| --nocolors   | Don't color the output   | getJS --nocolors |\n\n## Examples  \n  \n ![screenshot](https://poc-server.com/getJS/screenshot_.png)\n\n    \ngetJS supports stdin data. To pipe urls to getJS, use the following:  \n\n```bash\n$ cat domains.txt | getJS\n```  \n  \nTo save the js files, you can use:  \n```bash\n$ getJS --complete --url https://poc-server.com | xargs wget\n```\n  \nIf you would like the output to be in JSON format, you can combine it with [@Tomnomnom's](https://github.com/tomnomnom) [toJSON](https://github.com/tomnomnom/hacks/tree/master/tojson):  \n```bash\n$ getJS --url https://poc-server.com | tojson\n```  \n  \nTo feed urls from a file use:  \n```bash\n$ getJS --input domains.txt\n```  \n  \nTo save the results to a file, and don't display anything, use:  \n```bash\n$ getJS --url https://poc-server.com --output results.txt\n```  \n  \nIf you want to have a list of full urls as output use:  \n```bash\n$ getJS --url domains.txt -complete\n```  \n  \nIf you want to only show the existing js files, use:  \n```bash\n$ getJS --url domains.txt --complete --resolve\n```  \n\n## Built With\n\n* [GO](http://golang.org/) - GOlanguage\n* [Goquery](https://github.com/PuerkitoBio/goquery) - HTML parser with syntaxes like jquery, in GO\n\n\n## Contributing\n\nYou are free to submit any issues and/or pull requests :)\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n* [@jimen0](https://github.com/jimen0) for helping getting me started with GO\n  \n    \n---\n    \n*This is my first tool written in GO. I created it to learn the language more. (useful feeback is always welcome!)*\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}, {"old_path": null, "new_path": "extractor/extractor.go", "filename": "extractor.go", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,133 @@\n+package extractor\n+\n+import (\n+\t\"fmt\"\n+\t\"io\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"net/url\"\n+\n+\t\"github.com/PuerkitoBio/goquery\"\n+)\n+\n+// ExtractionPoints defines the default HTML tags and their attributes from which JavaScript sources are extracted.\n+var ExtractionPoints = map[string][]string{\n+\t\"script\": {\"src\", \"data-src\"},\n+}\n+\n+// FetchResponse fetches the HTTP response for the given URL.\n+func FetchResponse(u string, method string, headers http.Header) (*http.Response, error) {\n+\treq, err := http.NewRequest(method, u, nil)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treq.Header = headers\n+\n+\treturn http.DefaultClient.Do(req)\n+}\n+\n+// ExtractSources extracts all JavaScript sources found in the provided HTTP response reader.\n+// The optional extractionPoints can be used to overwrite the default extraction points map\n+// with a set of HTML tag names, together with a list of what attributes to extract from.\n+func ExtractSources(input io.Reader, extractionPoints ...map[string][]string) (<-chan url.URL, error) {\n+\tdoc, err := goquery.NewDocumentFromReader(input)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tvar (\n+\t\turls   = make(chan url.URL)\n+\t\tpoints = ExtractionPoints\n+\t)\n+\n+\tif len(extractionPoints) > 0 {\n+\t\tpoints = extractionPoints[0]\n+\t}\n+\n+\tgo func() {\n+\t\tdefer close(urls)\n+\t\tfor tag, attributes := range points {\n+\t\t\tdoc.Find(tag).Each(func(i int, s *goquery.Selection) {\n+\t\t\t\tfor _, a := range attributes {\n+\t\t\t\t\tif value, exists := s.Attr(a); exists {\n+\t\t\t\t\t\tu, err := url.Parse(value)\n+\t\t\t\t\t\tif err != nil {\n+\t\t\t\t\t\t\tlog.Println(fmt.Errorf(\"invalid attribute value %s cannot be parsed to a URL: %w\", value, err))\n+\t\t\t\t\t\t\tcontinue\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\turls <- *u\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t})\n+\t\t}\n+\t}()\n+\n+\treturn urls, nil\n+}\n+\n+// Filter applies options to filter URLs from the input channel.\n+func Filter(input <-chan url.URL, options ...func([]url.URL) []url.URL) (<-chan url.URL, error) {\n+\toutput := make(chan url.URL)\n+\tgo func() {\n+\t\tdefer close(output)\n+\t\tvar urls []url.URL\n+\t\tfor u := range input {\n+\t\t\turls = append(urls, u)\n+\t\t}\n+\n+\t\tfor _, option := range options {\n+\t\t\turls = option(urls)\n+\t\t}\n+\n+\t\tfor _, u := range urls {\n+\t\t\toutput <- u\n+\t\t}\n+\t}()\n+\treturn output, nil\n+}\n+\n+// WithComplete is an option to complete relative URLs.\n+func WithComplete(base *url.URL) func([]url.URL) []url.URL {\n+\treturn func(urls []url.URL) []url.URL {\n+\t\tvar result []url.URL\n+\t\tfor _, u := range urls {\n+\t\t\tresult = append(result, complete(u, base))\n+\t\t}\n+\t\treturn result\n+\t}\n+}\n+\n+// WithResolve is an option to filter URLs that resolve successfully.\n+func WithResolve() func([]url.URL) []url.URL {\n+\treturn func(urls []url.URL) []url.URL {\n+\t\tvar result []url.URL\n+\t\tfor _, u := range urls {\n+\t\t\tif resolve(u) {\n+\t\t\t\tresult = append(result, u)\n+\t\t\t}\n+\t\t}\n+\t\treturn result\n+\t}\n+}\n+\n+// complete completes relative URLs by adding the base URL.\n+func complete(source url.URL, base *url.URL) url.URL {\n+\tif source.IsAbs() {\n+\t\treturn source\n+\t}\n+\treturn *base.ResolveReference(&source)\n+}\n+\n+// resolve checks if the provided URL resolves successfully.\n+func resolve(source url.URL) bool {\n+\tresp, err := http.Get(source.String())\n+\tif err != nil {\n+\t\treturn false\n+\t}\n+\tdefer resp.Body.Close()\n+\n+\t_, err = io.Copy(io.Discard, resp.Body)\n+\treturn err == nil && (resp.StatusCode >= http.StatusOK && resp.StatusCode < http.StatusMultipleChoices)\n+}\n", "diff_parsed": {"added": [[1, "package extractor"], [2, ""], [3, "import ("], [4, "\t\"fmt\""], [5, "\t\"io\""], [6, "\t\"log\""], [7, "\t\"net/http\""], [8, "\t\"net/url\""], [9, ""], [10, "\t\"github.com/PuerkitoBio/goquery\""], [11, ")"], [12, ""], [13, "// ExtractionPoints defines the default HTML tags and their attributes from which JavaScript sources are extracted."], [14, "var ExtractionPoints = map[string][]string{"], [15, "\t\"script\": {\"src\", \"data-src\"},"], [16, "}"], [17, ""], [18, "// FetchResponse fetches the HTTP response for the given URL."], [19, "func FetchResponse(u string, method string, headers http.Header) (*http.Response, error) {"], [20, "\treq, err := http.NewRequest(method, u, nil)"], [21, "\tif err != nil {"], [22, "\t\treturn nil, err"], [23, "\t}"], [24, ""], [25, "\treq.Header = headers"], [26, ""], [27, "\treturn http.DefaultClient.Do(req)"], [28, "}"], [29, ""], [30, "// ExtractSources extracts all JavaScript sources found in the provided HTTP response reader."], [31, "// The optional extractionPoints can be used to overwrite the default extraction points map"], [32, "// with a set of HTML tag names, together with a list of what attributes to extract from."], [33, "func ExtractSources(input io.Reader, extractionPoints ...map[string][]string) (<-chan url.URL, error) {"], [34, "\tdoc, err := goquery.NewDocumentFromReader(input)"], [35, "\tif err != nil {"], [36, "\t\treturn nil, err"], [37, "\t}"], [38, ""], [39, "\tvar ("], [40, "\t\turls   = make(chan url.URL)"], [41, "\t\tpoints = ExtractionPoints"], [42, "\t)"], [43, ""], [44, "\tif len(extractionPoints) > 0 {"], [45, "\t\tpoints = extractionPoints[0]"], [46, "\t}"], [47, ""], [48, "\tgo func() {"], [49, "\t\tdefer close(urls)"], [50, "\t\tfor tag, attributes := range points {"], [51, "\t\t\tdoc.Find(tag).Each(func(i int, s *goquery.Selection) {"], [52, "\t\t\t\tfor _, a := range attributes {"], [53, "\t\t\t\t\tif value, exists := s.Attr(a); exists {"], [54, "\t\t\t\t\t\tu, err := url.Parse(value)"], [55, "\t\t\t\t\t\tif err != nil {"], [56, "\t\t\t\t\t\t\tlog.Println(fmt.Errorf(\"invalid attribute value %s cannot be parsed to a URL: %w\", value, err))"], [57, "\t\t\t\t\t\t\tcontinue"], [58, "\t\t\t\t\t\t}"], [59, ""], [60, "\t\t\t\t\t\turls <- *u"], [61, "\t\t\t\t\t}"], [62, "\t\t\t\t}"], [63, "\t\t\t})"], [64, "\t\t}"], [65, "\t}()"], [66, ""], [67, "\treturn urls, nil"], [68, "}"], [69, ""], [70, "// Filter applies options to filter URLs from the input channel."], [71, "func Filter(input <-chan url.URL, options ...func([]url.URL) []url.URL) (<-chan url.URL, error) {"], [72, "\toutput := make(chan url.URL)"], [73, "\tgo func() {"], [74, "\t\tdefer close(output)"], [75, "\t\tvar urls []url.URL"], [76, "\t\tfor u := range input {"], [77, "\t\t\turls = append(urls, u)"], [78, "\t\t}"], [79, ""], [80, "\t\tfor _, option := range options {"], [81, "\t\t\turls = option(urls)"], [82, "\t\t}"], [83, ""], [84, "\t\tfor _, u := range urls {"], [85, "\t\t\toutput <- u"], [86, "\t\t}"], [87, "\t}()"], [88, "\treturn output, nil"], [89, "}"], [90, ""], [91, "// WithComplete is an option to complete relative URLs."], [92, "func WithComplete(base *url.URL) func([]url.URL) []url.URL {"], [93, "\treturn func(urls []url.URL) []url.URL {"], [94, "\t\tvar result []url.URL"], [95, "\t\tfor _, u := range urls {"], [96, "\t\t\tresult = append(result, complete(u, base))"], [97, "\t\t}"], [98, "\t\treturn result"], [99, "\t}"], [100, "}"], [101, ""], [102, "// WithResolve is an option to filter URLs that resolve successfully."], [103, "func WithResolve() func([]url.URL) []url.URL {"], [104, "\treturn func(urls []url.URL) []url.URL {"], [105, "\t\tvar result []url.URL"], [106, "\t\tfor _, u := range urls {"], [107, "\t\t\tif resolve(u) {"], [108, "\t\t\t\tresult = append(result, u)"], [109, "\t\t\t}"], [110, "\t\t}"], [111, "\t\treturn result"], [112, "\t}"], [113, "}"], [114, ""], [115, "// complete completes relative URLs by adding the base URL."], [116, "func complete(source url.URL, base *url.URL) url.URL {"], [117, "\tif source.IsAbs() {"], [118, "\t\treturn source"], [119, "\t}"], [120, "\treturn *base.ResolveReference(&source)"], [121, "}"], [122, ""], [123, "// resolve checks if the provided URL resolves successfully."], [124, "func resolve(source url.URL) bool {"], [125, "\tresp, err := http.Get(source.String())"], [126, "\tif err != nil {"], [127, "\t\treturn false"], [128, "\t}"], [129, "\tdefer resp.Body.Close()"], [130, ""], [131, "\t_, err = io.Copy(io.Discard, resp.Body)"], [132, "\treturn err == nil && (resp.StatusCode >= http.StatusOK && resp.StatusCode < http.StatusMultipleChoices)"], [133, "}"]], "deleted": []}, "added_lines": 133, "deleted_lines": 0, "source_code": "package extractor\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n)\n\n// ExtractionPoints defines the default HTML tags and their attributes from which JavaScript sources are extracted.\nvar ExtractionPoints = map[string][]string{\n\t\"script\": {\"src\", \"data-src\"},\n}\n\n// FetchResponse fetches the HTTP response for the given URL.\nfunc FetchResponse(u string, method string, headers http.Header) (*http.Response, error) {\n\treq, err := http.NewRequest(method, u, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treq.Header = headers\n\n\treturn http.DefaultClient.Do(req)\n}\n\n// ExtractSources extracts all JavaScript sources found in the provided HTTP response reader.\n// The optional extractionPoints can be used to overwrite the default extraction points map\n// with a set of HTML tag names, together with a list of what attributes to extract from.\nfunc ExtractSources(input io.Reader, extractionPoints ...map[string][]string) (<-chan url.URL, error) {\n\tdoc, err := goquery.NewDocumentFromReader(input)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar (\n\t\turls   = make(chan url.URL)\n\t\tpoints = ExtractionPoints\n\t)\n\n\tif len(extractionPoints) > 0 {\n\t\tpoints = extractionPoints[0]\n\t}\n\n\tgo func() {\n\t\tdefer close(urls)\n\t\tfor tag, attributes := range points {\n\t\t\tdoc.Find(tag).Each(func(i int, s *goquery.Selection) {\n\t\t\t\tfor _, a := range attributes {\n\t\t\t\t\tif value, exists := s.Attr(a); exists {\n\t\t\t\t\t\tu, err := url.Parse(value)\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\tlog.Println(fmt.Errorf(\"invalid attribute value %s cannot be parsed to a URL: %w\", value, err))\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\turls <- *u\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}()\n\n\treturn urls, nil\n}\n\n// Filter applies options to filter URLs from the input channel.\nfunc Filter(input <-chan url.URL, options ...func([]url.URL) []url.URL) (<-chan url.URL, error) {\n\toutput := make(chan url.URL)\n\tgo func() {\n\t\tdefer close(output)\n\t\tvar urls []url.URL\n\t\tfor u := range input {\n\t\t\turls = append(urls, u)\n\t\t}\n\n\t\tfor _, option := range options {\n\t\t\turls = option(urls)\n\t\t}\n\n\t\tfor _, u := range urls {\n\t\t\toutput <- u\n\t\t}\n\t}()\n\treturn output, nil\n}\n\n// WithComplete is an option to complete relative URLs.\nfunc WithComplete(base *url.URL) func([]url.URL) []url.URL {\n\treturn func(urls []url.URL) []url.URL {\n\t\tvar result []url.URL\n\t\tfor _, u := range urls {\n\t\t\tresult = append(result, complete(u, base))\n\t\t}\n\t\treturn result\n\t}\n}\n\n// WithResolve is an option to filter URLs that resolve successfully.\nfunc WithResolve() func([]url.URL) []url.URL {\n\treturn func(urls []url.URL) []url.URL {\n\t\tvar result []url.URL\n\t\tfor _, u := range urls {\n\t\t\tif resolve(u) {\n\t\t\t\tresult = append(result, u)\n\t\t\t}\n\t\t}\n\t\treturn result\n\t}\n}\n\n// complete completes relative URLs by adding the base URL.\nfunc complete(source url.URL, base *url.URL) url.URL {\n\tif source.IsAbs() {\n\t\treturn source\n\t}\n\treturn *base.ResolveReference(&source)\n}\n\n// resolve checks if the provided URL resolves successfully.\nfunc resolve(source url.URL) bool {\n\tresp, err := http.Get(source.String())\n\tif err != nil {\n\t\treturn false\n\t}\n\tdefer resp.Body.Close()\n\n\t_, err = io.Copy(io.Discard, resp.Body)\n\treturn err == nil && (resp.StatusCode >= http.StatusOK && resp.StatusCode < http.StatusMultipleChoices)\n}\n", "source_code_before": null, "methods": [{"name": "FetchResponse", "start_line": 19, "end_line": 28}, {"name": "", "start_line": 51, "end_line": 63}, {"name": "", "start_line": 48, "end_line": 65}, {"name": "ExtractSources", "start_line": 33, "end_line": 68}, {"name": "", "start_line": 73, "end_line": 87}, {"name": "Filter", "start_line": 71, "end_line": 89}, {"name": "", "start_line": 93, "end_line": 99}, {"name": "WithComplete", "start_line": 92, "end_line": 100}, {"name": "", "start_line": 104, "end_line": 112}, {"name": "WithResolve", "start_line": 103, "end_line": 113}, {"name": "complete", "start_line": 116, "end_line": 121}, {"name": "resolve", "start_line": 124, "end_line": 133}], "methods_before": [], "changed_methods": [{"name": "WithComplete", "start_line": 92, "end_line": 100}, {"name": "", "start_line": 51, "end_line": 63}, {"name": "Filter", "start_line": 71, "end_line": 89}, {"name": "", "start_line": 48, "end_line": 65}, {"name": "resolve", "start_line": 124, "end_line": 133}, {"name": "WithResolve", "start_line": 103, "end_line": 113}, {"name": "complete", "start_line": 116, "end_line": 121}, {"name": "ExtractSources", "start_line": 33, "end_line": 68}, {"name": "", "start_line": 93, "end_line": 99}, {"name": "FetchResponse", "start_line": 19, "end_line": 28}], "nloc": 103, "complexity": 29, "token_count": 656}, {"old_path": null, "new_path": "go.mod", "filename": "go.mod", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,10 @@\n+module github.com/003random/getJS/v2\n+\n+go 1.22\n+\n+require github.com/PuerkitoBio/goquery v1.8.1\n+\n+require (\n+\tgithub.com/andybalholm/cascadia v1.3.1 // indirect\n+\tgolang.org/x/net v0.7.0 // indirect\n+)\n", "diff_parsed": {"added": [[1, "module github.com/003random/getJS/v2"], [2, ""], [3, "go 1.22"], [4, ""], [5, "require github.com/PuerkitoBio/goquery v1.8.1"], [6, ""], [7, "require ("], [8, "\tgithub.com/andybalholm/cascadia v1.3.1 // indirect"], [9, "\tgolang.org/x/net v0.7.0 // indirect"], [10, ")"]], "deleted": []}, "added_lines": 10, "deleted_lines": 0, "source_code": "module github.com/003random/getJS/v2\n\ngo 1.22\n\nrequire github.com/PuerkitoBio/goquery v1.8.1\n\nrequire (\n\tgithub.com/andybalholm/cascadia v1.3.1 // indirect\n\tgolang.org/x/net v0.7.0 // indirect\n)\n", "source_code_before": null, "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}, {"old_path": null, "new_path": "go.sum", "filename": "go.sum", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,35 @@\n+github.com/PuerkitoBio/goquery v1.8.1 h1:uQxhNlArOIdbrH1tr0UXwdVFgDcZDrZVdcpygAcwmWM=\n+github.com/PuerkitoBio/goquery v1.8.1/go.mod h1:Q8ICL1kNUJ2sXGoAhPGUdYDJvgQgHzJsnnd3H7Ho5jQ=\n+github.com/andybalholm/cascadia v1.3.1 h1:nhxRkql1kdYCc8Snf7D5/D3spOX+dBgjA6u8x004T2c=\n+github.com/andybalholm/cascadia v1.3.1/go.mod h1:R4bJ1UQfqADjvDa4P6HZHLh/3OxWWEqc0Sk8XGwHqvA=\n+github.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\n+golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\n+golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\n+golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\n+golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n+golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\n+golang.org/x/net v0.0.0-20210916014120-12bc252f5db8/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\n+golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\n+golang.org/x/net v0.7.0 h1:rJrUqqhjsgNp7KqAIc25s9pZnjU7TUcSY7HcVZjdn1g=\n+golang.org/x/net v0.7.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\n+golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n+golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n+golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\n+golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n+golang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n+golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n+golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n+golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n+golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n+golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\n+golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\n+golang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\n+golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\n+golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\n+golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\n+golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\n+golang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\n+golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\n+golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\n+golang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\n+golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\n", "diff_parsed": {"added": [[1, "github.com/PuerkitoBio/goquery v1.8.1 h1:uQxhNlArOIdbrH1tr0UXwdVFgDcZDrZVdcpygAcwmWM="], [2, "github.com/PuerkitoBio/goquery v1.8.1/go.mod h1:Q8ICL1kNUJ2sXGoAhPGUdYDJvgQgHzJsnnd3H7Ho5jQ="], [3, "github.com/andybalholm/cascadia v1.3.1 h1:nhxRkql1kdYCc8Snf7D5/D3spOX+dBgjA6u8x004T2c="], [4, "github.com/andybalholm/cascadia v1.3.1/go.mod h1:R4bJ1UQfqADjvDa4P6HZHLh/3OxWWEqc0Sk8XGwHqvA="], [5, "github.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY="], [6, "golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w="], [7, "golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc="], [8, "golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4="], [9, "golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s="], [10, "golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg="], [11, "golang.org/x/net v0.0.0-20210916014120-12bc252f5db8/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y="], [12, "golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c="], [13, "golang.org/x/net v0.7.0 h1:rJrUqqhjsgNp7KqAIc25s9pZnjU7TUcSY7HcVZjdn1g="], [14, "golang.org/x/net v0.7.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs="], [15, "golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM="], [16, "golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM="], [17, "golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY="], [18, "golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs="], [19, "golang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs="], [20, "golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg="], [21, "golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg="], [22, "golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg="], [23, "golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg="], [24, "golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo="], [25, "golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8="], [26, "golang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k="], [27, "golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ="], [28, "golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ="], [29, "golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ="], [30, "golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ="], [31, "golang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8="], [32, "golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ="], [33, "golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo="], [34, "golang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc="], [35, "golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0="]], "deleted": []}, "added_lines": 35, "deleted_lines": 0, "source_code": "github.com/PuerkitoBio/goquery v1.8.1 h1:uQxhNlArOIdbrH1tr0UXwdVFgDcZDrZVdcpygAcwmWM=\ngithub.com/PuerkitoBio/goquery v1.8.1/go.mod h1:Q8ICL1kNUJ2sXGoAhPGUdYDJvgQgHzJsnnd3H7Ho5jQ=\ngithub.com/andybalholm/cascadia v1.3.1 h1:nhxRkql1kdYCc8Snf7D5/D3spOX+dBgjA6u8x004T2c=\ngithub.com/andybalholm/cascadia v1.3.1/go.mod h1:R4bJ1UQfqADjvDa4P6HZHLh/3OxWWEqc0Sk8XGwHqvA=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210916014120-12bc252f5db8/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.7.0 h1:rJrUqqhjsgNp7KqAIc25s9pZnjU7TUcSY7HcVZjdn1g=\ngolang.org/x/net v0.7.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\n", "source_code_before": null, "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}, {"old_path": "main.go", "new_path": "main.go", "filename": "main.go", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -2,297 +2,152 @@ package main\n \n import (\n \t\"bufio\"\n-\t\"crypto/tls\"\n+\t\"flag\"\n \t\"fmt\"\n \t\"io\"\n+\t\"log\"\n \t\"net/http\"\n-\t\"net/url\"\n \t\"os\"\n \t\"strings\"\n \t\"time\"\n \n-\t\"github.com/PuerkitoBio/goquery\"\n-\t\"github.com/logrusorgru/aurora\"\n-\tflag \"github.com/spf13/pflag\"\n+\t\"github.com/003random/getJS/v2/runner\"\n )\n \n-type logger interface {\n-\tLog(msg string)\n-\tError(msg string, err error)\n-}\n-\n-type silent struct{}\n-\n-func (s silent) Log(msg string) {\n-}\n-\n-func (s silent) Error(msg string, err error) {\n-}\n-\n-type verbose struct {\n-}\n+func main() {\n+\toptions, err := setup()\n+\tif err != nil {\n+\t\tlog.Fatal(fmt.Errorf(\"parsing flags: %w\", err))\n+\t}\n \n-func (v verbose) Log(msg string) {\n-\tfmt.Println(au.Cyan(msg))\n+\tif err := runner.New(options).Run(); err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n }\n \n-func Log(l logger, msg string) {\n-\tl.Log(msg)\n-}\n+func setup() (options *runner.Options, err error) {\n+\toptions = &runner.Options{}\n \n-func (v verbose) Error(msg string, err error) {\n-\tfmt.Fprintln(os.Stderr, au.Red(msg))\n-\tif err != nil {\n-\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n-\t}\n-}\n+\tflag.StringVar(&options.Request.Method, \"method\", \"GET\", \"The request method that should be used to make fetch the remote contents.\")\n+\tflag.DurationVar(&options.Request.Timeout, \"timeout\", 5*time.Second, \"The request timeout used while fetching the remote contents.\")\n+\tflag.BoolVar(&options.Complete, \"complete\", false, \"Complete/Autofil relative URLs by adding the current origin.\")\n+\tflag.BoolVar(&options.Resolve, \"resolve\", false, \"Resolve the JavaScript files. Can only be used in combination with '--resolve'. Unresolvable hosts are not included in the results.\")\n+\tflag.IntVar(&options.Threads, \"threads\", 2, \"The amount of processing threads to spawn.\")\n+\tflag.BoolVar(&options.Verbose, \"verbose\", false, \"Print verbose runtime information and errors.\")\n \n-func Error(l logger, msg string, err error) {\n-\tl.Error(msg, err)\n-}\n+\tvar (\n+\t\turl    string\n+\t\tinput  arrayFlags\n+\t\toutput arrayFlags\n+\t\theader arrayFlags\n+\t)\n \n-var output logger\n-var au aurora.Aurora\n+\tflag.Var(&header, \"header\", \"The optional request headers to add to the requests. This flag can be used multiple times with a new header each time.\")\n+\tflag.StringVar(&url, \"url\", \"\", \"The URL where the JavaScript sources should be extracted from.\")\n+\tflag.Var(&input, \"input\", \"The optional URLs input files. Each URL should be on a new line in plain text format. This flag can be used multiple times with different files.\")\n+\tflag.Var(&output, \"output\", \"The optional output file where the results are written to.\")\n \n-func main() {\n-\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n-\tmethodArg := flag.String(\"method\", \"GET\", \"The request method. e.g. GET or POST\")\n-\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n-\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n-\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n-\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n-\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n-\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n-\tHeaderArg := flag.StringArrayP(\"header\", \"H\", nil, \"Any HTTP headers(-H \\\"Authorization:Bearer token\\\")\")\n-\tinsecureArg := flag.Bool(\"insecure\", false, \"Check the SSL security checks. Use when the certificate is expired or invalid\")\n-\ttimeoutArg := flag.Int(\"timeout\", 10, \"Max timeout for the requests\")\n \tflag.Parse()\n \n-\tau = aurora.NewAurora(!*noColorsArg)\n-\n-\tvar urls []string\n-\tvar allSources []string\n+\toptions.Request.Headers = headers(header)\n \n-\toutput = silent{}\n+\toptions.Inputs = inputs(input)\n+\toptions.Outputs = outputs(output)\n \n-\tif *verboseArg {\n-\t\toutput = verbose{}\n+\t// Add an input for the single URL option, if set.\n+\tif len(url) > 0 {\n+\t\toptions.Inputs = append(options.Inputs, runner.Input{\n+\t\t\tType: runner.InputURL,\n+\t\t\tData: strings.NewReader(url),\n+\t\t})\n \t}\n \n \tstat, err := os.Stdin.Stat()\n \tif err != nil {\n-\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n+\t\tlog.Fatal(fmt.Errorf(\"error reading stdin: %v\", err))\n \t}\n \n \tif (stat.Mode() & os.ModeCharDevice) == 0 {\n-\t\tscanner := bufio.NewScanner(os.Stdin)\n-\t\tfor scanner.Scan() {\n-\t\t\turls = append(urls, scanner.Text())\n+\t\t// Read the first line of stdin to detect its format\n+\t\treader := bufio.NewReader(os.Stdin)\n+\t\tfirstLine, err := reader.ReadString('\\n')\n+\t\tif err != nil && err != io.EOF {\n+\t\t\tlog.Fatal(fmt.Errorf(\"error reading first line of stdin: %v\", err))\n \t\t}\n-\t\tif err := scanner.Err(); err != nil {\n-\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n-\t\t}\n-\t\tif len(urls) > 0 {\n-\t\t\toutput.Log(\"[+] Received urls from Stdin\")\n-\t\t}\n-\t}\n \n-\tif *inputFileArg != \"\" {\n-\t\tf, err := os.Open(*inputFileArg)\n-\t\tif err != nil {\n-\t\t\toutput.Error(\"[!] Couldn't open input file\", err)\n-\t\t\treturn\n+\t\tif isURL(strings.TrimSpace(firstLine)) {\n+\t\t\t// Treat as URL input.\n+\t\t\toptions.Inputs = append(options.Inputs, runner.Input{\n+\t\t\t\tType: runner.InputURL,\n+\t\t\t\tData: io.MultiReader(strings.NewReader(firstLine), reader),\n+\t\t\t})\n+\t\t} else {\n+\t\t\t// Treat as HTTP response body.\n+\t\t\toptions.Inputs = append(options.Inputs, runner.Input{\n+\t\t\t\tType: runner.InputResponse,\n+\t\t\t\tData: io.MultiReader(strings.NewReader(firstLine), reader),\n+\t\t\t})\n \t\t}\n-\t\tdefer f.Close()\n-\n-\t\tlines, err := readLines(f)\n-\t\tif err != nil {\n-\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)\n-\t\t}\n-\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)\n-\t\turls = append(urls, lines...)\n \t}\n \n-\tif *urlArg != \"\" {\n-\t\toutput.Log(fmt.Sprintf(\"[+] Set url to %s\", *urlArg))\n-\t\turls = append(urls, *urlArg)\n-\t}\n+\treturn\n+}\n \n-\tif len(urls) == 0 {\n-\t\toutput.Error(\"[!] No urls supplied\", nil)\n-\t\tos.Exit(3)\n-\t}\n+func isURL(str string) bool {\n+\treturn strings.HasPrefix(str, \"http://\") || strings.HasPrefix(str, \"https://\")\n+}\n \n-\tif *resolveArg && !*completeArg {\n-\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n-\t\tos.Exit(3)\n-\t}\n+func outputs(names []string) []io.Writer {\n+\toutputs := append([]io.Writer{}, os.Stdout)\n \n-\tfor _, e := range urls {\n-\t\tvar sourcesBak []string\n-\t\tvar completedSuccessfully = true\n-\t\toutput.Log(\"[+] Getting sources from \" + e)\n-\t\tsources, err := getScriptSrc(e, *methodArg, *HeaderArg, *insecureArg, *timeoutArg)\n+\tfor _, n := range names {\n+\t\tfile, err := os.OpenFile(n, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0o644)\n \t\tif err != nil {\n-\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't get sources from %s\", e), err)\n-\t\t}\n-\n-\t\tif *completeArg {\n-\t\t\toutput.Log(\"[+] Completing URLs\")\n-\t\t\tsourcesBak = sources\n-\t\t\tsources, err = completeUrls(sources, e)\n-\t\t\tif err != nil {\n-\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)\n-\t\t\t\tsources = sourcesBak\n-\t\t\t\tcompletedSuccessfully = false\n-\t\t\t}\n+\t\t\tlog.Fatal(fmt.Errorf(\"error parsing output file flag: %v\", err))\n \t\t}\n \n-\t\tif *resolveArg && *completeArg {\n-\t\t\tif completedSuccessfully {\n-\t\t\t\toutput.Log(\"[+] Resolving files\")\n-\t\t\t\tsourcesBak = sources\n-\t\t\t\tsources, err = resolveUrls(sources)\n-\t\t\t\tif err != nil {\n-\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)\n-\t\t\t\t\tsources = sourcesBak\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)\n-\t\t\t}\n-\t\t} else if *resolveArg {\n-\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n-\t\t}\n-\n-\t\tfor _, i := range sources {\n-\t\t\tfmt.Println(i)\n-\t\t}\n+\t\toutputs = append(outputs, file)\n+\t}\n \n-\t\tif *outputFileArg != \"\" {\n-\t\t\tallSources = append(allSources, sources...)\n-\t\t}\n+\treturn outputs\n+}\n \n-\t}\n+func inputs(names []string) []runner.Input {\n+\tinputs := []runner.Input{}\n \n-\t// Save to file\n-\tif *outputFileArg != \"\" {\n-\t\toutput.Log(fmt.Sprintf(\"[+] Saving output to %s\", *outputFileArg))\n-\t\terr := saveToFile(allSources, *outputFileArg)\n+\tfor _, n := range names {\n+\t\tfile, err := os.Open(n)\n \t\tif err != nil {\n-\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't save to output file %s\", *outputFileArg), err)\n+\t\t\tlog.Fatal(fmt.Errorf(\"error reading from file %s: %v\", n, err))\n \t\t}\n-\t}\n \n-}\n-\n-func saveToFile(sources []string, path string) error {\n-\tfile, err := os.Create(path)\n-\tif err != nil {\n-\t\treturn err\n+\t\tinputs = append(inputs, runner.Input{Type: runner.InputURL, Data: file})\n \t}\n-\tdefer file.Close()\n \n-\tw := bufio.NewWriter(file)\n-\tfor _, line := range sources {\n-\t\tfmt.Fprintln(w, line)\n-\t}\n-\treturn w.Flush()\n+\treturn inputs\n }\n \n-func getScriptSrc(url string, method string, headers []string, insecure bool, timeout int) ([]string, error) {\n-\t// Request the HTML page.\n-\treq, err := http.NewRequest(method, url, nil)\n-\tif err != nil {\n-\t\treturn []string{}, err\n-\t}\n-\n-\tfor _, d := range headers {\n-\t\tvalues := strings.Split(d, \":\")\n-\t\tif len(values) == 2 {\n-\t\t\toutput.Log(\"[+] New Header: \" + values[0] + \": \" + values[1])\n-\t\t\treq.Header.Set(values[0], values[1])\n+func headers(args []string) http.Header {\n+\theaders := make(http.Header)\n+\tfor _, s := range args {\n+\t\tparts := strings.Split(s, \":\")\n+\t\tif len(parts) <= 1 {\n+\t\t\tlog.Fatal(fmt.Errorf(\"invalid header %s\", s))\n \t\t}\n-\t}\n-\n-\ttr := &http.Transport{\n-\t\tResponseHeaderTimeout: time.Duration(time.Duration(timeout) * time.Second),\n-\t\tTLSClientConfig:       &tls.Config{InsecureSkipVerify: insecure},\n-\t}\n-\n-\tvar client = &http.Client{\n-\t\tTimeout:   time.Duration(time.Duration(timeout) * time.Second),\n-\t\tTransport: tr,\n-\t}\n-\n-\tres, err := client.Do(req)\n-\tif err != nil {\n-\t\treturn []string{}, err\n-\t}\n-\tdefer res.Body.Close()\n-\tif res.StatusCode != 200 {\n-\t\toutput.Error(fmt.Sprintf(\"[!] %s returned an %d instead of %d\", url, res.StatusCode, http.StatusOK), nil)\n-\t\treturn nil, nil\n-\t}\n \n-\t// Load the HTML document\n-\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n-\tif err != nil {\n-\t\treturn nil, err\n+\t\theaders[strings.TrimSpace(parts[0])] = []string{strings.TrimSpace(strings.Join(parts[1:], \":\"))}\n \t}\n \n-\tvar sources []string\n-\n-\t// Find the script tags, and get the src\n-\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n-\t\tsrc, _ := s.Attr(\"src\")\n-\t\tdsrc, _ := s.Attr(\"data-src\")\n-\t\tif src != \"\" {\n-\t\t\tsources = append(sources, src)\n-\t\t}\n-\t\tif dsrc != \"\" {\n-\t\t\tsources = append(sources, dsrc)\n-\t\t}\n-\t})\n-\n-\treturn sources, nil\n+\treturn headers\n }\n \n-func readLines(r io.Reader) ([]string, error) {\n-\tvar lines []string\n-\tscanner := bufio.NewScanner(r)\n-\tfor scanner.Scan() {\n-\t\tlines = append(lines, scanner.Text())\n-\t}\n-\treturn lines, scanner.Err()\n-}\n+type arrayFlags []string\n \n-func resolveUrls(s []string) ([]string, error) {\n-\tfor i := len(s) - 1; i >= 0; i-- {\n-\t\tresp, err := http.Get(s[i])\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n-\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n-\t\t\ts = append(s[:i], s[i+1:]...)\n-\t\t}\n-\t}\n-\treturn s, nil\n+func (a *arrayFlags) Set(value string) error {\n+\t*a = append(*a, value)\n+\treturn nil\n }\n \n-func completeUrls(s []string, mainUrl string) ([]string, error) {\n-\tu, err := url.Parse(mainUrl)\n-\tif err != nil {\n-\t\treturn nil, err\n-\t}\n-\n-\tfor i := range s {\n-\t\tif strings.HasPrefix(s[i], \"//\") {\n-\t\t\ts[i] = u.Scheme + \":\" + s[i]\n-\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n-\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n-\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n-\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n-\t\t}\n-\t}\n-\treturn s, nil\n+func (a *arrayFlags) String() string {\n+\treturn strings.Join(*a, \",\")\n }\n", "diff_parsed": {"added": [[5, "\t\"flag\""], [8, "\t\"log\""], [14, "\t\"github.com/003random/getJS/v2/runner\""], [17, "func main() {"], [18, "\toptions, err := setup()"], [19, "\tif err != nil {"], [20, "\t\tlog.Fatal(fmt.Errorf(\"parsing flags: %w\", err))"], [21, "\t}"], [23, "\tif err := runner.New(options).Run(); err != nil {"], [24, "\t\tlog.Fatal(err)"], [25, "\t}"], [28, "func setup() (options *runner.Options, err error) {"], [29, "\toptions = &runner.Options{}"], [31, "\tflag.StringVar(&options.Request.Method, \"method\", \"GET\", \"The request method that should be used to make fetch the remote contents.\")"], [32, "\tflag.DurationVar(&options.Request.Timeout, \"timeout\", 5*time.Second, \"The request timeout used while fetching the remote contents.\")"], [33, "\tflag.BoolVar(&options.Complete, \"complete\", false, \"Complete/Autofil relative URLs by adding the current origin.\")"], [34, "\tflag.BoolVar(&options.Resolve, \"resolve\", false, \"Resolve the JavaScript files. Can only be used in combination with '--resolve'. Unresolvable hosts are not included in the results.\")"], [35, "\tflag.IntVar(&options.Threads, \"threads\", 2, \"The amount of processing threads to spawn.\")"], [36, "\tflag.BoolVar(&options.Verbose, \"verbose\", false, \"Print verbose runtime information and errors.\")"], [38, "\tvar ("], [39, "\t\turl    string"], [40, "\t\tinput  arrayFlags"], [41, "\t\toutput arrayFlags"], [42, "\t\theader arrayFlags"], [43, "\t)"], [45, "\tflag.Var(&header, \"header\", \"The optional request headers to add to the requests. This flag can be used multiple times with a new header each time.\")"], [46, "\tflag.StringVar(&url, \"url\", \"\", \"The URL where the JavaScript sources should be extracted from.\")"], [47, "\tflag.Var(&input, \"input\", \"The optional URLs input files. Each URL should be on a new line in plain text format. This flag can be used multiple times with different files.\")"], [48, "\tflag.Var(&output, \"output\", \"The optional output file where the results are written to.\")"], [52, "\toptions.Request.Headers = headers(header)"], [54, "\toptions.Inputs = inputs(input)"], [55, "\toptions.Outputs = outputs(output)"], [57, "\t// Add an input for the single URL option, if set."], [58, "\tif len(url) > 0 {"], [59, "\t\toptions.Inputs = append(options.Inputs, runner.Input{"], [60, "\t\t\tType: runner.InputURL,"], [61, "\t\t\tData: strings.NewReader(url),"], [62, "\t\t})"], [67, "\t\tlog.Fatal(fmt.Errorf(\"error reading stdin: %v\", err))"], [71, "\t\t// Read the first line of stdin to detect its format"], [72, "\t\treader := bufio.NewReader(os.Stdin)"], [73, "\t\tfirstLine, err := reader.ReadString('\\n')"], [74, "\t\tif err != nil && err != io.EOF {"], [75, "\t\t\tlog.Fatal(fmt.Errorf(\"error reading first line of stdin: %v\", err))"], [78, "\t\tif isURL(strings.TrimSpace(firstLine)) {"], [79, "\t\t\t// Treat as URL input."], [80, "\t\t\toptions.Inputs = append(options.Inputs, runner.Input{"], [81, "\t\t\t\tType: runner.InputURL,"], [82, "\t\t\t\tData: io.MultiReader(strings.NewReader(firstLine), reader),"], [83, "\t\t\t})"], [84, "\t\t} else {"], [85, "\t\t\t// Treat as HTTP response body."], [86, "\t\t\toptions.Inputs = append(options.Inputs, runner.Input{"], [87, "\t\t\t\tType: runner.InputResponse,"], [88, "\t\t\t\tData: io.MultiReader(strings.NewReader(firstLine), reader),"], [89, "\t\t\t})"], [93, "\treturn"], [94, "}"], [96, "func isURL(str string) bool {"], [97, "\treturn strings.HasPrefix(str, \"http://\") || strings.HasPrefix(str, \"https://\")"], [98, "}"], [100, "func outputs(names []string) []io.Writer {"], [101, "\toutputs := append([]io.Writer{}, os.Stdout)"], [103, "\tfor _, n := range names {"], [104, "\t\tfile, err := os.OpenFile(n, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0o644)"], [106, "\t\t\tlog.Fatal(fmt.Errorf(\"error parsing output file flag: %v\", err))"], [109, "\t\toutputs = append(outputs, file)"], [110, "\t}"], [112, "\treturn outputs"], [113, "}"], [115, "func inputs(names []string) []runner.Input {"], [116, "\tinputs := []runner.Input{}"], [118, "\tfor _, n := range names {"], [119, "\t\tfile, err := os.Open(n)"], [121, "\t\t\tlog.Fatal(fmt.Errorf(\"error reading from file %s: %v\", n, err))"], [124, "\t\tinputs = append(inputs, runner.Input{Type: runner.InputURL, Data: file})"], [127, "\treturn inputs"], [130, "func headers(args []string) http.Header {"], [131, "\theaders := make(http.Header)"], [132, "\tfor _, s := range args {"], [133, "\t\tparts := strings.Split(s, \":\")"], [134, "\t\tif len(parts) <= 1 {"], [135, "\t\t\tlog.Fatal(fmt.Errorf(\"invalid header %s\", s))"], [138, "\t\theaders[strings.TrimSpace(parts[0])] = []string{strings.TrimSpace(strings.Join(parts[1:], \":\"))}"], [141, "\treturn headers"], [144, "type arrayFlags []string"], [146, "func (a *arrayFlags) Set(value string) error {"], [147, "\t*a = append(*a, value)"], [148, "\treturn nil"], [151, "func (a *arrayFlags) String() string {"], [152, "\treturn strings.Join(*a, \",\")"]], "deleted": [[5, "\t\"crypto/tls\""], [9, "\t\"net/url\""], [14, "\t\"github.com/PuerkitoBio/goquery\""], [15, "\t\"github.com/logrusorgru/aurora\""], [16, "\tflag \"github.com/spf13/pflag\""], [19, "type logger interface {"], [20, "\tLog(msg string)"], [21, "\tError(msg string, err error)"], [22, "}"], [23, ""], [24, "type silent struct{}"], [25, ""], [26, "func (s silent) Log(msg string) {"], [27, "}"], [28, ""], [29, "func (s silent) Error(msg string, err error) {"], [30, "}"], [31, ""], [32, "type verbose struct {"], [33, "}"], [35, "func (v verbose) Log(msg string) {"], [36, "\tfmt.Println(au.Cyan(msg))"], [39, "func Log(l logger, msg string) {"], [40, "\tl.Log(msg)"], [41, "}"], [43, "func (v verbose) Error(msg string, err error) {"], [44, "\tfmt.Fprintln(os.Stderr, au.Red(msg))"], [45, "\tif err != nil {"], [46, "\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))"], [47, "\t}"], [48, "}"], [50, "func Error(l logger, msg string, err error) {"], [51, "\tl.Error(msg, err)"], [52, "}"], [54, "var output logger"], [55, "var au aurora.Aurora"], [57, "func main() {"], [58, "\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")"], [59, "\tmethodArg := flag.String(\"method\", \"GET\", \"The request method. e.g. GET or POST\")"], [60, "\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")"], [61, "\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")"], [62, "\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")"], [63, "\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")"], [64, "\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")"], [65, "\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")"], [66, "\tHeaderArg := flag.StringArrayP(\"header\", \"H\", nil, \"Any HTTP headers(-H \\\"Authorization:Bearer token\\\")\")"], [67, "\tinsecureArg := flag.Bool(\"insecure\", false, \"Check the SSL security checks. Use when the certificate is expired or invalid\")"], [68, "\ttimeoutArg := flag.Int(\"timeout\", 10, \"Max timeout for the requests\")"], [71, "\tau = aurora.NewAurora(!*noColorsArg)"], [72, ""], [73, "\tvar urls []string"], [74, "\tvar allSources []string"], [76, "\toutput = silent{}"], [78, "\tif *verboseArg {"], [79, "\t\toutput = verbose{}"], [84, "\t\toutput.Error(\"[!] Couldnt read Stdin\", err)"], [88, "\t\tscanner := bufio.NewScanner(os.Stdin)"], [89, "\t\tfor scanner.Scan() {"], [90, "\t\t\turls = append(urls, scanner.Text())"], [92, "\t\tif err := scanner.Err(); err != nil {"], [93, "\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)"], [94, "\t\t}"], [95, "\t\tif len(urls) > 0 {"], [96, "\t\t\toutput.Log(\"[+] Received urls from Stdin\")"], [97, "\t\t}"], [98, "\t}"], [100, "\tif *inputFileArg != \"\" {"], [101, "\t\tf, err := os.Open(*inputFileArg)"], [102, "\t\tif err != nil {"], [103, "\t\t\toutput.Error(\"[!] Couldn't open input file\", err)"], [104, "\t\t\treturn"], [106, "\t\tdefer f.Close()"], [107, ""], [108, "\t\tlines, err := readLines(f)"], [109, "\t\tif err != nil {"], [110, "\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)"], [111, "\t\t}"], [112, "\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)"], [113, "\t\turls = append(urls, lines...)"], [116, "\tif *urlArg != \"\" {"], [117, "\t\toutput.Log(fmt.Sprintf(\"[+] Set url to %s\", *urlArg))"], [118, "\t\turls = append(urls, *urlArg)"], [119, "\t}"], [121, "\tif len(urls) == 0 {"], [122, "\t\toutput.Error(\"[!] No urls supplied\", nil)"], [123, "\t\tos.Exit(3)"], [124, "\t}"], [126, "\tif *resolveArg && !*completeArg {"], [127, "\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)"], [128, "\t\tos.Exit(3)"], [129, "\t}"], [131, "\tfor _, e := range urls {"], [132, "\t\tvar sourcesBak []string"], [133, "\t\tvar completedSuccessfully = true"], [134, "\t\toutput.Log(\"[+] Getting sources from \" + e)"], [135, "\t\tsources, err := getScriptSrc(e, *methodArg, *HeaderArg, *insecureArg, *timeoutArg)"], [137, "\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't get sources from %s\", e), err)"], [138, "\t\t}"], [139, ""], [140, "\t\tif *completeArg {"], [141, "\t\t\toutput.Log(\"[+] Completing URLs\")"], [142, "\t\t\tsourcesBak = sources"], [143, "\t\t\tsources, err = completeUrls(sources, e)"], [144, "\t\t\tif err != nil {"], [145, "\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)"], [146, "\t\t\t\tsources = sourcesBak"], [147, "\t\t\t\tcompletedSuccessfully = false"], [148, "\t\t\t}"], [151, "\t\tif *resolveArg && *completeArg {"], [152, "\t\t\tif completedSuccessfully {"], [153, "\t\t\t\toutput.Log(\"[+] Resolving files\")"], [154, "\t\t\t\tsourcesBak = sources"], [155, "\t\t\t\tsources, err = resolveUrls(sources)"], [156, "\t\t\t\tif err != nil {"], [157, "\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)"], [158, "\t\t\t\t\tsources = sourcesBak"], [159, "\t\t\t\t}"], [160, "\t\t\t} else {"], [161, "\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)"], [162, "\t\t\t}"], [163, "\t\t} else if *resolveArg {"], [164, "\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)"], [165, "\t\t}"], [166, ""], [167, "\t\tfor _, i := range sources {"], [168, "\t\t\tfmt.Println(i)"], [169, "\t\t}"], [171, "\t\tif *outputFileArg != \"\" {"], [172, "\t\t\tallSources = append(allSources, sources...)"], [173, "\t\t}"], [175, "\t}"], [177, "\t// Save to file"], [178, "\tif *outputFileArg != \"\" {"], [179, "\t\toutput.Log(fmt.Sprintf(\"[+] Saving output to %s\", *outputFileArg))"], [180, "\t\terr := saveToFile(allSources, *outputFileArg)"], [182, "\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't save to output file %s\", *outputFileArg), err)"], [184, "\t}"], [186, "}"], [187, ""], [188, "func saveToFile(sources []string, path string) error {"], [189, "\tfile, err := os.Create(path)"], [190, "\tif err != nil {"], [191, "\t\treturn err"], [193, "\tdefer file.Close()"], [195, "\tw := bufio.NewWriter(file)"], [196, "\tfor _, line := range sources {"], [197, "\t\tfmt.Fprintln(w, line)"], [198, "\t}"], [199, "\treturn w.Flush()"], [202, "func getScriptSrc(url string, method string, headers []string, insecure bool, timeout int) ([]string, error) {"], [203, "\t// Request the HTML page."], [204, "\treq, err := http.NewRequest(method, url, nil)"], [205, "\tif err != nil {"], [206, "\t\treturn []string{}, err"], [207, "\t}"], [208, ""], [209, "\tfor _, d := range headers {"], [210, "\t\tvalues := strings.Split(d, \":\")"], [211, "\t\tif len(values) == 2 {"], [212, "\t\t\toutput.Log(\"[+] New Header: \" + values[0] + \": \" + values[1])"], [213, "\t\t\treq.Header.Set(values[0], values[1])"], [215, "\t}"], [216, ""], [217, "\ttr := &http.Transport{"], [218, "\t\tResponseHeaderTimeout: time.Duration(time.Duration(timeout) * time.Second),"], [219, "\t\tTLSClientConfig:       &tls.Config{InsecureSkipVerify: insecure},"], [220, "\t}"], [221, ""], [222, "\tvar client = &http.Client{"], [223, "\t\tTimeout:   time.Duration(time.Duration(timeout) * time.Second),"], [224, "\t\tTransport: tr,"], [225, "\t}"], [226, ""], [227, "\tres, err := client.Do(req)"], [228, "\tif err != nil {"], [229, "\t\treturn []string{}, err"], [230, "\t}"], [231, "\tdefer res.Body.Close()"], [232, "\tif res.StatusCode != 200 {"], [233, "\t\toutput.Error(fmt.Sprintf(\"[!] %s returned an %d instead of %d\", url, res.StatusCode, http.StatusOK), nil)"], [234, "\t\treturn nil, nil"], [235, "\t}"], [237, "\t// Load the HTML document"], [238, "\tdoc, err := goquery.NewDocumentFromReader(res.Body)"], [239, "\tif err != nil {"], [240, "\t\treturn nil, err"], [243, "\tvar sources []string"], [244, ""], [245, "\t// Find the script tags, and get the src"], [246, "\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {"], [247, "\t\tsrc, _ := s.Attr(\"src\")"], [248, "\t\tdsrc, _ := s.Attr(\"data-src\")"], [249, "\t\tif src != \"\" {"], [250, "\t\t\tsources = append(sources, src)"], [251, "\t\t}"], [252, "\t\tif dsrc != \"\" {"], [253, "\t\t\tsources = append(sources, dsrc)"], [254, "\t\t}"], [255, "\t})"], [256, ""], [257, "\treturn sources, nil"], [260, "func readLines(r io.Reader) ([]string, error) {"], [261, "\tvar lines []string"], [262, "\tscanner := bufio.NewScanner(r)"], [263, "\tfor scanner.Scan() {"], [264, "\t\tlines = append(lines, scanner.Text())"], [265, "\t}"], [266, "\treturn lines, scanner.Err()"], [267, "}"], [269, "func resolveUrls(s []string) ([]string, error) {"], [270, "\tfor i := len(s) - 1; i >= 0; i-- {"], [271, "\t\tresp, err := http.Get(s[i])"], [272, "\t\tif err != nil {"], [273, "\t\t\treturn nil, err"], [274, "\t\t}"], [275, "\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {"], [276, "\t\t\ts = append(s[:i], s[i+1:]...)"], [277, "\t\t}"], [278, "\t}"], [279, "\treturn s, nil"], [282, "func completeUrls(s []string, mainUrl string) ([]string, error) {"], [283, "\tu, err := url.Parse(mainUrl)"], [284, "\tif err != nil {"], [285, "\t\treturn nil, err"], [286, "\t}"], [287, ""], [288, "\tfor i := range s {"], [289, "\t\tif strings.HasPrefix(s[i], \"//\") {"], [290, "\t\t\ts[i] = u.Scheme + \":\" + s[i]"], [291, "\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {"], [292, "\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]"], [293, "\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {"], [294, "\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]"], [295, "\t\t}"], [296, "\t}"], [297, "\treturn s, nil"]]}, "added_lines": 91, "deleted_lines": 236, "source_code": "package main\n\nimport (\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/003random/getJS/v2/runner\"\n)\n\nfunc main() {\n\toptions, err := setup()\n\tif err != nil {\n\t\tlog.Fatal(fmt.Errorf(\"parsing flags: %w\", err))\n\t}\n\n\tif err := runner.New(options).Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc setup() (options *runner.Options, err error) {\n\toptions = &runner.Options{}\n\n\tflag.StringVar(&options.Request.Method, \"method\", \"GET\", \"The request method that should be used to make fetch the remote contents.\")\n\tflag.DurationVar(&options.Request.Timeout, \"timeout\", 5*time.Second, \"The request timeout used while fetching the remote contents.\")\n\tflag.BoolVar(&options.Complete, \"complete\", false, \"Complete/Autofil relative URLs by adding the current origin.\")\n\tflag.BoolVar(&options.Resolve, \"resolve\", false, \"Resolve the JavaScript files. Can only be used in combination with '--resolve'. Unresolvable hosts are not included in the results.\")\n\tflag.IntVar(&options.Threads, \"threads\", 2, \"The amount of processing threads to spawn.\")\n\tflag.BoolVar(&options.Verbose, \"verbose\", false, \"Print verbose runtime information and errors.\")\n\n\tvar (\n\t\turl    string\n\t\tinput  arrayFlags\n\t\toutput arrayFlags\n\t\theader arrayFlags\n\t)\n\n\tflag.Var(&header, \"header\", \"The optional request headers to add to the requests. This flag can be used multiple times with a new header each time.\")\n\tflag.StringVar(&url, \"url\", \"\", \"The URL where the JavaScript sources should be extracted from.\")\n\tflag.Var(&input, \"input\", \"The optional URLs input files. Each URL should be on a new line in plain text format. This flag can be used multiple times with different files.\")\n\tflag.Var(&output, \"output\", \"The optional output file where the results are written to.\")\n\n\tflag.Parse()\n\n\toptions.Request.Headers = headers(header)\n\n\toptions.Inputs = inputs(input)\n\toptions.Outputs = outputs(output)\n\n\t// Add an input for the single URL option, if set.\n\tif len(url) > 0 {\n\t\toptions.Inputs = append(options.Inputs, runner.Input{\n\t\t\tType: runner.InputURL,\n\t\t\tData: strings.NewReader(url),\n\t\t})\n\t}\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\tlog.Fatal(fmt.Errorf(\"error reading stdin: %v\", err))\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\t// Read the first line of stdin to detect its format\n\t\treader := bufio.NewReader(os.Stdin)\n\t\tfirstLine, err := reader.ReadString('\\n')\n\t\tif err != nil && err != io.EOF {\n\t\t\tlog.Fatal(fmt.Errorf(\"error reading first line of stdin: %v\", err))\n\t\t}\n\n\t\tif isURL(strings.TrimSpace(firstLine)) {\n\t\t\t// Treat as URL input.\n\t\t\toptions.Inputs = append(options.Inputs, runner.Input{\n\t\t\t\tType: runner.InputURL,\n\t\t\t\tData: io.MultiReader(strings.NewReader(firstLine), reader),\n\t\t\t})\n\t\t} else {\n\t\t\t// Treat as HTTP response body.\n\t\t\toptions.Inputs = append(options.Inputs, runner.Input{\n\t\t\t\tType: runner.InputResponse,\n\t\t\t\tData: io.MultiReader(strings.NewReader(firstLine), reader),\n\t\t\t})\n\t\t}\n\t}\n\n\treturn\n}\n\nfunc isURL(str string) bool {\n\treturn strings.HasPrefix(str, \"http://\") || strings.HasPrefix(str, \"https://\")\n}\n\nfunc outputs(names []string) []io.Writer {\n\toutputs := append([]io.Writer{}, os.Stdout)\n\n\tfor _, n := range names {\n\t\tfile, err := os.OpenFile(n, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0o644)\n\t\tif err != nil {\n\t\t\tlog.Fatal(fmt.Errorf(\"error parsing output file flag: %v\", err))\n\t\t}\n\n\t\toutputs = append(outputs, file)\n\t}\n\n\treturn outputs\n}\n\nfunc inputs(names []string) []runner.Input {\n\tinputs := []runner.Input{}\n\n\tfor _, n := range names {\n\t\tfile, err := os.Open(n)\n\t\tif err != nil {\n\t\t\tlog.Fatal(fmt.Errorf(\"error reading from file %s: %v\", n, err))\n\t\t}\n\n\t\tinputs = append(inputs, runner.Input{Type: runner.InputURL, Data: file})\n\t}\n\n\treturn inputs\n}\n\nfunc headers(args []string) http.Header {\n\theaders := make(http.Header)\n\tfor _, s := range args {\n\t\tparts := strings.Split(s, \":\")\n\t\tif len(parts) <= 1 {\n\t\t\tlog.Fatal(fmt.Errorf(\"invalid header %s\", s))\n\t\t}\n\n\t\theaders[strings.TrimSpace(parts[0])] = []string{strings.TrimSpace(strings.Join(parts[1:], \":\"))}\n\t}\n\n\treturn headers\n}\n\ntype arrayFlags []string\n\nfunc (a *arrayFlags) Set(value string) error {\n\t*a = append(*a, value)\n\treturn nil\n}\n\nfunc (a *arrayFlags) String() string {\n\treturn strings.Join(*a, \",\")\n}\n", "source_code_before": "package main\n\nimport (\n\t\"bufio\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n\t\"github.com/logrusorgru/aurora\"\n\tflag \"github.com/spf13/pflag\"\n)\n\ntype logger interface {\n\tLog(msg string)\n\tError(msg string, err error)\n}\n\ntype silent struct{}\n\nfunc (s silent) Log(msg string) {\n}\n\nfunc (s silent) Error(msg string, err error) {\n}\n\ntype verbose struct {\n}\n\nfunc (v verbose) Log(msg string) {\n\tfmt.Println(au.Cyan(msg))\n}\n\nfunc Log(l logger, msg string) {\n\tl.Log(msg)\n}\n\nfunc (v verbose) Error(msg string, err error) {\n\tfmt.Fprintln(os.Stderr, au.Red(msg))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, au.Red(\"[!] Error: \"), au.Red(err))\n\t}\n}\n\nfunc Error(l logger, msg string, err error) {\n\tl.Error(msg, err)\n}\n\nvar output logger\nvar au aurora.Aurora\n\nfunc main() {\n\turlArg := flag.String(\"url\", \"\", \"The url to get the javascript sources from\")\n\tmethodArg := flag.String(\"method\", \"GET\", \"The request method. e.g. GET or POST\")\n\toutputFileArg := flag.String(\"output\", \"\", \"Output file to save the results to\")\n\tinputFileArg := flag.String(\"input\", \"\", \"Input file with urls\")\n\tresolveArg := flag.Bool(\"resolve\", false, \"Output only existing files\")\n\tcompleteArg := flag.Bool(\"complete\", false, \"Complete the url. e.g. append the domain to the path\")\n\tverboseArg := flag.Bool(\"verbose\", false, \"Display info of what is going on\")\n\tnoColorsArg := flag.Bool(\"nocolors\", false, \"Enable or disable colors\")\n\tHeaderArg := flag.StringArrayP(\"header\", \"H\", nil, \"Any HTTP headers(-H \\\"Authorization:Bearer token\\\")\")\n\tinsecureArg := flag.Bool(\"insecure\", false, \"Check the SSL security checks. Use when the certificate is expired or invalid\")\n\ttimeoutArg := flag.Int(\"timeout\", 10, \"Max timeout for the requests\")\n\tflag.Parse()\n\n\tau = aurora.NewAurora(!*noColorsArg)\n\n\tvar urls []string\n\tvar allSources []string\n\n\toutput = silent{}\n\n\tif *verboseArg {\n\t\toutput = verbose{}\n\t}\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t}\n\n\tif (stat.Mode() & os.ModeCharDevice) == 0 {\n\t\tscanner := bufio.NewScanner(os.Stdin)\n\t\tfor scanner.Scan() {\n\t\t\turls = append(urls, scanner.Text())\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\toutput.Error(\"[!] Couldnt read Stdin\", err)\n\t\t}\n\t\tif len(urls) > 0 {\n\t\t\toutput.Log(\"[+] Received urls from Stdin\")\n\t\t}\n\t}\n\n\tif *inputFileArg != \"\" {\n\t\tf, err := os.Open(*inputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't open input file\", err)\n\t\t\treturn\n\t\t}\n\t\tdefer f.Close()\n\n\t\tlines, err := readLines(f)\n\t\tif err != nil {\n\t\t\toutput.Error(\"[!] Couldn't read from input file\", err)\n\t\t}\n\t\toutput.Log(\"[+] Set url file to \" + *inputFileArg)\n\t\turls = append(urls, lines...)\n\t}\n\n\tif *urlArg != \"\" {\n\t\toutput.Log(fmt.Sprintf(\"[+] Set url to %s\", *urlArg))\n\t\turls = append(urls, *urlArg)\n\t}\n\n\tif len(urls) == 0 {\n\t\toutput.Error(\"[!] No urls supplied\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tif *resolveArg && !*completeArg {\n\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\tos.Exit(3)\n\t}\n\n\tfor _, e := range urls {\n\t\tvar sourcesBak []string\n\t\tvar completedSuccessfully = true\n\t\toutput.Log(\"[+] Getting sources from \" + e)\n\t\tsources, err := getScriptSrc(e, *methodArg, *HeaderArg, *insecureArg, *timeoutArg)\n\t\tif err != nil {\n\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't get sources from %s\", e), err)\n\t\t}\n\n\t\tif *completeArg {\n\t\t\toutput.Log(\"[+] Completing URLs\")\n\t\t\tsourcesBak = sources\n\t\t\tsources, err = completeUrls(sources, e)\n\t\t\tif err != nil {\n\t\t\t\toutput.Error(\"[!] Couldn't complete URLs\", err)\n\t\t\t\tsources = sourcesBak\n\t\t\t\tcompletedSuccessfully = false\n\t\t\t}\n\t\t}\n\n\t\tif *resolveArg && *completeArg {\n\t\t\tif completedSuccessfully {\n\t\t\t\toutput.Log(\"[+] Resolving files\")\n\t\t\t\tsourcesBak = sources\n\t\t\t\tsources, err = resolveUrls(sources)\n\t\t\t\tif err != nil {\n\t\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", err)\n\t\t\t\t\tsources = sourcesBak\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.Error(\"[!] Couldn't resolve URLs\", nil)\n\t\t\t}\n\t\t} else if *resolveArg {\n\t\t\toutput.Error(\"[!] Resolve can only be used in combination with -complete\", nil)\n\t\t}\n\n\t\tfor _, i := range sources {\n\t\t\tfmt.Println(i)\n\t\t}\n\n\t\tif *outputFileArg != \"\" {\n\t\t\tallSources = append(allSources, sources...)\n\t\t}\n\n\t}\n\n\t// Save to file\n\tif *outputFileArg != \"\" {\n\t\toutput.Log(fmt.Sprintf(\"[+] Saving output to %s\", *outputFileArg))\n\t\terr := saveToFile(allSources, *outputFileArg)\n\t\tif err != nil {\n\t\t\toutput.Error(fmt.Sprintf(\"[!] Couldn't save to output file %s\", *outputFileArg), err)\n\t\t}\n\t}\n\n}\n\nfunc saveToFile(sources []string, path string) error {\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tw := bufio.NewWriter(file)\n\tfor _, line := range sources {\n\t\tfmt.Fprintln(w, line)\n\t}\n\treturn w.Flush()\n}\n\nfunc getScriptSrc(url string, method string, headers []string, insecure bool, timeout int) ([]string, error) {\n\t// Request the HTML page.\n\treq, err := http.NewRequest(method, url, nil)\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\n\tfor _, d := range headers {\n\t\tvalues := strings.Split(d, \":\")\n\t\tif len(values) == 2 {\n\t\t\toutput.Log(\"[+] New Header: \" + values[0] + \": \" + values[1])\n\t\t\treq.Header.Set(values[0], values[1])\n\t\t}\n\t}\n\n\ttr := &http.Transport{\n\t\tResponseHeaderTimeout: time.Duration(time.Duration(timeout) * time.Second),\n\t\tTLSClientConfig:       &tls.Config{InsecureSkipVerify: insecure},\n\t}\n\n\tvar client = &http.Client{\n\t\tTimeout:   time.Duration(time.Duration(timeout) * time.Second),\n\t\tTransport: tr,\n\t}\n\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode != 200 {\n\t\toutput.Error(fmt.Sprintf(\"[!] %s returned an %d instead of %d\", url, res.StatusCode, http.StatusOK), nil)\n\t\treturn nil, nil\n\t}\n\n\t// Load the HTML document\n\tdoc, err := goquery.NewDocumentFromReader(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sources []string\n\n\t// Find the script tags, and get the src\n\tdoc.Find(\"script\").Each(func(i int, s *goquery.Selection) {\n\t\tsrc, _ := s.Attr(\"src\")\n\t\tdsrc, _ := s.Attr(\"data-src\")\n\t\tif src != \"\" {\n\t\t\tsources = append(sources, src)\n\t\t}\n\t\tif dsrc != \"\" {\n\t\t\tsources = append(sources, dsrc)\n\t\t}\n\t})\n\n\treturn sources, nil\n}\n\nfunc readLines(r io.Reader) ([]string, error) {\n\tvar lines []string\n\tscanner := bufio.NewScanner(r)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc resolveUrls(s []string) ([]string, error) {\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\tresp, err := http.Get(s[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif resp.StatusCode != 200 && resp.StatusCode != 304 {\n\t\t\ts = append(s[:i], s[i+1:]...)\n\t\t}\n\t}\n\treturn s, nil\n}\n\nfunc completeUrls(s []string, mainUrl string) ([]string, error) {\n\tu, err := url.Parse(mainUrl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i := range s {\n\t\tif strings.HasPrefix(s[i], \"//\") {\n\t\t\ts[i] = u.Scheme + \":\" + s[i]\n\t\t} else if strings.HasPrefix(s[i], \"/\") && string(s[i][1]) != \"/\" {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + s[i]\n\t\t} else if !strings.HasPrefix(s[i], \"http://\") && !strings.HasPrefix(s[i], \"https://\") {\n\t\t\ts[i] = u.Scheme + \"://\" + u.Host + u.Path + \"/\" + s[i]\n\t\t}\n\t}\n\treturn s, nil\n}\n", "methods": [{"name": "main", "start_line": 17, "end_line": 26}, {"name": "setup", "start_line": 28, "end_line": 94}, {"name": "isURL", "start_line": 96, "end_line": 98}, {"name": "outputs", "start_line": 100, "end_line": 113}, {"name": "inputs", "start_line": 115, "end_line": 128}, {"name": "headers", "start_line": 130, "end_line": 142}, {"name": "Set", "start_line": 146, "end_line": 149}, {"name": "String", "start_line": 151, "end_line": 153}], "methods_before": [{"name": "Log", "start_line": 26, "end_line": 27}, {"name": "Error", "start_line": 29, "end_line": 30}, {"name": "Log", "start_line": 35, "end_line": 37}, {"name": "Log", "start_line": 39, "end_line": 41}, {"name": "Error", "start_line": 43, "end_line": 48}, {"name": "Error", "start_line": 50, "end_line": 52}, {"name": "main", "start_line": 57, "end_line": 186}, {"name": "saveToFile", "start_line": 188, "end_line": 200}, {"name": "", "start_line": 246, "end_line": 255}, {"name": "getScriptSrc", "start_line": 202, "end_line": 258}, {"name": "readLines", "start_line": 260, "end_line": 267}, {"name": "resolveUrls", "start_line": 269, "end_line": 280}, {"name": "completeUrls", "start_line": 282, "end_line": 298}], "changed_methods": [{"name": "outputs", "start_line": 100, "end_line": 113}, {"name": "Set", "start_line": 146, "end_line": 149}, {"name": "saveToFile", "start_line": 188, "end_line": 200}, {"name": "String", "start_line": 151, "end_line": 153}, {"name": "Error", "start_line": 29, "end_line": 30}, {"name": "Error", "start_line": 50, "end_line": 52}, {"name": "inputs", "start_line": 115, "end_line": 128}, {"name": "Log", "start_line": 39, "end_line": 41}, {"name": "resolveUrls", "start_line": 269, "end_line": 280}, {"name": "isURL", "start_line": 96, "end_line": 98}, {"name": "", "start_line": 246, "end_line": 255}, {"name": "main", "start_line": 17, "end_line": 26}, {"name": "Error", "start_line": 43, "end_line": 48}, {"name": "headers", "start_line": 130, "end_line": 142}, {"name": "getScriptSrc", "start_line": 202, "end_line": 258}, {"name": "Log", "start_line": 26, "end_line": 27}, {"name": "setup", "start_line": 28, "end_line": 94}, {"name": "completeUrls", "start_line": 282, "end_line": 298}, {"name": "Log", "start_line": 35, "end_line": 37}, {"name": "readLines", "start_line": 260, "end_line": 267}], "nloc": 118, "complexity": 23, "token_count": 864}, {"old_path": null, "new_path": "runner/objects.go", "filename": "objects.go", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,50 @@\n+package runner\n+\n+import (\n+\t\"io\"\n+\t\"net/http\"\n+\t\"net/url\"\n+\t\"time\"\n+)\n+\n+// Input represents an input source for getJS. The input format is determined by the `Type` property.\n+type Input struct {\n+\tType InputType\n+\tData io.Reader\n+}\n+\n+// InputType defines the type of input source for getJS.\n+type InputType int\n+\n+const (\n+\t// InputURL defines the input format to line separated, plain text, URLs.\n+\tInputURL InputType = iota\n+\t// InputResponse defines the input format to a HTTP response body.\n+\tInputResponse\n+)\n+\n+type runner struct {\n+\tOptions Options\n+\tResults chan url.URL\n+}\n+\n+// Options represents the configuration options for the runner.\n+type Options struct {\n+\tRequest struct {\n+\t\tMethod             string\n+\t\tHeaders            http.Header\n+\t\tInsecureSkipVerify bool\n+\t\tTimeout            time.Duration\n+\t}\n+\n+\tInputs  []Input\n+\tOutputs []io.Writer\n+\n+\tComplete bool\n+\tResolve  bool\n+\n+\tThreads int\n+\n+\tVerbose bool\n+\tColors  bool\n+}\n", "diff_parsed": {"added": [[1, "package runner"], [2, ""], [3, "import ("], [4, "\t\"io\""], [5, "\t\"net/http\""], [6, "\t\"net/url\""], [7, "\t\"time\""], [8, ")"], [9, ""], [10, "// Input represents an input source for getJS. The input format is determined by the `Type` property."], [11, "type Input struct {"], [12, "\tType InputType"], [13, "\tData io.Reader"], [14, "}"], [15, ""], [16, "// InputType defines the type of input source for getJS."], [17, "type InputType int"], [18, ""], [19, "const ("], [20, "\t// InputURL defines the input format to line separated, plain text, URLs."], [21, "\tInputURL InputType = iota"], [22, "\t// InputResponse defines the input format to a HTTP response body."], [23, "\tInputResponse"], [24, ")"], [25, ""], [26, "type runner struct {"], [27, "\tOptions Options"], [28, "\tResults chan url.URL"], [29, "}"], [30, ""], [31, "// Options represents the configuration options for the runner."], [32, "type Options struct {"], [33, "\tRequest struct {"], [34, "\t\tMethod             string"], [35, "\t\tHeaders            http.Header"], [36, "\t\tInsecureSkipVerify bool"], [37, "\t\tTimeout            time.Duration"], [38, "\t}"], [39, ""], [40, "\tInputs  []Input"], [41, "\tOutputs []io.Writer"], [42, ""], [43, "\tComplete bool"], [44, "\tResolve  bool"], [45, ""], [46, "\tThreads int"], [47, ""], [48, "\tVerbose bool"], [49, "\tColors  bool"], [50, "}"]], "deleted": []}, "added_lines": 50, "deleted_lines": 0, "source_code": "package runner\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n)\n\n// Input represents an input source for getJS. The input format is determined by the `Type` property.\ntype Input struct {\n\tType InputType\n\tData io.Reader\n}\n\n// InputType defines the type of input source for getJS.\ntype InputType int\n\nconst (\n\t// InputURL defines the input format to line separated, plain text, URLs.\n\tInputURL InputType = iota\n\t// InputResponse defines the input format to a HTTP response body.\n\tInputResponse\n)\n\ntype runner struct {\n\tOptions Options\n\tResults chan url.URL\n}\n\n// Options represents the configuration options for the runner.\ntype Options struct {\n\tRequest struct {\n\t\tMethod             string\n\t\tHeaders            http.Header\n\t\tInsecureSkipVerify bool\n\t\tTimeout            time.Duration\n\t}\n\n\tInputs  []Input\n\tOutputs []io.Writer\n\n\tComplete bool\n\tResolve  bool\n\n\tThreads int\n\n\tVerbose bool\n\tColors  bool\n}\n", "source_code_before": null, "methods": [], "methods_before": [], "changed_methods": [], "nloc": 35, "complexity": 0, "token_count": 84}, {"old_path": null, "new_path": "runner/runner.go", "filename": "runner.go", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,185 @@\n+package runner\n+\n+import (\n+\t\"bufio\"\n+\t\"crypto/tls\"\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"net/url\"\n+\t\"sync\"\n+\n+\t\"github.com/003random/getJS/v2/extractor\"\n+)\n+\n+// ExtractionPoints defines the default HTML tags and their attributes from which JavaScript sources are extracted.\n+var ExtractionPoints = map[string][]string{\n+\t\"script\": {\"src\", \"data-src\"},\n+}\n+\n+// New creates a new runner with the provided options.\n+func New(options *Options) *runner {\n+\thttp.DefaultClient.Transport = &http.Transport{\n+\t\tTLSHandshakeTimeout: options.Request.Timeout,\n+\t\tTLSClientConfig: &tls.Config{\n+\t\t\tInsecureSkipVerify: options.Request.InsecureSkipVerify,\n+\t\t},\n+\t}\n+\thttp.DefaultClient.Timeout = options.Request.Timeout\n+\n+\treturn &runner{\n+\t\tOptions: *options,\n+\t\tResults: make(chan url.URL),\n+\t}\n+}\n+\n+// Run starts processing the inputs and extracts JavaScript sources into the runner's Results channel.\n+func (r *runner) Run() error {\n+\tif !r.Options.Verbose {\n+\t\tlog.SetOutput(io.Discard)\n+\t}\n+\n+\tgo func() {\n+\t\tfor _, input := range r.Options.Inputs {\n+\t\t\tswitch input.Type {\n+\t\t\tcase InputURL:\n+\t\t\t\tr.ProcessURLs(input.Data)\n+\t\t\tcase InputResponse:\n+\t\t\t\tr.ProcessResponse(input.Data)\n+\t\t\t}\n+\n+\t\t\tif input, ok := input.Data.(io.Closer); ok {\n+\t\t\t\tinput.Close()\n+\t\t\t}\n+\t\t}\n+\n+\t\tclose(r.Results)\n+\t}()\n+\n+\tr.listen()\n+\n+\treturn nil\n+}\n+\n+func (r *runner) listen() {\n+\tfor s := range r.Results {\n+\t\tfor _, output := range r.Options.Outputs {\n+\t\t\t_, err := output.Write([]byte(fmt.Sprintf(\"%s\\n\", s.String())))\n+\t\t\tif err != nil {\n+\t\t\t\tlog.Println(fmt.Errorf(\"[error] writing result %s to output: %v\", s.String(), err))\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tfor _, output := range r.Options.Outputs {\n+\t\tif o, ok := output.(io.Closer); ok {\n+\t\t\to.Close()\n+\t\t}\n+\t}\n+}\n+\n+// ProcessURLs will fetch the HTTP response for all URLs in the provided reader\n+// and stream the extracted sources to the runner's Results channel.\n+func (r *runner) ProcessURLs(data io.Reader) {\n+\tvar (\n+\t\tnext = Read(data)\n+\t\twg   = sync.WaitGroup{}\n+\n+\t\tthrottle = make(chan struct{}, r.Options.Threads)\n+\t)\n+\n+\tfor i := 0; i < r.Options.Threads; i++ {\n+\t\tthrottle <- struct{}{}\n+\t}\n+\n+\tfor {\n+\t\tu, err := next()\n+\t\tif errors.Is(err, io.EOF) {\n+\t\t\tbreak\n+\t\t}\n+\t\tif err != nil {\n+\t\t\tlog.Println(fmt.Errorf(\"[error] parsing url %v: %w\", u, err))\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\twg.Add(1)\n+\t\tgo func(u *url.URL) {\n+\t\t\tdefer func() {\n+\t\t\t\tthrottle <- struct{}{}\n+\t\t\t\twg.Done()\n+\t\t\t}()\n+\n+\t\t\tresp, err := extractor.FetchResponse(u.String(), r.Options.Request.Method, r.Options.Request.Headers)\n+\t\t\tif err != nil {\n+\t\t\t\tlog.Println(fmt.Errorf(\"[error] fetching response for url %s: %w\", u.String(), err))\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\tdefer resp.Body.Close()\n+\n+\t\t\tsources, err := extractor.ExtractSources(resp.Body)\n+\t\t\tif err != nil {\n+\t\t\t\tlog.Println(fmt.Errorf(\"[error] extracting sources from response for url %s: %w\", u.String(), err))\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\tfiltered, err := extractor.Filter(sources, r.filters(u)...)\n+\t\t\tif err != nil {\n+\t\t\t\tlog.Println(fmt.Errorf(\"[error] filtering sources for url %s: %w\", u.String(), err))\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\tfor source := range filtered {\n+\t\t\t\tr.Results <- source\n+\t\t\t}\n+\t\t}(u)\n+\n+\t\t<-throttle\n+\t}\n+\n+\twg.Wait()\n+}\n+\n+// Read is a wrapper around the bufio.Scanner Text() method.\n+// Upon reading from the input, the line is automatically parsed to a *url.URL.\n+// An io.EOF error is returned when there are no more lines.\n+func Read(input io.Reader) func() (*url.URL, error) {\n+\tscanner := bufio.NewScanner(input)\n+\treturn func() (*url.URL, error) {\n+\t\tif !scanner.Scan() {\n+\t\t\treturn nil, io.EOF\n+\t\t}\n+\n+\t\treturn url.Parse(scanner.Text())\n+\t}\n+}\n+\n+func (r *runner) ProcessResponse(data io.Reader) {\n+\tsources, err := extractor.ExtractSources(data)\n+\tif err != nil {\n+\t\tlog.Println(fmt.Errorf(\"[error] extracting sources from response file: %w\", err))\n+\t}\n+\n+\tfiltered, err := extractor.Filter(sources, r.filters(nil)...)\n+\tif err != nil {\n+\t\tlog.Println(fmt.Errorf(\"[error] filtering sources from response file: %w\", err))\n+\t\treturn\n+\t}\n+\n+\tfor source := range filtered {\n+\t\tr.Results <- source\n+\t}\n+}\n+\n+func (r *runner) filters(base *url.URL) (options []func([]url.URL) []url.URL) {\n+\tif r.Options.Complete && base != nil {\n+\t\toptions = append(options, extractor.WithComplete(base))\n+\t}\n+\n+\tif r.Options.Resolve {\n+\t\toptions = append(options, extractor.WithResolve())\n+\t}\n+\n+\treturn\n+}\n", "diff_parsed": {"added": [[1, "package runner"], [2, ""], [3, "import ("], [4, "\t\"bufio\""], [5, "\t\"crypto/tls\""], [6, "\t\"errors\""], [7, "\t\"fmt\""], [8, "\t\"io\""], [9, "\t\"log\""], [10, "\t\"net/http\""], [11, "\t\"net/url\""], [12, "\t\"sync\""], [13, ""], [14, "\t\"github.com/003random/getJS/v2/extractor\""], [15, ")"], [16, ""], [17, "// ExtractionPoints defines the default HTML tags and their attributes from which JavaScript sources are extracted."], [18, "var ExtractionPoints = map[string][]string{"], [19, "\t\"script\": {\"src\", \"data-src\"},"], [20, "}"], [21, ""], [22, "// New creates a new runner with the provided options."], [23, "func New(options *Options) *runner {"], [24, "\thttp.DefaultClient.Transport = &http.Transport{"], [25, "\t\tTLSHandshakeTimeout: options.Request.Timeout,"], [26, "\t\tTLSClientConfig: &tls.Config{"], [27, "\t\t\tInsecureSkipVerify: options.Request.InsecureSkipVerify,"], [28, "\t\t},"], [29, "\t}"], [30, "\thttp.DefaultClient.Timeout = options.Request.Timeout"], [31, ""], [32, "\treturn &runner{"], [33, "\t\tOptions: *options,"], [34, "\t\tResults: make(chan url.URL),"], [35, "\t}"], [36, "}"], [37, ""], [38, "// Run starts processing the inputs and extracts JavaScript sources into the runner's Results channel."], [39, "func (r *runner) Run() error {"], [40, "\tif !r.Options.Verbose {"], [41, "\t\tlog.SetOutput(io.Discard)"], [42, "\t}"], [43, ""], [44, "\tgo func() {"], [45, "\t\tfor _, input := range r.Options.Inputs {"], [46, "\t\t\tswitch input.Type {"], [47, "\t\t\tcase InputURL:"], [48, "\t\t\t\tr.ProcessURLs(input.Data)"], [49, "\t\t\tcase InputResponse:"], [50, "\t\t\t\tr.ProcessResponse(input.Data)"], [51, "\t\t\t}"], [52, ""], [53, "\t\t\tif input, ok := input.Data.(io.Closer); ok {"], [54, "\t\t\t\tinput.Close()"], [55, "\t\t\t}"], [56, "\t\t}"], [57, ""], [58, "\t\tclose(r.Results)"], [59, "\t}()"], [60, ""], [61, "\tr.listen()"], [62, ""], [63, "\treturn nil"], [64, "}"], [65, ""], [66, "func (r *runner) listen() {"], [67, "\tfor s := range r.Results {"], [68, "\t\tfor _, output := range r.Options.Outputs {"], [69, "\t\t\t_, err := output.Write([]byte(fmt.Sprintf(\"%s\\n\", s.String())))"], [70, "\t\t\tif err != nil {"], [71, "\t\t\t\tlog.Println(fmt.Errorf(\"[error] writing result %s to output: %v\", s.String(), err))"], [72, "\t\t\t}"], [73, "\t\t}"], [74, "\t}"], [75, ""], [76, "\tfor _, output := range r.Options.Outputs {"], [77, "\t\tif o, ok := output.(io.Closer); ok {"], [78, "\t\t\to.Close()"], [79, "\t\t}"], [80, "\t}"], [81, "}"], [82, ""], [83, "// ProcessURLs will fetch the HTTP response for all URLs in the provided reader"], [84, "// and stream the extracted sources to the runner's Results channel."], [85, "func (r *runner) ProcessURLs(data io.Reader) {"], [86, "\tvar ("], [87, "\t\tnext = Read(data)"], [88, "\t\twg   = sync.WaitGroup{}"], [89, ""], [90, "\t\tthrottle = make(chan struct{}, r.Options.Threads)"], [91, "\t)"], [92, ""], [93, "\tfor i := 0; i < r.Options.Threads; i++ {"], [94, "\t\tthrottle <- struct{}{}"], [95, "\t}"], [96, ""], [97, "\tfor {"], [98, "\t\tu, err := next()"], [99, "\t\tif errors.Is(err, io.EOF) {"], [100, "\t\t\tbreak"], [101, "\t\t}"], [102, "\t\tif err != nil {"], [103, "\t\t\tlog.Println(fmt.Errorf(\"[error] parsing url %v: %w\", u, err))"], [104, "\t\t\tcontinue"], [105, "\t\t}"], [106, ""], [107, "\t\twg.Add(1)"], [108, "\t\tgo func(u *url.URL) {"], [109, "\t\t\tdefer func() {"], [110, "\t\t\t\tthrottle <- struct{}{}"], [111, "\t\t\t\twg.Done()"], [112, "\t\t\t}()"], [113, ""], [114, "\t\t\tresp, err := extractor.FetchResponse(u.String(), r.Options.Request.Method, r.Options.Request.Headers)"], [115, "\t\t\tif err != nil {"], [116, "\t\t\t\tlog.Println(fmt.Errorf(\"[error] fetching response for url %s: %w\", u.String(), err))"], [117, "\t\t\t\treturn"], [118, "\t\t\t}"], [119, "\t\t\tdefer resp.Body.Close()"], [120, ""], [121, "\t\t\tsources, err := extractor.ExtractSources(resp.Body)"], [122, "\t\t\tif err != nil {"], [123, "\t\t\t\tlog.Println(fmt.Errorf(\"[error] extracting sources from response for url %s: %w\", u.String(), err))"], [124, "\t\t\t\treturn"], [125, "\t\t\t}"], [126, ""], [127, "\t\t\tfiltered, err := extractor.Filter(sources, r.filters(u)...)"], [128, "\t\t\tif err != nil {"], [129, "\t\t\t\tlog.Println(fmt.Errorf(\"[error] filtering sources for url %s: %w\", u.String(), err))"], [130, "\t\t\t\treturn"], [131, "\t\t\t}"], [132, ""], [133, "\t\t\tfor source := range filtered {"], [134, "\t\t\t\tr.Results <- source"], [135, "\t\t\t}"], [136, "\t\t}(u)"], [137, ""], [138, "\t\t<-throttle"], [139, "\t}"], [140, ""], [141, "\twg.Wait()"], [142, "}"], [143, ""], [144, "// Read is a wrapper around the bufio.Scanner Text() method."], [145, "// Upon reading from the input, the line is automatically parsed to a *url.URL."], [146, "// An io.EOF error is returned when there are no more lines."], [147, "func Read(input io.Reader) func() (*url.URL, error) {"], [148, "\tscanner := bufio.NewScanner(input)"], [149, "\treturn func() (*url.URL, error) {"], [150, "\t\tif !scanner.Scan() {"], [151, "\t\t\treturn nil, io.EOF"], [152, "\t\t}"], [153, ""], [154, "\t\treturn url.Parse(scanner.Text())"], [155, "\t}"], [156, "}"], [157, ""], [158, "func (r *runner) ProcessResponse(data io.Reader) {"], [159, "\tsources, err := extractor.ExtractSources(data)"], [160, "\tif err != nil {"], [161, "\t\tlog.Println(fmt.Errorf(\"[error] extracting sources from response file: %w\", err))"], [162, "\t}"], [163, ""], [164, "\tfiltered, err := extractor.Filter(sources, r.filters(nil)...)"], [165, "\tif err != nil {"], [166, "\t\tlog.Println(fmt.Errorf(\"[error] filtering sources from response file: %w\", err))"], [167, "\t\treturn"], [168, "\t}"], [169, ""], [170, "\tfor source := range filtered {"], [171, "\t\tr.Results <- source"], [172, "\t}"], [173, "}"], [174, ""], [175, "func (r *runner) filters(base *url.URL) (options []func([]url.URL) []url.URL) {"], [176, "\tif r.Options.Complete && base != nil {"], [177, "\t\toptions = append(options, extractor.WithComplete(base))"], [178, "\t}"], [179, ""], [180, "\tif r.Options.Resolve {"], [181, "\t\toptions = append(options, extractor.WithResolve())"], [182, "\t}"], [183, ""], [184, "\treturn"], [185, "}"]], "deleted": []}, "added_lines": 185, "deleted_lines": 0, "source_code": "package runner\n\nimport (\n\t\"bufio\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"sync\"\n\n\t\"github.com/003random/getJS/v2/extractor\"\n)\n\n// ExtractionPoints defines the default HTML tags and their attributes from which JavaScript sources are extracted.\nvar ExtractionPoints = map[string][]string{\n\t\"script\": {\"src\", \"data-src\"},\n}\n\n// New creates a new runner with the provided options.\nfunc New(options *Options) *runner {\n\thttp.DefaultClient.Transport = &http.Transport{\n\t\tTLSHandshakeTimeout: options.Request.Timeout,\n\t\tTLSClientConfig: &tls.Config{\n\t\t\tInsecureSkipVerify: options.Request.InsecureSkipVerify,\n\t\t},\n\t}\n\thttp.DefaultClient.Timeout = options.Request.Timeout\n\n\treturn &runner{\n\t\tOptions: *options,\n\t\tResults: make(chan url.URL),\n\t}\n}\n\n// Run starts processing the inputs and extracts JavaScript sources into the runner's Results channel.\nfunc (r *runner) Run() error {\n\tif !r.Options.Verbose {\n\t\tlog.SetOutput(io.Discard)\n\t}\n\n\tgo func() {\n\t\tfor _, input := range r.Options.Inputs {\n\t\t\tswitch input.Type {\n\t\t\tcase InputURL:\n\t\t\t\tr.ProcessURLs(input.Data)\n\t\t\tcase InputResponse:\n\t\t\t\tr.ProcessResponse(input.Data)\n\t\t\t}\n\n\t\t\tif input, ok := input.Data.(io.Closer); ok {\n\t\t\t\tinput.Close()\n\t\t\t}\n\t\t}\n\n\t\tclose(r.Results)\n\t}()\n\n\tr.listen()\n\n\treturn nil\n}\n\nfunc (r *runner) listen() {\n\tfor s := range r.Results {\n\t\tfor _, output := range r.Options.Outputs {\n\t\t\t_, err := output.Write([]byte(fmt.Sprintf(\"%s\\n\", s.String())))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(fmt.Errorf(\"[error] writing result %s to output: %v\", s.String(), err))\n\t\t\t}\n\t\t}\n\t}\n\n\tfor _, output := range r.Options.Outputs {\n\t\tif o, ok := output.(io.Closer); ok {\n\t\t\to.Close()\n\t\t}\n\t}\n}\n\n// ProcessURLs will fetch the HTTP response for all URLs in the provided reader\n// and stream the extracted sources to the runner's Results channel.\nfunc (r *runner) ProcessURLs(data io.Reader) {\n\tvar (\n\t\tnext = Read(data)\n\t\twg   = sync.WaitGroup{}\n\n\t\tthrottle = make(chan struct{}, r.Options.Threads)\n\t)\n\n\tfor i := 0; i < r.Options.Threads; i++ {\n\t\tthrottle <- struct{}{}\n\t}\n\n\tfor {\n\t\tu, err := next()\n\t\tif errors.Is(err, io.EOF) {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tlog.Println(fmt.Errorf(\"[error] parsing url %v: %w\", u, err))\n\t\t\tcontinue\n\t\t}\n\n\t\twg.Add(1)\n\t\tgo func(u *url.URL) {\n\t\t\tdefer func() {\n\t\t\t\tthrottle <- struct{}{}\n\t\t\t\twg.Done()\n\t\t\t}()\n\n\t\t\tresp, err := extractor.FetchResponse(u.String(), r.Options.Request.Method, r.Options.Request.Headers)\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(fmt.Errorf(\"[error] fetching response for url %s: %w\", u.String(), err))\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer resp.Body.Close()\n\n\t\t\tsources, err := extractor.ExtractSources(resp.Body)\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(fmt.Errorf(\"[error] extracting sources from response for url %s: %w\", u.String(), err))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tfiltered, err := extractor.Filter(sources, r.filters(u)...)\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(fmt.Errorf(\"[error] filtering sources for url %s: %w\", u.String(), err))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tfor source := range filtered {\n\t\t\t\tr.Results <- source\n\t\t\t}\n\t\t}(u)\n\n\t\t<-throttle\n\t}\n\n\twg.Wait()\n}\n\n// Read is a wrapper around the bufio.Scanner Text() method.\n// Upon reading from the input, the line is automatically parsed to a *url.URL.\n// An io.EOF error is returned when there are no more lines.\nfunc Read(input io.Reader) func() (*url.URL, error) {\n\tscanner := bufio.NewScanner(input)\n\treturn func() (*url.URL, error) {\n\t\tif !scanner.Scan() {\n\t\t\treturn nil, io.EOF\n\t\t}\n\n\t\treturn url.Parse(scanner.Text())\n\t}\n}\n\nfunc (r *runner) ProcessResponse(data io.Reader) {\n\tsources, err := extractor.ExtractSources(data)\n\tif err != nil {\n\t\tlog.Println(fmt.Errorf(\"[error] extracting sources from response file: %w\", err))\n\t}\n\n\tfiltered, err := extractor.Filter(sources, r.filters(nil)...)\n\tif err != nil {\n\t\tlog.Println(fmt.Errorf(\"[error] filtering sources from response file: %w\", err))\n\t\treturn\n\t}\n\n\tfor source := range filtered {\n\t\tr.Results <- source\n\t}\n}\n\nfunc (r *runner) filters(base *url.URL) (options []func([]url.URL) []url.URL) {\n\tif r.Options.Complete && base != nil {\n\t\toptions = append(options, extractor.WithComplete(base))\n\t}\n\n\tif r.Options.Resolve {\n\t\toptions = append(options, extractor.WithResolve())\n\t}\n\n\treturn\n}\n", "source_code_before": null, "methods": [{"name": "New", "start_line": 23, "end_line": 36}, {"name": "", "start_line": 44, "end_line": 59}, {"name": "Run", "start_line": 39, "end_line": 64}, {"name": "listen", "start_line": 66, "end_line": 81}, {"name": "", "start_line": 109, "end_line": 112}, {"name": "", "start_line": 108, "end_line": 136}, {"name": "ProcessURLs", "start_line": 85, "end_line": 142}, {"name": "", "start_line": 149, "end_line": 155}, {"name": "Read", "start_line": 147, "end_line": 156}, {"name": "ProcessResponse", "start_line": 158, "end_line": 173}, {"name": "filters", "start_line": 175, "end_line": 185}], "methods_before": [], "changed_methods": [{"name": "", "start_line": 44, "end_line": 59}, {"name": "filters", "start_line": 175, "end_line": 185}, {"name": "listen", "start_line": 66, "end_line": 81}, {"name": "ProcessURLs", "start_line": 85, "end_line": 142}, {"name": "New", "start_line": 23, "end_line": 36}, {"name": "", "start_line": 108, "end_line": 136}, {"name": "Run", "start_line": 39, "end_line": 64}, {"name": "Read", "start_line": 147, "end_line": 156}, {"name": "ProcessResponse", "start_line": 158, "end_line": 173}], "nloc": 145, "complexity": 36, "token_count": 915}], "dmm_unit_size": 1.0, "dmm_unit_complexity": 1.0, "dmm_unit_interfacing": 1.0},
    {"hash": "13c8b9e1fa2de7f8650da8ae234197283905782e", "msg": "Update install command to reflect correct version", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2024-07-07 21:09:22+02:00", "author_timezone": -7200, "committer_date": "2024-07-07 21:09:22+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["86ea726c97e9b7d57309af5cf53b2144240c83c4"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -31,7 +31,7 @@\n \n To install `getJS`, use the following command:\n \n-`go get github.com/003random/getJS`\n+`go install github.com/003random/getJS/v2@latest`\n \n ## CLI Usage\n \n", "diff_parsed": {"added": [[34, "`go install github.com/003random/getJS/v2@latest`"]], "deleted": [[34, "`go get github.com/003random/getJS`"]]}, "added_lines": 1, "deleted_lines": 1, "source_code": "<h2 align=\"center\">JavaScript Extraction CLI & Package</h2>\n<p align=\"center\">\n  <a href=\"https://pkg.go.dev/github.com/003random/getJS\">\n    <img src=\"https://pkg.go.dev/badge/github.com/003random/getJS\">\n  </a>\n  <a href=\"https://github.com/003random/getJS/releases\">\n    <img src=\"https://img.shields.io/github/release/003random/getJS.svg\">\n  </a>\n    <a href=\"https://github.com/003random/getJS/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/badge/license-MIT-blue.svg\">\n  </a>\n</p>\n\n\n[getJS](https://github.com/003random/getJS) is a versatile tool designed to extract JavaScript sources from web pages. It offers both a command-line interface (CLI) for straightforward URL processing and a package interface for more customized integrations.\n\n## Table of Contents\n\n- [Installation](#installation)\n- [CLI Usage](#cli-usage)\n  - [Options](#options)\n  - [Examples](#examples)\n- [Package Usage](#package-usage)\n  - [Importing the Extractor](#importing-the-extractor)\n  - [Example](#example)\n- [Version Information](#version-information)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\nTo install `getJS`, use the following command:\n\n`go install github.com/003random/getJS/v2@latest`\n\n## CLI Usage\n\n### Options\n\n`getJS` provides several command-line options to customize its behavior:\n\n- `-url string`: The URL from which JavaScript sources should be extracted.\n- `-input string`: Optional URLs input files. Each URL should be on a new line in plain text format. Can be used multiple times.\n- `-output string`: Optional output file where results are written to. Can be used multiple times.\n- `-complete`: Complete/Autofill relative URLs by adding the current origin.\n- `-resolve`: Resolve the JavaScript files. Can only be used in combination with `--complete`.\n- `-threads int`: The number of processing threads to spawn (default: 2).\n- `-verbose`: Print verbose runtime information and errors.\n- `-method string`: The request method used to fetch remote contents (default: \"GET\").\n- `-header string`: Optional request headers to add to the requests. Can be used multiple times.\n- `-timeout duration`: The request timeout while fetching remote contents (default: 5s).\n\n### Examples\n\n#### Extracting JavaScript from a Single URL\n\n`getJS -url https://destroy.ai`\n\nor \n\n`curl https://destroy.ai | getJS`\n\n#### Using Custom Request Options\n\n`getJS -url \"http://example.com\" -header \"User-Agent: foo bar\" -method POST --timeout=15s`\n\n#### Processing Multiple URLs from a File\n\n`getJS -input foo.txt -input bar.txt`\n\n#### Saving Results to an Output File\n\n`getJS -url \"http://example.com\" -output results.txt`\n\n## Package Usage\n\n### Importing the Extractor\n\nTo use `getJS` as a package, you need to import the `extractor` package and utilize its functions directly.\n\n### Example\n\n```Go\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n\n    \"github.com/003random/getJS/extractor\"\n)\n\nfunc main() {\n    baseURL, err := url.Parse(\"https://google.com\")\n    if (err != nil) {\n        log.Fatalf(\"Error parsing base URL: %v\", err)\n    }\n\n    resp, err := extractor.FetchResponse(baseURL.String(), \"GET\", http.Header{})\n    if (err != nil) {\n        log.Fatalf(\"Error fetching response: %v\", err)\n    }\n    defer resp.Body.Close()\n\n    // Custom extraction points (optional).\n    extractionPoints := map[string][]string{\n        \"script\": {\"src\", \"data-src\"},\n        \"a\": {\"href\"},\n    }\n\n    sources, err := extractor.ExtractSources(resp.Body, extractionPoints)\n    if (err != nil) {\n        log.Fatalf(\"Error extracting sources: %v\", err)\n    }\n\n    // Filtering and extending extracted sources.\n    filtered, err := extractor.Filter(sources, extractor.WithComplete(baseURL), extractor.WithResolve())\n    if (err != nil) {\n        log.Fatalf(\"Error filtering sources: %v\", err)\n    }\n\n    for source := range filtered {\n        fmt.Println(source.String())\n    }\n}\n```\n\n## Version Information\n\nThis is the v2 version of `getJS`. The original version can be found under the tag [v1](https://github.com/003random/getJS/tree/v1).\n\n## Contributing\n\nContributions are welcome! Please open an issue or submit a pull request for any bugs, feature requests, or improvements.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](https://github.com/003random/getJS/blob/master/LICENSE) file for details.\n", "source_code_before": "<h2 align=\"center\">JavaScript Extraction CLI & Package</h2>\n<p align=\"center\">\n  <a href=\"https://pkg.go.dev/github.com/003random/getJS\">\n    <img src=\"https://pkg.go.dev/badge/github.com/003random/getJS\">\n  </a>\n  <a href=\"https://github.com/003random/getJS/releases\">\n    <img src=\"https://img.shields.io/github/release/003random/getJS.svg\">\n  </a>\n    <a href=\"https://github.com/003random/getJS/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/badge/license-MIT-blue.svg\">\n  </a>\n</p>\n\n\n[getJS](https://github.com/003random/getJS) is a versatile tool designed to extract JavaScript sources from web pages. It offers both a command-line interface (CLI) for straightforward URL processing and a package interface for more customized integrations.\n\n## Table of Contents\n\n- [Installation](#installation)\n- [CLI Usage](#cli-usage)\n  - [Options](#options)\n  - [Examples](#examples)\n- [Package Usage](#package-usage)\n  - [Importing the Extractor](#importing-the-extractor)\n  - [Example](#example)\n- [Version Information](#version-information)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\nTo install `getJS`, use the following command:\n\n`go get github.com/003random/getJS`\n\n## CLI Usage\n\n### Options\n\n`getJS` provides several command-line options to customize its behavior:\n\n- `-url string`: The URL from which JavaScript sources should be extracted.\n- `-input string`: Optional URLs input files. Each URL should be on a new line in plain text format. Can be used multiple times.\n- `-output string`: Optional output file where results are written to. Can be used multiple times.\n- `-complete`: Complete/Autofill relative URLs by adding the current origin.\n- `-resolve`: Resolve the JavaScript files. Can only be used in combination with `--complete`.\n- `-threads int`: The number of processing threads to spawn (default: 2).\n- `-verbose`: Print verbose runtime information and errors.\n- `-method string`: The request method used to fetch remote contents (default: \"GET\").\n- `-header string`: Optional request headers to add to the requests. Can be used multiple times.\n- `-timeout duration`: The request timeout while fetching remote contents (default: 5s).\n\n### Examples\n\n#### Extracting JavaScript from a Single URL\n\n`getJS -url https://destroy.ai`\n\nor \n\n`curl https://destroy.ai | getJS`\n\n#### Using Custom Request Options\n\n`getJS -url \"http://example.com\" -header \"User-Agent: foo bar\" -method POST --timeout=15s`\n\n#### Processing Multiple URLs from a File\n\n`getJS -input foo.txt -input bar.txt`\n\n#### Saving Results to an Output File\n\n`getJS -url \"http://example.com\" -output results.txt`\n\n## Package Usage\n\n### Importing the Extractor\n\nTo use `getJS` as a package, you need to import the `extractor` package and utilize its functions directly.\n\n### Example\n\n```Go\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n\n    \"github.com/003random/getJS/extractor\"\n)\n\nfunc main() {\n    baseURL, err := url.Parse(\"https://google.com\")\n    if (err != nil) {\n        log.Fatalf(\"Error parsing base URL: %v\", err)\n    }\n\n    resp, err := extractor.FetchResponse(baseURL.String(), \"GET\", http.Header{})\n    if (err != nil) {\n        log.Fatalf(\"Error fetching response: %v\", err)\n    }\n    defer resp.Body.Close()\n\n    // Custom extraction points (optional).\n    extractionPoints := map[string][]string{\n        \"script\": {\"src\", \"data-src\"},\n        \"a\": {\"href\"},\n    }\n\n    sources, err := extractor.ExtractSources(resp.Body, extractionPoints)\n    if (err != nil) {\n        log.Fatalf(\"Error extracting sources: %v\", err)\n    }\n\n    // Filtering and extending extracted sources.\n    filtered, err := extractor.Filter(sources, extractor.WithComplete(baseURL), extractor.WithResolve())\n    if (err != nil) {\n        log.Fatalf(\"Error filtering sources: %v\", err)\n    }\n\n    for source := range filtered {\n        fmt.Println(source.String())\n    }\n}\n```\n\n## Version Information\n\nThis is the v2 version of `getJS`. The original version can be found under the tag [v1](https://github.com/003random/getJS/tree/v1).\n\n## Contributing\n\nContributions are welcome! Please open an issue or submit a pull request for any bugs, feature requests, or improvements.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](https://github.com/003random/getJS/blob/master/LICENSE) file for details.\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "eaab0c4668e82399b52664df8ef68eae51eb6822", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2024-07-07 21:29:51+02:00", "author_timezone": -7200, "committer_date": "2024-07-07 21:29:51+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["13c8b9e1fa2de7f8650da8ae234197283905782e"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 3, "insertions": 3, "lines": 6, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -1,4 +1,5 @@\n-<h2 align=\"center\">JavaScript Extraction CLI & Package</h2>\n+\n+<h1 align=\"center\">JavaScript Extraction CLI & Package</h1>\n <p align=\"center\">\n   <a href=\"https://pkg.go.dev/github.com/003random/getJS\">\n     <img src=\"https://pkg.go.dev/badge/github.com/003random/getJS\">\n@@ -12,8 +13,7 @@\n </p>\n \n \n-[getJS](https://github.com/003random/getJS) is a versatile tool designed to extract JavaScript sources from web pages. It offers both a command-line interface (CLI) for straightforward URL processing and a package interface for more customized integrations.\n-\n+This is a powerful tool for extracting JavaScript sources from URLs and weg pages / HTTP responses. It offers a command-line interface (CLI) for straightforward URL processing and a package interface for custom integrations, making it ideal for pentesters, bug bounty hunters, and developers needing to extract JS sources efficiently.\n ## Table of Contents\n \n - [Installation](#installation)\n", "diff_parsed": {"added": [[1, ""], [2, "<h1 align=\"center\">JavaScript Extraction CLI & Package</h1>"], [16, "This is a powerful tool for extracting JavaScript sources from URLs and weg pages / HTTP responses. It offers a command-line interface (CLI) for straightforward URL processing and a package interface for custom integrations, making it ideal for pentesters, bug bounty hunters, and developers needing to extract JS sources efficiently."]], "deleted": [[1, "<h2 align=\"center\">JavaScript Extraction CLI & Package</h2>"], [15, "[getJS](https://github.com/003random/getJS) is a versatile tool designed to extract JavaScript sources from web pages. It offers both a command-line interface (CLI) for straightforward URL processing and a package interface for more customized integrations."], [16, ""]]}, "added_lines": 3, "deleted_lines": 3, "source_code": "\n<h1 align=\"center\">JavaScript Extraction CLI & Package</h1>\n<p align=\"center\">\n  <a href=\"https://pkg.go.dev/github.com/003random/getJS\">\n    <img src=\"https://pkg.go.dev/badge/github.com/003random/getJS\">\n  </a>\n  <a href=\"https://github.com/003random/getJS/releases\">\n    <img src=\"https://img.shields.io/github/release/003random/getJS.svg\">\n  </a>\n    <a href=\"https://github.com/003random/getJS/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/badge/license-MIT-blue.svg\">\n  </a>\n</p>\n\n\nThis is a powerful tool for extracting JavaScript sources from URLs and weg pages / HTTP responses. It offers a command-line interface (CLI) for straightforward URL processing and a package interface for custom integrations, making it ideal for pentesters, bug bounty hunters, and developers needing to extract JS sources efficiently.\n## Table of Contents\n\n- [Installation](#installation)\n- [CLI Usage](#cli-usage)\n  - [Options](#options)\n  - [Examples](#examples)\n- [Package Usage](#package-usage)\n  - [Importing the Extractor](#importing-the-extractor)\n  - [Example](#example)\n- [Version Information](#version-information)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\nTo install `getJS`, use the following command:\n\n`go install github.com/003random/getJS/v2@latest`\n\n## CLI Usage\n\n### Options\n\n`getJS` provides several command-line options to customize its behavior:\n\n- `-url string`: The URL from which JavaScript sources should be extracted.\n- `-input string`: Optional URLs input files. Each URL should be on a new line in plain text format. Can be used multiple times.\n- `-output string`: Optional output file where results are written to. Can be used multiple times.\n- `-complete`: Complete/Autofill relative URLs by adding the current origin.\n- `-resolve`: Resolve the JavaScript files. Can only be used in combination with `--complete`.\n- `-threads int`: The number of processing threads to spawn (default: 2).\n- `-verbose`: Print verbose runtime information and errors.\n- `-method string`: The request method used to fetch remote contents (default: \"GET\").\n- `-header string`: Optional request headers to add to the requests. Can be used multiple times.\n- `-timeout duration`: The request timeout while fetching remote contents (default: 5s).\n\n### Examples\n\n#### Extracting JavaScript from a Single URL\n\n`getJS -url https://destroy.ai`\n\nor \n\n`curl https://destroy.ai | getJS`\n\n#### Using Custom Request Options\n\n`getJS -url \"http://example.com\" -header \"User-Agent: foo bar\" -method POST --timeout=15s`\n\n#### Processing Multiple URLs from a File\n\n`getJS -input foo.txt -input bar.txt`\n\n#### Saving Results to an Output File\n\n`getJS -url \"http://example.com\" -output results.txt`\n\n## Package Usage\n\n### Importing the Extractor\n\nTo use `getJS` as a package, you need to import the `extractor` package and utilize its functions directly.\n\n### Example\n\n```Go\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n\n    \"github.com/003random/getJS/extractor\"\n)\n\nfunc main() {\n    baseURL, err := url.Parse(\"https://google.com\")\n    if (err != nil) {\n        log.Fatalf(\"Error parsing base URL: %v\", err)\n    }\n\n    resp, err := extractor.FetchResponse(baseURL.String(), \"GET\", http.Header{})\n    if (err != nil) {\n        log.Fatalf(\"Error fetching response: %v\", err)\n    }\n    defer resp.Body.Close()\n\n    // Custom extraction points (optional).\n    extractionPoints := map[string][]string{\n        \"script\": {\"src\", \"data-src\"},\n        \"a\": {\"href\"},\n    }\n\n    sources, err := extractor.ExtractSources(resp.Body, extractionPoints)\n    if (err != nil) {\n        log.Fatalf(\"Error extracting sources: %v\", err)\n    }\n\n    // Filtering and extending extracted sources.\n    filtered, err := extractor.Filter(sources, extractor.WithComplete(baseURL), extractor.WithResolve())\n    if (err != nil) {\n        log.Fatalf(\"Error filtering sources: %v\", err)\n    }\n\n    for source := range filtered {\n        fmt.Println(source.String())\n    }\n}\n```\n\n## Version Information\n\nThis is the v2 version of `getJS`. The original version can be found under the tag [v1](https://github.com/003random/getJS/tree/v1).\n\n## Contributing\n\nContributions are welcome! Please open an issue or submit a pull request for any bugs, feature requests, or improvements.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](https://github.com/003random/getJS/blob/master/LICENSE) file for details.\n", "source_code_before": "<h2 align=\"center\">JavaScript Extraction CLI & Package</h2>\n<p align=\"center\">\n  <a href=\"https://pkg.go.dev/github.com/003random/getJS\">\n    <img src=\"https://pkg.go.dev/badge/github.com/003random/getJS\">\n  </a>\n  <a href=\"https://github.com/003random/getJS/releases\">\n    <img src=\"https://img.shields.io/github/release/003random/getJS.svg\">\n  </a>\n    <a href=\"https://github.com/003random/getJS/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/badge/license-MIT-blue.svg\">\n  </a>\n</p>\n\n\n[getJS](https://github.com/003random/getJS) is a versatile tool designed to extract JavaScript sources from web pages. It offers both a command-line interface (CLI) for straightforward URL processing and a package interface for more customized integrations.\n\n## Table of Contents\n\n- [Installation](#installation)\n- [CLI Usage](#cli-usage)\n  - [Options](#options)\n  - [Examples](#examples)\n- [Package Usage](#package-usage)\n  - [Importing the Extractor](#importing-the-extractor)\n  - [Example](#example)\n- [Version Information](#version-information)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\nTo install `getJS`, use the following command:\n\n`go install github.com/003random/getJS/v2@latest`\n\n## CLI Usage\n\n### Options\n\n`getJS` provides several command-line options to customize its behavior:\n\n- `-url string`: The URL from which JavaScript sources should be extracted.\n- `-input string`: Optional URLs input files. Each URL should be on a new line in plain text format. Can be used multiple times.\n- `-output string`: Optional output file where results are written to. Can be used multiple times.\n- `-complete`: Complete/Autofill relative URLs by adding the current origin.\n- `-resolve`: Resolve the JavaScript files. Can only be used in combination with `--complete`.\n- `-threads int`: The number of processing threads to spawn (default: 2).\n- `-verbose`: Print verbose runtime information and errors.\n- `-method string`: The request method used to fetch remote contents (default: \"GET\").\n- `-header string`: Optional request headers to add to the requests. Can be used multiple times.\n- `-timeout duration`: The request timeout while fetching remote contents (default: 5s).\n\n### Examples\n\n#### Extracting JavaScript from a Single URL\n\n`getJS -url https://destroy.ai`\n\nor \n\n`curl https://destroy.ai | getJS`\n\n#### Using Custom Request Options\n\n`getJS -url \"http://example.com\" -header \"User-Agent: foo bar\" -method POST --timeout=15s`\n\n#### Processing Multiple URLs from a File\n\n`getJS -input foo.txt -input bar.txt`\n\n#### Saving Results to an Output File\n\n`getJS -url \"http://example.com\" -output results.txt`\n\n## Package Usage\n\n### Importing the Extractor\n\nTo use `getJS` as a package, you need to import the `extractor` package and utilize its functions directly.\n\n### Example\n\n```Go\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n\n    \"github.com/003random/getJS/extractor\"\n)\n\nfunc main() {\n    baseURL, err := url.Parse(\"https://google.com\")\n    if (err != nil) {\n        log.Fatalf(\"Error parsing base URL: %v\", err)\n    }\n\n    resp, err := extractor.FetchResponse(baseURL.String(), \"GET\", http.Header{})\n    if (err != nil) {\n        log.Fatalf(\"Error fetching response: %v\", err)\n    }\n    defer resp.Body.Close()\n\n    // Custom extraction points (optional).\n    extractionPoints := map[string][]string{\n        \"script\": {\"src\", \"data-src\"},\n        \"a\": {\"href\"},\n    }\n\n    sources, err := extractor.ExtractSources(resp.Body, extractionPoints)\n    if (err != nil) {\n        log.Fatalf(\"Error extracting sources: %v\", err)\n    }\n\n    // Filtering and extending extracted sources.\n    filtered, err := extractor.Filter(sources, extractor.WithComplete(baseURL), extractor.WithResolve())\n    if (err != nil) {\n        log.Fatalf(\"Error filtering sources: %v\", err)\n    }\n\n    for source := range filtered {\n        fmt.Println(source.String())\n    }\n}\n```\n\n## Version Information\n\nThis is the v2 version of `getJS`. The original version can be found under the tag [v1](https://github.com/003random/getJS/tree/v1).\n\n## Contributing\n\nContributions are welcome! Please open an issue or submit a pull request for any bugs, feature requests, or improvements.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](https://github.com/003random/getJS/blob/master/LICENSE) file for details.\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "8171664c61263d716c089448bcae9894854b14df", "msg": "Update README.md", "author": {"name": "Samuel", "email": "funwithes6@gmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2024-07-16 15:53:53+08:00", "author_timezone": -28800, "committer_date": "2024-07-16 15:53:53+08:00", "committer_timezone": -28800, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["eaab0c4668e82399b52664df8ef68eae51eb6822"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -13,7 +13,7 @@\n </p>\n \n \n-This is a powerful tool for extracting JavaScript sources from URLs and weg pages / HTTP responses. It offers a command-line interface (CLI) for straightforward URL processing and a package interface for custom integrations, making it ideal for pentesters, bug bounty hunters, and developers needing to extract JS sources efficiently.\n+This is a powerful tool for extracting JavaScript sources from URLs and web pages / HTTP responses. It offers a command-line interface (CLI) for straightforward URL processing and a package interface for custom integrations, making it ideal for pentesters, bug bounty hunters, and developers needing to extract JS sources efficiently.\n ## Table of Contents\n \n - [Installation](#installation)\n", "diff_parsed": {"added": [[16, "This is a powerful tool for extracting JavaScript sources from URLs and web pages / HTTP responses. It offers a command-line interface (CLI) for straightforward URL processing and a package interface for custom integrations, making it ideal for pentesters, bug bounty hunters, and developers needing to extract JS sources efficiently."]], "deleted": [[16, "This is a powerful tool for extracting JavaScript sources from URLs and weg pages / HTTP responses. It offers a command-line interface (CLI) for straightforward URL processing and a package interface for custom integrations, making it ideal for pentesters, bug bounty hunters, and developers needing to extract JS sources efficiently."]]}, "added_lines": 1, "deleted_lines": 1, "source_code": "\n<h1 align=\"center\">JavaScript Extraction CLI & Package</h1>\n<p align=\"center\">\n  <a href=\"https://pkg.go.dev/github.com/003random/getJS\">\n    <img src=\"https://pkg.go.dev/badge/github.com/003random/getJS\">\n  </a>\n  <a href=\"https://github.com/003random/getJS/releases\">\n    <img src=\"https://img.shields.io/github/release/003random/getJS.svg\">\n  </a>\n    <a href=\"https://github.com/003random/getJS/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/badge/license-MIT-blue.svg\">\n  </a>\n</p>\n\n\nThis is a powerful tool for extracting JavaScript sources from URLs and web pages / HTTP responses. It offers a command-line interface (CLI) for straightforward URL processing and a package interface for custom integrations, making it ideal for pentesters, bug bounty hunters, and developers needing to extract JS sources efficiently.\n## Table of Contents\n\n- [Installation](#installation)\n- [CLI Usage](#cli-usage)\n  - [Options](#options)\n  - [Examples](#examples)\n- [Package Usage](#package-usage)\n  - [Importing the Extractor](#importing-the-extractor)\n  - [Example](#example)\n- [Version Information](#version-information)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\nTo install `getJS`, use the following command:\n\n`go install github.com/003random/getJS/v2@latest`\n\n## CLI Usage\n\n### Options\n\n`getJS` provides several command-line options to customize its behavior:\n\n- `-url string`: The URL from which JavaScript sources should be extracted.\n- `-input string`: Optional URLs input files. Each URL should be on a new line in plain text format. Can be used multiple times.\n- `-output string`: Optional output file where results are written to. Can be used multiple times.\n- `-complete`: Complete/Autofill relative URLs by adding the current origin.\n- `-resolve`: Resolve the JavaScript files. Can only be used in combination with `--complete`.\n- `-threads int`: The number of processing threads to spawn (default: 2).\n- `-verbose`: Print verbose runtime information and errors.\n- `-method string`: The request method used to fetch remote contents (default: \"GET\").\n- `-header string`: Optional request headers to add to the requests. Can be used multiple times.\n- `-timeout duration`: The request timeout while fetching remote contents (default: 5s).\n\n### Examples\n\n#### Extracting JavaScript from a Single URL\n\n`getJS -url https://destroy.ai`\n\nor \n\n`curl https://destroy.ai | getJS`\n\n#### Using Custom Request Options\n\n`getJS -url \"http://example.com\" -header \"User-Agent: foo bar\" -method POST --timeout=15s`\n\n#### Processing Multiple URLs from a File\n\n`getJS -input foo.txt -input bar.txt`\n\n#### Saving Results to an Output File\n\n`getJS -url \"http://example.com\" -output results.txt`\n\n## Package Usage\n\n### Importing the Extractor\n\nTo use `getJS` as a package, you need to import the `extractor` package and utilize its functions directly.\n\n### Example\n\n```Go\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n\n    \"github.com/003random/getJS/extractor\"\n)\n\nfunc main() {\n    baseURL, err := url.Parse(\"https://google.com\")\n    if (err != nil) {\n        log.Fatalf(\"Error parsing base URL: %v\", err)\n    }\n\n    resp, err := extractor.FetchResponse(baseURL.String(), \"GET\", http.Header{})\n    if (err != nil) {\n        log.Fatalf(\"Error fetching response: %v\", err)\n    }\n    defer resp.Body.Close()\n\n    // Custom extraction points (optional).\n    extractionPoints := map[string][]string{\n        \"script\": {\"src\", \"data-src\"},\n        \"a\": {\"href\"},\n    }\n\n    sources, err := extractor.ExtractSources(resp.Body, extractionPoints)\n    if (err != nil) {\n        log.Fatalf(\"Error extracting sources: %v\", err)\n    }\n\n    // Filtering and extending extracted sources.\n    filtered, err := extractor.Filter(sources, extractor.WithComplete(baseURL), extractor.WithResolve())\n    if (err != nil) {\n        log.Fatalf(\"Error filtering sources: %v\", err)\n    }\n\n    for source := range filtered {\n        fmt.Println(source.String())\n    }\n}\n```\n\n## Version Information\n\nThis is the v2 version of `getJS`. The original version can be found under the tag [v1](https://github.com/003random/getJS/tree/v1).\n\n## Contributing\n\nContributions are welcome! Please open an issue or submit a pull request for any bugs, feature requests, or improvements.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](https://github.com/003random/getJS/blob/master/LICENSE) file for details.\n", "source_code_before": "\n<h1 align=\"center\">JavaScript Extraction CLI & Package</h1>\n<p align=\"center\">\n  <a href=\"https://pkg.go.dev/github.com/003random/getJS\">\n    <img src=\"https://pkg.go.dev/badge/github.com/003random/getJS\">\n  </a>\n  <a href=\"https://github.com/003random/getJS/releases\">\n    <img src=\"https://img.shields.io/github/release/003random/getJS.svg\">\n  </a>\n    <a href=\"https://github.com/003random/getJS/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/badge/license-MIT-blue.svg\">\n  </a>\n</p>\n\n\nThis is a powerful tool for extracting JavaScript sources from URLs and weg pages / HTTP responses. It offers a command-line interface (CLI) for straightforward URL processing and a package interface for custom integrations, making it ideal for pentesters, bug bounty hunters, and developers needing to extract JS sources efficiently.\n## Table of Contents\n\n- [Installation](#installation)\n- [CLI Usage](#cli-usage)\n  - [Options](#options)\n  - [Examples](#examples)\n- [Package Usage](#package-usage)\n  - [Importing the Extractor](#importing-the-extractor)\n  - [Example](#example)\n- [Version Information](#version-information)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\nTo install `getJS`, use the following command:\n\n`go install github.com/003random/getJS/v2@latest`\n\n## CLI Usage\n\n### Options\n\n`getJS` provides several command-line options to customize its behavior:\n\n- `-url string`: The URL from which JavaScript sources should be extracted.\n- `-input string`: Optional URLs input files. Each URL should be on a new line in plain text format. Can be used multiple times.\n- `-output string`: Optional output file where results are written to. Can be used multiple times.\n- `-complete`: Complete/Autofill relative URLs by adding the current origin.\n- `-resolve`: Resolve the JavaScript files. Can only be used in combination with `--complete`.\n- `-threads int`: The number of processing threads to spawn (default: 2).\n- `-verbose`: Print verbose runtime information and errors.\n- `-method string`: The request method used to fetch remote contents (default: \"GET\").\n- `-header string`: Optional request headers to add to the requests. Can be used multiple times.\n- `-timeout duration`: The request timeout while fetching remote contents (default: 5s).\n\n### Examples\n\n#### Extracting JavaScript from a Single URL\n\n`getJS -url https://destroy.ai`\n\nor \n\n`curl https://destroy.ai | getJS`\n\n#### Using Custom Request Options\n\n`getJS -url \"http://example.com\" -header \"User-Agent: foo bar\" -method POST --timeout=15s`\n\n#### Processing Multiple URLs from a File\n\n`getJS -input foo.txt -input bar.txt`\n\n#### Saving Results to an Output File\n\n`getJS -url \"http://example.com\" -output results.txt`\n\n## Package Usage\n\n### Importing the Extractor\n\nTo use `getJS` as a package, you need to import the `extractor` package and utilize its functions directly.\n\n### Example\n\n```Go\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n\n    \"github.com/003random/getJS/extractor\"\n)\n\nfunc main() {\n    baseURL, err := url.Parse(\"https://google.com\")\n    if (err != nil) {\n        log.Fatalf(\"Error parsing base URL: %v\", err)\n    }\n\n    resp, err := extractor.FetchResponse(baseURL.String(), \"GET\", http.Header{})\n    if (err != nil) {\n        log.Fatalf(\"Error fetching response: %v\", err)\n    }\n    defer resp.Body.Close()\n\n    // Custom extraction points (optional).\n    extractionPoints := map[string][]string{\n        \"script\": {\"src\", \"data-src\"},\n        \"a\": {\"href\"},\n    }\n\n    sources, err := extractor.ExtractSources(resp.Body, extractionPoints)\n    if (err != nil) {\n        log.Fatalf(\"Error extracting sources: %v\", err)\n    }\n\n    // Filtering and extending extracted sources.\n    filtered, err := extractor.Filter(sources, extractor.WithComplete(baseURL), extractor.WithResolve())\n    if (err != nil) {\n        log.Fatalf(\"Error filtering sources: %v\", err)\n    }\n\n    for source := range filtered {\n        fmt.Println(source.String())\n    }\n}\n```\n\n## Version Information\n\nThis is the v2 version of `getJS`. The original version can be found under the tag [v1](https://github.com/003random/getJS/tree/v1).\n\n## Contributing\n\nContributions are welcome! Please open an issue or submit a pull request for any bugs, feature requests, or improvements.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](https://github.com/003random/getJS/blob/master/LICENSE) file for details.\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "7d73cc0a3f9686c74a43a29eb04ac15253470d69", "msg": "Merge pull request #25 from 0x3c/patch-1\n\nTypo in readme", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2024-07-30 17:17:22+02:00", "author_timezone": -7200, "committer_date": "2024-07-30 17:17:22+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": true, "parents": ["eaab0c4668e82399b52664df8ef68eae51eb6822", "8171664c61263d716c089448bcae9894854b14df"], "project_name": "getJS", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/66b10d54/66b10d54/66b10d54/getJS", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null}
  ],
  "process_metrics": {
  "Week_1_2018-11-09": {
    "productivity": {
      "change_set": {
        "max": 1,
        "avg": 1.0
      },
      "commits_count": {
        "README.md": 15,
        "main.go": 7
      },
      "contributors_count": {
        "total": {
          "README.md": 1,
          "main.go": 2
        },
        "minor": {
          "README.md": 0,
          "main.go": 0
        }
      },
      "contributors_experience": {
        "README.md": 1,
        "main.go": 2
      },
      "hunks_count": {
        "README.md": 1,
        "main.go": 5
      },
      "lines_count": {
        "added": {
          "total": {
            "README.md": 42,
            "main.go": 854
          },
          "max": {
            "README.md": 15,
            "main.go": 227
          },
          "avg": {
            "README.md": 3,
            "main.go": 122
          }
        },
        "removed": {
          "total": {
            "README.md": 34,
            "main.go": 782
          },
          "max": {
            "README.md": 17,
            "main.go": 212
          },
          "avg": {
            "README.md": 2,
            "main.go": 112
          }
        },
        "noop_added": {
          "total": {
            "README.md": 11,
            "main.go": 91
          },
          "max": {
            "README.md": 3,
            "main.go": 30
          },
          "avg": {
            "README.md": 1,
            "main.go": 13
          }
        },
        "noop_removed": {
          "total": {
            "README.md": 6,
            "main.go": 77
          },
          "max": {
            "README.md": 2,
            "main.go": 29
          },
          "avg": {
            "README.md": 0,
            "main.go": 11
          }
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 1712,
          "max": 1636,
          "avg": 856
        },
        "net_churn": {
          "count": 80,
          "max": 72,
          "avg": 40
        },
        "added_removed": {
          "added": 896,
          "removed": 816
        },
        "true_churn": {
          "overall": {
            "contribution": 896,
            "churn": 281
          },
          "per_author": {
            "003random": {
              "contribution": 669,
              "churn": 281
            },
            "RJP": {
              "contribution": 227,
              "churn": 0
            }
          },
          "per_file": {
            "README.md": {
              "contribution": 42,
              "churn": 7
            },
            "main.go": {
              "contribution": 854,
              "churn": 274
            }
          }
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {
          "README.md": 0.0,
          "main.go": 0.0
        },
        "overall_bug_work_percent": 0.0,
        "total_bug_lines": 0,
        "total_lines": 1712
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 14,
        "total_changed_lines": 1159,
        "moved_lines_percent": 0.0,
        "copy_pasted_lines_percent": 1.2079378774805867
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0.0
        },
        "doc_coverage": {
          "files": 1,
          "lines": 2422,
          "percent": 75.56942277691108
        },
        "total": {
          "files": 2,
          "lines": 3205
        },
        "quality_score": 37.78471138845554
      },
      "meaningful_code": {
        "total": {
          "files": 2,
          "lines": 3205,
          "meaningful_lines": 1065,
          "meaningful_percent": 33.229329173166924
        },
        "quality_score": 37.78471138845554,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 1712
        },
        "auto_generated": {
          "long_sequences": 4,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 4,
          "percent": 0.12480499219968799
        }
      }
    },
    "timings": {
      "diff_delta": {
        "003random@protonmail.com": {
          "total_diff_delta": 435.4,
          "total_commits": 21,
          "weekly_velocity": {
            "2018-11-05": {
              "diff_delta": 327.25,
              "lines_added": 123,
              "lines_updated": 157,
              "lines_deleted": 270,
              "lines_moved": 190,
              "commits": 18,
              "files_changed": 2,
              "active_days": 3,
              "velocity_per_day": 109.08333333333333
            },
            "2018-11-12": {
              "diff_delta": 108.15,
              "lines_added": 13,
              "lines_updated": 64,
              "lines_deleted": 141,
              "lines_moved": 119,
              "commits": 3,
              "files_changed": 2,
              "active_days": 1,
              "velocity_per_day": 108.15
            }
          }
        },
        "rjp@debian8svm.debian8svm": {
          "total_diff_delta": 112.2,
          "total_commits": 1,
          "weekly_velocity": {
            "2018-11-05": {
              "diff_delta": 112.2,
              "lines_added": 12,
              "lines_updated": 76,
              "lines_deleted": 126,
              "lines_moved": 117,
              "commits": 1,
              "files_changed": 1,
              "active_days": 1,
              "velocity_per_day": 112.2
            }
          }
        }
      },
      "code_provenance": {
        "003random@protonmail.com": {
          "weekly_provenance": {
            "2018-11-05": {
              "new_code_lines": 279,
              "recent_code_lines": 16,
              "old_code_lines": 2,
              "legacy_code_lines": 0,
              "total_lines": 297,
              "new_code_percent": 93.93939393939394,
              "recent_code_percent": 5.387205387205387,
              "old_code_percent": 0.6734006734006733,
              "legacy_code_percent": 0.0
            },
            "2018-11-12": {
              "new_code_lines": 128,
              "recent_code_lines": 4,
              "old_code_lines": 0,
              "legacy_code_lines": 0,
              "total_lines": 132,
              "new_code_percent": 96.96969696969697,
              "recent_code_percent": 3.0303030303030303,
              "old_code_percent": 0.0,
              "legacy_code_percent": 0.0
            }
          }
        },
        "rjp@debian8svm.debian8svm": {
          "weekly_provenance": {
            "2018-11-05": {
              "new_code_lines": 137,
              "recent_code_lines": 0,
              "old_code_lines": 0,
              "legacy_code_lines": 0,
              "total_lines": 137,
              "new_code_percent": 100.0,
              "recent_code_percent": 0.0,
              "old_code_percent": 0.0,
              "legacy_code_percent": 0.0
            }
          }
        }
      },
      "developer_hours": {
        "003random@protonmail.com": {
          "total_estimated_hours": 6.947666666666667,
          "total_sessions": 4,
          "weekly_hours": {
            "2018-W45": {
              "estimated_hours": 6.05,
              "sessions": 3,
              "commits": 18,
              "hours_per_day": 2.02
            },
            "2018-W46": {
              "estimated_hours": 0.9,
              "sessions": 1,
              "commits": 3,
              "hours_per_day": 0.9
            }
          }
        },
        "rjp@debian8svm.debian8svm": {
          "total_estimated_hours": 0.5625,
          "total_sessions": 1,
          "weekly_hours": {
            "2018-W45": {
              "estimated_hours": 0.56,
              "sessions": 1,
              "commits": 1,
              "hours_per_day": 0.56
            }
          }
        }
      },
      "code_domain": {
        "003random@protonmail.com": {
          "total_by_domain": {
            "docs": 76,
            "backend": 1197
          },
          "weekly_domains": {
            "2018-11-05": {
              "domains": {
                "docs": 63,
                "backend": 805
              },
              "total_changes": 868,
              "percentages": {
                "docs": 7.258064516129033,
                "backend": 92.74193548387096
              }
            },
            "2018-11-12": {
              "domains": {
                "backend": 392,
                "docs": 13
              },
              "total_changes": 405,
              "percentages": {
                "backend": 96.79012345679013,
                "docs": 3.2098765432098766
              }
            }
          },
          "domain_percentages": {
            "docs": 5.970149253731343,
            "backend": 94.02985074626866
          }
        },
        "rjp@debian8svm.debian8svm": {
          "total_by_domain": {
            "backend": 439
          },
          "weekly_domains": {
            "2018-11-05": {
              "domains": {
                "backend": 439
              },
              "total_changes": 439,
              "percentages": {
                "backend": 100.0
              }
            }
          },
          "domain_percentages": {
            "backend": 100.0
          }
        }
      },
      "comprehensive_time_analysis": {
        "003random@protonmail.com": {
          "basic_stats": {
            "total_commits": 21,
            "total_repos": 1,
            "first_commit_date": "2018-11-09T18:53:42+01:00",
            "last_commit_date": "2018-11-15T00:41:35+01:00",
            "total_span_days": 5.24,
            "commits_per_day": 4.006,
            "total_lines_changed": 1273,
            "total_files_changed": 21
          },
          "timing_patterns": {
            "mean_interval_hours": 6.29,
            "median_interval_hours": 0.05,
            "min_interval_minutes": 0.22,
            "max_interval_days": 3.03
          },
          "work_sessions": {
            "session_count": 4,
            "avg_session_length_hours": 1.07,
            "max_session_length_hours": 3.76,
            "avg_commits_per_session": 5.25,
            "max_commits_per_session": 13,
            "sessions": [
              {
                "start": "2018-11-09T18:53:42+01:00",
                "end": "2018-11-09T22:39:19+01:00",
                "length_hours": 3.76,
                "commits": 13
              },
              {
                "start": "2018-11-10T20:32:15+01:00",
                "end": "2018-11-10T20:52:48+01:00",
                "length_hours": 0.34,
                "commits": 3
              },
              {
                "start": "2018-11-11T23:40:20+01:00",
                "end": "2018-11-11T23:42:30+01:00",
                "length_hours": 0.04,
                "commits": 2
              },
              {
                "start": "2018-11-15T00:32:33+01:00",
                "end": "2018-11-15T00:41:35+01:00",
                "length_hours": 0.15,
                "commits": 3
              }
            ]
          },
          "daily_patterns": {
            "peak_day": 4,
            "peak_day_count": 13,
            "day_distribution": {
              "4": 13,
              "5": 3,
              "6": 2,
              "3": 3
            }
          },
          "weekly_patterns": {
            "total_weeks": 2,
            "avg_activities_per_week": 10.5,
            "max_activities_per_week": 16,
            "min_activities_per_week": 5
          },
          "downtime_analysis": {
            "short_breaks_count": 17,
            "long_breaks_count": 2,
            "avg_break_hours": 6.289902777777778
          },
          "rhythm_analysis": {
            "activities_per_day": 3.5,
            "consistency_score": 0.0
          },
          "sustained_activity": {
            "total_active_days": 4,
            "max_consecutive_days": 3,
            "avg_activities_per_active_day": 5.25
          }
        }
      }
    }
  },
  "Week_2_2018-11-16": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_3_2018-11-23": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_4_2018-11-30": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_5_2018-12-07": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_6_2018-12-14": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_7_2018-12-21": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_8_2018-12-28": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_9_2019-01-04": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_10_2019-01-11": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_11_2019-01-18": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_12_2019-01-25": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_13_2019-02-01": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_14_2019-02-08": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_15_2019-02-15": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_16_2019-02-22": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_17_2019-03-01": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_18_2019-03-08": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_19_2019-03-15": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_20_2019-03-22": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_21_2019-03-29": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_22_2019-04-05": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_23_2019-04-12": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_24_2019-04-19": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_25_2019-04-26": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_26_2019-05-03": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_27_2019-05-10": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_28_2019-05-17": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_29_2019-05-24": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_30_2019-05-31": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_31_2019-06-07": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_32_2019-06-14": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_33_2019-06-21": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_34_2019-06-28": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_35_2019-07-05": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_36_2019-07-12": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_37_2019-07-19": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_38_2019-07-26": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_39_2019-08-02": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_40_2019-08-09": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_41_2019-08-16": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_42_2019-08-23": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_43_2019-08-30": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_44_2019-09-06": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_45_2019-09-13": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_46_2019-09-20": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_47_2019-09-27": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_48_2019-10-04": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_49_2019-10-11": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_50_2019-10-18": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_51_2019-10-25": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_52_2019-11-01": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_53_2019-11-08": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_54_2019-11-15": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_55_2019-11-22": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_56_2019-11-29": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_57_2019-12-06": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_58_2019-12-13": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_59_2019-12-20": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_60_2019-12-27": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_61_2020-01-03": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_62_2020-01-10": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_63_2020-01-17": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_64_2020-01-24": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_65_2020-01-31": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_66_2020-02-07": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_67_2020-02-14": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_68_2020-02-21": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_69_2020-02-28": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_70_2020-03-06": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_71_2020-03-13": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_72_2020-03-20": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_73_2020-03-27": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_74_2020-04-03": {
    "productivity": {
      "change_set": {
        "max": 1,
        "avg": 1.0
      },
      "commits_count": {
        "main.go": 1
      },
      "contributors_count": {
        "total": {
          "main.go": 1
        },
        "minor": {
          "main.go": 0
        }
      },
      "contributors_experience": {
        "main.go": 1
      },
      "hunks_count": {
        "main.go": 2
      },
      "lines_count": {
        "added": {
          "total": {
            "main.go": 4
          },
          "max": {
            "main.go": 4
          },
          "avg": {
            "main.go": 4
          }
        },
        "removed": {
          "total": {
            "main.go": 0
          },
          "max": {
            "main.go": 0
          },
          "avg": {
            "main.go": 0
          }
        },
        "noop_added": {
          "total": {
            "main.go": 0
          },
          "max": {
            "main.go": 0
          },
          "avg": {
            "main.go": 0
          }
        },
        "noop_removed": {
          "total": {
            "main.go": 0
          },
          "max": {
            "main.go": 0
          },
          "avg": {
            "main.go": 0
          }
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 4,
          "max": 4,
          "avg": 4
        },
        "net_churn": {
          "count": 4,
          "max": 4,
          "avg": 4
        },
        "added_removed": {
          "added": 4,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 4,
            "churn": 0
          },
          "per_author": {
            "Abss": {
              "contribution": 4,
              "churn": 0
            }
          },
          "per_file": {
            "main.go": {
              "contribution": 4,
              "churn": 0
            }
          }
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {
          "main.go": 0.0
        },
        "overall_bug_work_percent": 0.0,
        "total_bug_lines": 0,
        "total_lines": 4
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 3,
        "moved_lines_percent": 0.0,
        "copy_pasted_lines_percent": 0.0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0.0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 108,
          "percent": 39.85239852398524
        },
        "total": {
          "files": 1,
          "lines": 271
        },
        "quality_score": 19.92619926199262
      },
      "meaningful_code": {
        "total": {
          "files": 1,
          "lines": 271,
          "meaningful_lines": 171,
          "meaningful_percent": 63.09963099630996
        },
        "quality_score": 19.92619926199262,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 4
        },
        "auto_generated": {
          "long_sequences": 2,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 2,
          "percent": 0.7380073800738007
        }
      }
    },
    "timings": {
      "diff_delta": {
        "33752861+abss0x7tbh@users.noreply.github.com": {
          "total_diff_delta": 3.0,
          "total_commits": 1,
          "weekly_velocity": {
            "2020-04-06": {
              "diff_delta": 3.0,
              "lines_added": 3,
              "lines_updated": 0,
              "lines_deleted": 0,
              "lines_moved": 0,
              "commits": 1,
              "files_changed": 1,
              "active_days": 1,
              "velocity_per_day": 3.0
            }
          }
        }
      },
      "code_provenance": {
        "33752861+abss0x7tbh@users.noreply.github.com": {
          "weekly_provenance": {
            "2020-04-06": {
              "new_code_lines": 1,
              "recent_code_lines": 0,
              "old_code_lines": 2,
              "legacy_code_lines": 0,
              "total_lines": 3,
              "new_code_percent": 33.33333333333333,
              "recent_code_percent": 0.0,
              "old_code_percent": 66.66666666666666,
              "legacy_code_percent": 0.0
            }
          }
        }
      },
      "developer_hours": {
        "33752861+abss0x7tbh@users.noreply.github.com": {
          "total_estimated_hours": 0.61875,
          "total_sessions": 1,
          "weekly_hours": {
            "2020-W15": {
              "estimated_hours": 0.62,
              "sessions": 1,
              "commits": 1,
              "hours_per_day": 0.62
            }
          }
        }
      },
      "code_domain": {
        "33752861+abss0x7tbh@users.noreply.github.com": {
          "total_by_domain": {
            "backend": 4
          },
          "weekly_domains": {
            "2020-04-06": {
              "domains": {
                "backend": 4
              },
              "total_changes": 4,
              "percentages": {
                "backend": 100.0
              }
            }
          },
          "domain_percentages": {
            "backend": 100.0
          }
        }
      },
      "comprehensive_time_analysis": {}
    }
  },
  "Week_75_2020-04-10": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_76_2020-04-17": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_77_2020-04-24": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0.0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {
        "003random@protonmail.com": {
          "total_diff_delta": 0,
          "total_commits": 1,
          "weekly_velocity": {
            "2020-04-20": {
              "diff_delta": 0,
              "lines_added": 0,
              "lines_updated": 0,
              "lines_deleted": 0,
              "lines_moved": 0,
              "commits": 1,
              "files_changed": 0,
              "active_days": 1,
              "velocity_per_day": 0.0
            }
          }
        }
      },
      "code_provenance": {},
      "developer_hours": {
        "003random@protonmail.com": {
          "total_estimated_hours": 0.61875,
          "total_sessions": 1,
          "weekly_hours": {
            "2020-W17": {
              "estimated_hours": 0.62,
              "sessions": 1,
              "commits": 1,
              "hours_per_day": 0.62
            }
          }
        }
      },
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_78_2020-05-01": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_79_2020-05-08": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_80_2020-05-15": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_81_2020-05-22": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_82_2020-05-29": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_83_2020-06-05": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_84_2020-06-12": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_85_2020-06-19": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_86_2020-06-26": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_87_2020-07-03": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_88_2020-07-10": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_89_2020-07-17": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_90_2020-07-24": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_91_2020-07-31": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_92_2020-08-07": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_93_2020-08-14": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_94_2020-08-21": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_95_2020-08-28": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_96_2020-09-04": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_97_2020-09-11": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_98_2020-09-18": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_99_2020-09-25": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_100_2020-10-02": {
    "productivity": {
      "change_set": {
        "max": 1,
        "avg": 0.5454545454545454
      },
      "commits_count": {
        "main.go": 5,
        "README.md": 1
      },
      "contributors_count": {
        "total": {
          "main.go": 2,
          "README.md": 1
        },
        "minor": {
          "main.go": 0,
          "README.md": 0
        }
      },
      "contributors_experience": {
        "main.go": 2,
        "README.md": 1
      },
      "hunks_count": {
        "main.go": 6,
        "README.md": 9
      },
      "lines_count": {
        "added": {
          "total": {
            "main.go": 65,
            "README.md": 19
          },
          "max": {
            "main.go": 20,
            "README.md": 19
          },
          "avg": {
            "main.go": 13,
            "README.md": 19
          }
        },
        "removed": {
          "total": {
            "main.go": 37,
            "README.md": 15
          },
          "max": {
            "main.go": 12,
            "README.md": 15
          },
          "avg": {
            "main.go": 7,
            "README.md": 15
          }
        },
        "noop_added": {
          "total": {
            "main.go": 6,
            "README.md": 0
          },
          "max": {
            "main.go": 3,
            "README.md": 0
          },
          "avg": {
            "main.go": 1,
            "README.md": 0
          }
        },
        "noop_removed": {
          "total": {
            "main.go": 2,
            "README.md": 0
          },
          "max": {
            "main.go": 1,
            "README.md": 0
          },
          "avg": {
            "main.go": 0,
            "README.md": 0
          }
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 136,
          "max": 102,
          "avg": 68
        },
        "net_churn": {
          "count": 32,
          "max": 28,
          "avg": 16
        },
        "added_removed": {
          "added": 84,
          "removed": 52
        },
        "true_churn": {
          "overall": {
            "contribution": 84,
            "churn": 11
          },
          "per_author": {
            "003random": {
              "contribution": 73,
              "churn": 11
            },
            "Miguel \u00c1ngel Jimeno": {
              "contribution": 11,
              "churn": 0
            }
          },
          "per_file": {
            "main.go": {
              "contribution": 65,
              "churn": 11
            },
            "README.md": {
              "contribution": 19,
              "churn": 0
            }
          }
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {
          "main.go": 24.509803921568626,
          "README.md": 0.0
        },
        "overall_bug_work_percent": 18.38235294117647,
        "total_bug_lines": 25,
        "total_lines": 136
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 1,
        "total_changed_lines": 116,
        "moved_lines_percent": 0.0,
        "copy_pasted_lines_percent": 0.8620689655172413
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0.0
        },
        "doc_coverage": {
          "files": 1,
          "lines": 716,
          "percent": 46.134020618556704
        },
        "total": {
          "files": 2,
          "lines": 1552
        },
        "quality_score": 23.067010309278352
      },
      "meaningful_code": {
        "total": {
          "files": 2,
          "lines": 1552,
          "meaningful_lines": 909,
          "meaningful_percent": 58.56958762886598
        },
        "quality_score": 23.067010309278352,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 136
        },
        "auto_generated": {
          "long_sequences": 10,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 10,
          "percent": 0.6443298969072164
        }
      }
    },
    "timings": {
      "diff_delta": {
        "003random@protonmail.com": {
          "total_diff_delta": 92.5,
          "total_commits": 10,
          "weekly_velocity": {
            "2020-10-05": {
              "diff_delta": 92.5,
              "lines_added": 60,
              "lines_updated": 31,
              "lines_deleted": 37,
              "lines_moved": 0,
              "commits": 10,
              "files_changed": 2,
              "active_days": 1,
              "velocity_per_day": 92.5
            }
          }
        },
        "miguelangel4b@gmail.com": {
          "total_diff_delta": 14.45,
          "total_commits": 1,
          "weekly_velocity": {
            "2020-10-05": {
              "diff_delta": 14.45,
              "lines_added": 8,
              "lines_updated": 6,
              "lines_deleted": 7,
              "lines_moved": 2,
              "commits": 1,
              "files_changed": 1,
              "active_days": 1,
              "velocity_per_day": 14.45
            }
          }
        }
      },
      "code_provenance": {
        "003random@protonmail.com": {
          "weekly_provenance": {
            "2020-10-05": {
              "new_code_lines": 15,
              "recent_code_lines": 5,
              "old_code_lines": 22,
              "legacy_code_lines": 0,
              "total_lines": 42,
              "new_code_percent": 35.714285714285715,
              "recent_code_percent": 11.904761904761903,
              "old_code_percent": 52.38095238095239,
              "legacy_code_percent": 0.0
            }
          }
        },
        "miguelangel4b@gmail.com": {
          "weekly_provenance": {
            "2020-10-05": {
              "new_code_lines": 4,
              "recent_code_lines": 1,
              "old_code_lines": 4,
              "legacy_code_lines": 0,
              "total_lines": 9,
              "new_code_percent": 44.44444444444444,
              "recent_code_percent": 11.11111111111111,
              "old_code_percent": 44.44444444444444,
              "legacy_code_percent": 0.0
            }
          }
        }
      },
      "developer_hours": {
        "003random@protonmail.com": {
          "total_estimated_hours": 2.482027777777778,
          "total_sessions": 2,
          "weekly_hours": {
            "2020-W41": {
              "estimated_hours": 2.48,
              "sessions": 2,
              "commits": 10,
              "hours_per_day": 2.48
            }
          }
        },
        "miguelangel4b@gmail.com": {
          "total_estimated_hours": 0.61875,
          "total_sessions": 1,
          "weekly_hours": {
            "2020-W41": {
              "estimated_hours": 0.62,
              "sessions": 1,
              "commits": 1,
              "hours_per_day": 0.62
            }
          }
        }
      },
      "code_domain": {
        "003random@protonmail.com": {
          "total_by_domain": {
            "backend": 81,
            "docs": 34
          },
          "weekly_domains": {
            "2020-10-05": {
              "domains": {
                "backend": 81,
                "docs": 34
              },
              "total_changes": 115,
              "percentages": {
                "backend": 70.43478260869566,
                "docs": 29.565217391304348
              }
            }
          },
          "domain_percentages": {
            "backend": 70.43478260869566,
            "docs": 29.565217391304348
          }
        },
        "miguelangel4b@gmail.com": {
          "total_by_domain": {
            "backend": 21
          },
          "weekly_domains": {
            "2020-10-05": {
              "domains": {
                "backend": 21
              },
              "total_changes": 21,
              "percentages": {
                "backend": 100.0
              }
            }
          },
          "domain_percentages": {
            "backend": 100.0
          }
        }
      },
      "comprehensive_time_analysis": {
        "003random@protonmail.com": {
          "basic_stats": {
            "total_commits": 10,
            "total_repos": 1,
            "first_commit_date": "2020-10-05T13:29:19+00:00",
            "last_commit_date": "2020-10-05T19:40:05+02:00",
            "total_span_days": 0.17,
            "commits_per_day": 10.0,
            "total_lines_changed": 115,
            "total_files_changed": 5
          },
          "timing_patterns": {
            "mean_interval_hours": 0.46,
            "median_interval_hours": 0.1,
            "min_interval_minutes": 0.62,
            "max_interval_days": 0.13
          },
          "work_sessions": {
            "session_count": 1,
            "avg_session_length_hours": 4.18,
            "max_session_length_hours": 4.18,
            "avg_commits_per_session": 10,
            "max_commits_per_session": 10,
            "sessions": [
              {
                "start": "2020-10-05T13:29:19+00:00",
                "end": "2020-10-05T19:40:05+02:00",
                "length_hours": 4.18,
                "commits": 10
              }
            ]
          },
          "daily_patterns": {
            "peak_day": 0,
            "peak_day_count": 10,
            "day_distribution": {
              "0": 10
            }
          },
          "weekly_patterns": {
            "total_weeks": 1,
            "avg_activities_per_week": 10,
            "max_activities_per_week": 10,
            "min_activities_per_week": 10
          },
          "downtime_analysis": {
            "short_breaks_count": 9,
            "long_breaks_count": 0,
            "avg_break_hours": 0.4643827160493827
          },
          "rhythm_analysis": {
            "activities_per_day": 10.0,
            "consistency_score": 0.0
          },
          "sustained_activity": {
            "total_active_days": 1,
            "max_consecutive_days": 1,
            "avg_activities_per_active_day": 10.0
          }
        }
      }
    }
  },
  "Week_101_2020-10-09": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_102_2020-10-16": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_103_2020-10-23": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_104_2020-10-30": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_105_2020-11-06": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_106_2020-11-13": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_107_2020-11-20": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_108_2020-11-27": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_109_2020-12-04": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_110_2020-12-11": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_111_2020-12-18": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_112_2020-12-25": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_113_2021-01-01": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_114_2021-01-08": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_115_2021-01-15": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_116_2021-01-22": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_117_2021-01-29": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_118_2021-02-05": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_119_2021-02-12": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_120_2021-02-19": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_121_2021-02-26": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_122_2021-03-05": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_123_2021-03-12": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_124_2021-03-19": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_125_2021-03-26": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_126_2021-04-02": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_127_2021-04-09": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_128_2021-04-16": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_129_2021-04-23": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_130_2021-04-30": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_131_2021-05-07": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_132_2021-05-14": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_133_2021-05-21": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_134_2021-05-28": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_135_2021-06-04": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_136_2021-06-11": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_137_2021-06-18": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_138_2021-06-25": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_139_2021-07-02": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_140_2021-07-09": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_141_2021-07-16": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_142_2021-07-23": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_143_2021-07-30": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_144_2021-08-06": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_145_2021-08-13": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_146_2021-08-20": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_147_2021-08-27": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_148_2021-09-03": {
    "productivity": {
      "change_set": {
        "max": 1,
        "avg": 1.0
      },
      "commits_count": {
        "README.md": 1
      },
      "contributors_count": {
        "total": {
          "README.md": 1
        },
        "minor": {
          "README.md": 0
        }
      },
      "contributors_experience": {
        "README.md": 1
      },
      "hunks_count": {
        "README.md": 1
      },
      "lines_count": {
        "added": {
          "total": {
            "README.md": 1
          },
          "max": {
            "README.md": 1
          },
          "avg": {
            "README.md": 1
          }
        },
        "removed": {
          "total": {
            "README.md": 1
          },
          "max": {
            "README.md": 1
          },
          "avg": {
            "README.md": 1
          }
        },
        "noop_added": {
          "total": {
            "README.md": 0
          },
          "max": {
            "README.md": 0
          },
          "avg": {
            "README.md": 0
          }
        },
        "noop_removed": {
          "total": {
            "README.md": 0
          },
          "max": {
            "README.md": 0
          },
          "avg": {
            "README.md": 0
          }
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 2,
          "max": 2,
          "avg": 2
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 1,
          "removed": 1
        },
        "true_churn": {
          "overall": {
            "contribution": 1,
            "churn": 0
          },
          "per_author": {
            "003random": {
              "contribution": 1,
              "churn": 0
            }
          },
          "per_file": {
            "README.md": {
              "contribution": 1,
              "churn": 0
            }
          }
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {
          "README.md": 0.0
        },
        "overall_bug_work_percent": 0.0,
        "total_bug_lines": 0,
        "total_lines": 2
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 2,
        "moved_lines_percent": 0.0,
        "copy_pasted_lines_percent": 0.0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0.0
        },
        "doc_coverage": {
          "files": 1,
          "lines": 110,
          "percent": 100.0
        },
        "total": {
          "files": 1,
          "lines": 110
        },
        "quality_score": 50.0
      },
      "meaningful_code": {
        "total": {
          "files": 1,
          "lines": 110,
          "meaningful_lines": 0,
          "meaningful_percent": 0.0
        },
        "quality_score": 50.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 2
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0.0
        }
      }
    },
    "timings": {
      "diff_delta": {
        "003random@protonmail.com": {
          "total_diff_delta": 1.25,
          "total_commits": 1,
          "weekly_velocity": {
            "2021-09-06": {
              "diff_delta": 1.25,
              "lines_added": 1,
              "lines_updated": 0,
              "lines_deleted": 1,
              "lines_moved": 0,
              "commits": 1,
              "files_changed": 1,
              "active_days": 1,
              "velocity_per_day": 1.25
            }
          }
        }
      },
      "code_provenance": {},
      "developer_hours": {
        "003random@protonmail.com": {
          "total_estimated_hours": 0.61875,
          "total_sessions": 1,
          "weekly_hours": {
            "2021-W36": {
              "estimated_hours": 0.62,
              "sessions": 1,
              "commits": 1,
              "hours_per_day": 0.62
            }
          }
        }
      },
      "code_domain": {
        "003random@protonmail.com": {
          "total_by_domain": {
            "docs": 2
          },
          "weekly_domains": {
            "2021-09-06": {
              "domains": {
                "docs": 2
              },
              "total_changes": 2,
              "percentages": {
                "docs": 100.0
              }
            }
          },
          "domain_percentages": {
            "docs": 100.0
          }
        }
      },
      "comprehensive_time_analysis": {}
    }
  },
  "Week_149_2021-09-10": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_150_2021-09-17": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_151_2021-09-24": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_152_2021-10-01": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_153_2021-10-08": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_154_2021-10-15": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_155_2021-10-22": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_156_2021-10-29": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_157_2021-11-05": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_158_2021-11-12": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_159_2021-11-19": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_160_2021-11-26": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_161_2021-12-03": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_162_2021-12-10": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_163_2021-12-17": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_164_2021-12-24": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_165_2021-12-31": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_166_2022-01-07": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_167_2022-01-14": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_168_2022-01-21": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_169_2022-01-28": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_170_2022-02-04": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_171_2022-02-11": {
    "productivity": {
      "change_set": {
        "max": 1,
        "avg": 1.0
      },
      "commits_count": {
        "README.md": 1
      },
      "contributors_count": {
        "total": {
          "README.md": 1
        },
        "minor": {
          "README.md": 0
        }
      },
      "contributors_experience": {
        "README.md": 1
      },
      "hunks_count": {
        "README.md": 1
      },
      "lines_count": {
        "added": {
          "total": {
            "README.md": 1
          },
          "max": {
            "README.md": 1
          },
          "avg": {
            "README.md": 1
          }
        },
        "removed": {
          "total": {
            "README.md": 1
          },
          "max": {
            "README.md": 1
          },
          "avg": {
            "README.md": 1
          }
        },
        "noop_added": {
          "total": {
            "README.md": 0
          },
          "max": {
            "README.md": 0
          },
          "avg": {
            "README.md": 0
          }
        },
        "noop_removed": {
          "total": {
            "README.md": 0
          },
          "max": {
            "README.md": 0
          },
          "avg": {
            "README.md": 0
          }
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 2,
          "max": 2,
          "avg": 2
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 1,
          "removed": 1
        },
        "true_churn": {
          "overall": {
            "contribution": 1,
            "churn": 0
          },
          "per_author": {
            "Najam Ul Saqib": {
              "contribution": 1,
              "churn": 0
            }
          },
          "per_file": {
            "README.md": {
              "contribution": 1,
              "churn": 0
            }
          }
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {
          "README.md": 0.0
        },
        "overall_bug_work_percent": 0.0,
        "total_bug_lines": 0,
        "total_lines": 2
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 2,
        "moved_lines_percent": 0.0,
        "copy_pasted_lines_percent": 0.0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0.0
        },
        "doc_coverage": {
          "files": 1,
          "lines": 110,
          "percent": 100.0
        },
        "total": {
          "files": 1,
          "lines": 110
        },
        "quality_score": 50.0
      },
      "meaningful_code": {
        "total": {
          "files": 1,
          "lines": 110,
          "meaningful_lines": 0,
          "meaningful_percent": 0.0
        },
        "quality_score": 50.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 2
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0.0
        }
      }
    },
    "timings": {
      "diff_delta": {
        "najamulsaqib@tutamail.com": {
          "total_diff_delta": 1.25,
          "total_commits": 1,
          "weekly_velocity": {
            "2022-02-14": {
              "diff_delta": 1.25,
              "lines_added": 1,
              "lines_updated": 0,
              "lines_deleted": 1,
              "lines_moved": 0,
              "commits": 1,
              "files_changed": 1,
              "active_days": 1,
              "velocity_per_day": 1.25
            }
          }
        }
      },
      "code_provenance": {},
      "developer_hours": {
        "najamulsaqib@tutamail.com": {
          "total_estimated_hours": 0.61875,
          "total_sessions": 1,
          "weekly_hours": {
            "2022-W07": {
              "estimated_hours": 0.62,
              "sessions": 1,
              "commits": 1,
              "hours_per_day": 0.62
            }
          }
        }
      },
      "code_domain": {
        "najamulsaqib@tutamail.com": {
          "total_by_domain": {
            "docs": 2
          },
          "weekly_domains": {
            "2022-02-14": {
              "domains": {
                "docs": 2
              },
              "total_changes": 2,
              "percentages": {
                "docs": 100.0
              }
            }
          },
          "domain_percentages": {
            "docs": 100.0
          }
        }
      },
      "comprehensive_time_analysis": {}
    }
  },
  "Week_172_2022-02-18": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_173_2022-02-25": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_174_2022-03-04": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_175_2022-03-11": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_176_2022-03-18": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_177_2022-03-25": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_178_2022-04-01": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_179_2022-04-08": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_180_2022-04-15": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_181_2022-04-22": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_182_2022-04-29": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_183_2022-05-06": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_184_2022-05-13": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_185_2022-05-20": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_186_2022-05-27": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_187_2022-06-03": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_188_2022-06-10": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_189_2022-06-17": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_190_2022-06-24": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_191_2022-07-01": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_192_2022-07-08": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_193_2022-07-15": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_194_2022-07-22": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_195_2022-07-29": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_196_2022-08-05": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_197_2022-08-12": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_198_2022-08-19": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_199_2022-08-26": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_200_2022-09-02": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_201_2022-09-09": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_202_2022-09-16": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_203_2022-09-23": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_204_2022-09-30": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_205_2022-10-07": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_206_2022-10-14": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_207_2022-10-21": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_208_2022-10-28": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_209_2022-11-04": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_210_2022-11-11": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_211_2022-11-18": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_212_2022-11-25": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_213_2022-12-02": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_214_2022-12-09": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_215_2022-12-16": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_216_2022-12-23": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_217_2022-12-30": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_218_2023-01-06": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_219_2023-01-13": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_220_2023-01-20": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_221_2023-01-27": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_222_2023-02-03": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_223_2023-02-10": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_224_2023-02-17": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_225_2023-02-24": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_226_2023-03-03": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_227_2023-03-10": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_228_2023-03-17": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_229_2023-03-24": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_230_2023-03-31": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_231_2023-04-07": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_232_2023-04-14": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_233_2023-04-21": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_234_2023-04-28": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_235_2023-05-05": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_236_2023-05-12": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_237_2023-05-19": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_238_2023-05-26": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_239_2023-06-02": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_240_2023-06-09": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_241_2023-06-16": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_242_2023-06-23": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_243_2023-06-30": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_244_2023-07-07": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_245_2023-07-14": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_246_2023-07-21": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_247_2023-07-28": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_248_2023-08-04": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_249_2023-08-11": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_250_2023-08-18": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_251_2023-08-25": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_252_2023-09-01": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_253_2023-09-08": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_254_2023-09-15": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_255_2023-09-22": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_256_2023-09-29": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_257_2023-10-06": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_258_2023-10-13": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_259_2023-10-20": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_260_2023-10-27": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_261_2023-11-03": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_262_2023-11-10": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_263_2023-11-17": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_264_2023-11-24": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_265_2023-12-01": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_266_2023-12-08": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_267_2023-12-15": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_268_2023-12-22": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_269_2023-12-29": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_270_2024-01-05": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_271_2024-01-12": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_272_2024-01-19": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_273_2024-01-26": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_274_2024-02-02": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_275_2024-02-09": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_276_2024-02-16": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_277_2024-02-23": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_278_2024-03-01": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_279_2024-03-08": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_280_2024-03-15": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_281_2024-03-22": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_282_2024-03-29": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_283_2024-04-05": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_284_2024-04-12": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_285_2024-04-19": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_286_2024-04-26": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_287_2024-05-03": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_288_2024-05-10": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_289_2024-05-17": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_290_2024-05-24": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_291_2024-05-31": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_292_2024-06-07": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_293_2024-06-14": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_294_2024-06-21": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_295_2024-06-28": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_296_2024-07-05": {
    "productivity": {
      "change_set": {
        "max": 8,
        "avg": 3.3333333333333335
      },
      "commits_count": {
        "LICENSE": 1,
        "README.md": 3,
        "extractor/extractor.go": 1,
        "go.mod": 1,
        "go.sum": 1,
        "main.go": 1,
        "runner/objects.go": 1,
        "runner/runner.go": 1
      },
      "contributors_count": {
        "total": {
          "LICENSE": 1,
          "README.md": 1,
          "extractor/extractor.go": 1,
          "go.mod": 1,
          "go.sum": 1,
          "main.go": 1,
          "runner/objects.go": 1,
          "runner/runner.go": 1
        },
        "minor": {
          "LICENSE": 0,
          "README.md": 0,
          "extractor/extractor.go": 0,
          "go.mod": 0,
          "go.sum": 0,
          "main.go": 0,
          "runner/objects.go": 0,
          "runner/runner.go": 0
        }
      },
      "contributors_experience": {
        "LICENSE": 1,
        "README.md": 1,
        "extractor/extractor.go": 1,
        "go.mod": 1,
        "go.sum": 1,
        "main.go": 1,
        "runner/objects.go": 1,
        "runner/runner.go": 1
      },
      "hunks_count": {
        "LICENSE": 1,
        "README.md": 2,
        "extractor/extractor.go": 1,
        "go.mod": 1,
        "go.sum": 1,
        "main.go": 40,
        "runner/objects.go": 1,
        "runner/runner.go": 1
      },
      "lines_count": {
        "added": {
          "total": {
            "LICENSE": 21,
            "README.md": 127,
            "extractor/extractor.go": 133,
            "go.mod": 10,
            "go.sum": 35,
            "main.go": 91,
            "runner/objects.go": 50,
            "runner/runner.go": 185
          },
          "max": {
            "LICENSE": 21,
            "README.md": 123,
            "extractor/extractor.go": 133,
            "go.mod": 10,
            "go.sum": 35,
            "main.go": 91,
            "runner/objects.go": 50,
            "runner/runner.go": 185
          },
          "avg": {
            "LICENSE": 21,
            "README.md": 42,
            "extractor/extractor.go": 133,
            "go.mod": 10,
            "go.sum": 35,
            "main.go": 91,
            "runner/objects.go": 50,
            "runner/runner.go": 185
          }
        },
        "removed": {
          "total": {
            "LICENSE": 0,
            "README.md": 95,
            "extractor/extractor.go": 0,
            "go.mod": 0,
            "go.sum": 0,
            "main.go": 236,
            "runner/objects.go": 0,
            "runner/runner.go": 0
          },
          "max": {
            "LICENSE": 0,
            "README.md": 91,
            "extractor/extractor.go": 0,
            "go.mod": 0,
            "go.sum": 0,
            "main.go": 236,
            "runner/objects.go": 0,
            "runner/runner.go": 0
          },
          "avg": {
            "LICENSE": 0,
            "README.md": 32,
            "extractor/extractor.go": 0,
            "go.mod": 0,
            "go.sum": 0,
            "main.go": 236,
            "runner/objects.go": 0,
            "runner/runner.go": 0
          }
        },
        "noop_added": {
          "total": {
            "LICENSE": 4,
            "README.md": 28,
            "extractor/extractor.go": 20,
            "go.mod": 3,
            "go.sum": 0,
            "main.go": 0,
            "runner/objects.go": 10,
            "runner/runner.go": 32
          },
          "max": {
            "LICENSE": 4,
            "README.md": 27,
            "extractor/extractor.go": 20,
            "go.mod": 3,
            "go.sum": 0,
            "main.go": 0,
            "runner/objects.go": 10,
            "runner/runner.go": 32
          },
          "avg": {
            "LICENSE": 4,
            "README.md": 9,
            "extractor/extractor.go": 20,
            "go.mod": 3,
            "go.sum": 0,
            "main.go": 0,
            "runner/objects.go": 10,
            "runner/runner.go": 32
          }
        },
        "noop_removed": {
          "total": {
            "LICENSE": 0,
            "README.md": 22,
            "extractor/extractor.go": 0,
            "go.mod": 0,
            "go.sum": 0,
            "main.go": 16,
            "runner/objects.go": 0,
            "runner/runner.go": 0
          },
          "max": {
            "LICENSE": 0,
            "README.md": 21,
            "extractor/extractor.go": 0,
            "go.mod": 0,
            "go.sum": 0,
            "main.go": 16,
            "runner/objects.go": 0,
            "runner/runner.go": 0
          },
          "avg": {
            "LICENSE": 0,
            "README.md": 7,
            "extractor/extractor.go": 0,
            "go.mod": 0,
            "go.sum": 0,
            "main.go": 16,
            "runner/objects.go": 0,
            "runner/runner.go": 0
          }
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 983,
          "max": 327,
          "avg": 123
        },
        "net_churn": {
          "count": 321,
          "max": 185,
          "avg": 40
        },
        "added_removed": {
          "added": 652,
          "removed": 331
        },
        "true_churn": {
          "overall": {
            "contribution": 652,
            "churn": 61
          },
          "per_author": {
            "003random": {
              "contribution": 652,
              "churn": 61
            }
          },
          "per_file": {
            "LICENSE": {
              "contribution": 21,
              "churn": 0
            },
            "README.md": {
              "contribution": 127,
              "churn": 61
            },
            "extractor/extractor.go": {
              "contribution": 133,
              "churn": 0
            },
            "go.mod": {
              "contribution": 10,
              "churn": 0
            },
            "go.sum": {
              "contribution": 35,
              "churn": 0
            },
            "main.go": {
              "contribution": 91,
              "churn": 0
            },
            "runner/objects.go": {
              "contribution": 50,
              "churn": 0
            },
            "runner/runner.go": {
              "contribution": 185,
              "churn": 0
            }
          }
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {
          "LICENSE": 0.0,
          "README.md": 0.0,
          "extractor/extractor.go": 0.0,
          "go.mod": 0.0,
          "go.sum": 0.0,
          "main.go": 0.0,
          "runner/objects.go": 0.0,
          "runner/runner.go": 0.0
        },
        "overall_bug_work_percent": 0.0,
        "total_bug_lines": 0,
        "total_lines": 983
      },
      "code_movement": {
        "moved_lines_count": 18,
        "copy_pasted_lines_count": 35,
        "total_changed_lines": 680,
        "moved_lines_percent": 2.6470588235294117,
        "copy_pasted_lines_percent": 5.147058823529411
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0.0
        },
        "doc_coverage": {
          "files": 2,
          "lines": 877,
          "percent": 86.23402163225173
        },
        "total": {
          "files": 8,
          "lines": 1017
        },
        "quality_score": 43.11701081612586
      },
      "meaningful_code": {
        "total": {
          "files": 8,
          "lines": 1017,
          "meaningful_lines": 366,
          "meaningful_percent": 35.9882005899705
        },
        "quality_score": 43.11701081612586,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 983
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0.0
        }
      }
    },
    "timings": {
      "diff_delta": {
        "003random@protonmail.com": {
          "total_diff_delta": 574.8,
          "total_commits": 3,
          "weekly_velocity": {
            "2024-07-01": {
              "diff_delta": 574.8,
              "lines_added": 411,
              "lines_updated": 141,
              "lines_deleted": 229,
              "lines_moved": 8,
              "commits": 3,
              "files_changed": 8,
              "active_days": 1,
              "velocity_per_day": 574.8
            }
          }
        }
      },
      "code_provenance": {
        "003random@protonmail.com": {
          "weekly_provenance": {
            "2024-07-01": {
              "new_code_lines": 289,
              "recent_code_lines": 0,
              "old_code_lines": 4,
              "legacy_code_lines": 0,
              "total_lines": 293,
              "new_code_percent": 98.63481228668942,
              "recent_code_percent": 0.0,
              "old_code_percent": 1.3651877133105803,
              "legacy_code_percent": 0.0
            }
          }
        }
      },
      "developer_hours": {
        "003random@protonmail.com": {
          "total_estimated_hours": 1.7933333333333332,
          "total_sessions": 1,
          "weekly_hours": {
            "2024-W27": {
              "estimated_hours": 1.79,
              "sessions": 1,
              "commits": 3,
              "hours_per_day": 1.79
            }
          }
        }
      },
      "code_domain": {
        "003random@protonmail.com": {
          "total_by_domain": {
            "docs": 243,
            "backend": 695,
            "config": 45
          },
          "weekly_domains": {
            "2024-07-01": {
              "domains": {
                "docs": 243,
                "backend": 695,
                "config": 45
              },
              "total_changes": 983,
              "percentages": {
                "docs": 24.720244150559513,
                "backend": 70.70193285859614,
                "config": 4.5778229908443535
              }
            }
          },
          "domain_percentages": {
            "docs": 24.720244150559513,
            "backend": 70.70193285859614,
            "config": 4.5778229908443535
          }
        }
      },
      "comprehensive_time_analysis": {
        "003random@protonmail.com": {
          "basic_stats": {
            "total_commits": 3,
            "total_repos": 1,
            "first_commit_date": "2024-07-07T18:27:15+00:00",
            "last_commit_date": "2024-07-07T21:29:51+02:00",
            "total_span_days": 0.04,
            "commits_per_day": 3.0,
            "total_lines_changed": 983,
            "total_files_changed": 10
          },
          "timing_patterns": {
            "mean_interval_hours": 0.52,
            "median_interval_hours": 0.52,
            "min_interval_minutes": 20.48,
            "max_interval_days": 0.03
          },
          "work_sessions": {
            "session_count": 1,
            "avg_session_length_hours": 1.04,
            "max_session_length_hours": 1.04,
            "avg_commits_per_session": 3,
            "max_commits_per_session": 3,
            "sessions": [
              {
                "start": "2024-07-07T18:27:15+00:00",
                "end": "2024-07-07T21:29:51+02:00",
                "length_hours": 1.04,
                "commits": 3
              }
            ]
          },
          "daily_patterns": {
            "peak_day": 6,
            "peak_day_count": 3,
            "day_distribution": {
              "6": 3
            }
          },
          "weekly_patterns": {
            "total_weeks": 1,
            "avg_activities_per_week": 3,
            "max_activities_per_week": 3,
            "min_activities_per_week": 3
          },
          "downtime_analysis": {
            "short_breaks_count": 2,
            "long_breaks_count": 0,
            "avg_break_hours": 0.5216666666666667
          },
          "rhythm_analysis": {
            "activities_per_day": 3.0,
            "consistency_score": 0.0
          },
          "sustained_activity": {
            "total_active_days": 1,
            "max_consecutive_days": 1,
            "avg_activities_per_active_day": 3.0
          }
        }
      }
    }
  },
  "Week_297_2024-07-12": {
    "productivity": {
      "change_set": {
        "max": 1,
        "avg": 1.0
      },
      "commits_count": {
        "README.md": 1
      },
      "contributors_count": {
        "total": {
          "README.md": 1
        },
        "minor": {
          "README.md": 0
        }
      },
      "contributors_experience": {
        "README.md": 1
      },
      "hunks_count": {
        "README.md": 1
      },
      "lines_count": {
        "added": {
          "total": {
            "README.md": 1
          },
          "max": {
            "README.md": 1
          },
          "avg": {
            "README.md": 1
          }
        },
        "removed": {
          "total": {
            "README.md": 1
          },
          "max": {
            "README.md": 1
          },
          "avg": {
            "README.md": 1
          }
        },
        "noop_added": {
          "total": {
            "README.md": 0
          },
          "max": {
            "README.md": 0
          },
          "avg": {
            "README.md": 0
          }
        },
        "noop_removed": {
          "total": {
            "README.md": 0
          },
          "max": {
            "README.md": 0
          },
          "avg": {
            "README.md": 0
          }
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 2,
          "max": 2,
          "avg": 2
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 1,
          "removed": 1
        },
        "true_churn": {
          "overall": {
            "contribution": 1,
            "churn": 0
          },
          "per_author": {
            "Samuel": {
              "contribution": 1,
              "churn": 0
            }
          },
          "per_file": {
            "README.md": {
              "contribution": 1,
              "churn": 0
            }
          }
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {
          "README.md": 0.0
        },
        "overall_bug_work_percent": 0.0,
        "total_bug_lines": 0,
        "total_lines": 2
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 2,
        "moved_lines_percent": 0.0,
        "copy_pasted_lines_percent": 0.0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0.0
        },
        "doc_coverage": {
          "files": 1,
          "lines": 141,
          "percent": 100.0
        },
        "total": {
          "files": 1,
          "lines": 141
        },
        "quality_score": 50.0
      },
      "meaningful_code": {
        "total": {
          "files": 1,
          "lines": 141,
          "meaningful_lines": 0,
          "meaningful_percent": 0.0
        },
        "quality_score": 50.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 2
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0.0
        }
      }
    },
    "timings": {
      "diff_delta": {
        "funwithes6@gmail.com": {
          "total_diff_delta": 1.25,
          "total_commits": 1,
          "weekly_velocity": {
            "2024-07-15": {
              "diff_delta": 1.25,
              "lines_added": 1,
              "lines_updated": 0,
              "lines_deleted": 1,
              "lines_moved": 0,
              "commits": 1,
              "files_changed": 1,
              "active_days": 1,
              "velocity_per_day": 1.25
            }
          }
        }
      },
      "code_provenance": {},
      "developer_hours": {
        "funwithes6@gmail.com": {
          "total_estimated_hours": 0.61875,
          "total_sessions": 1,
          "weekly_hours": {
            "2024-W29": {
              "estimated_hours": 0.62,
              "sessions": 1,
              "commits": 1,
              "hours_per_day": 0.62
            }
          }
        }
      },
      "code_domain": {
        "funwithes6@gmail.com": {
          "total_by_domain": {
            "docs": 2
          },
          "weekly_domains": {
            "2024-07-15": {
              "domains": {
                "docs": 2
              },
              "total_changes": 2,
              "percentages": {
                "docs": 100.0
              }
            }
          },
          "domain_percentages": {
            "docs": 100.0
          }
        }
      },
      "comprehensive_time_analysis": {}
    }
  },
  "Week_298_2024-07-19": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {},
      "code_provenance": {},
      "developer_hours": {},
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "Week_299_2024-07-26": {
    "productivity": {
      "change_set": {
        "max": 0,
        "avg": 0.0
      },
      "commits_count": {},
      "contributors_count": {
        "total": {},
        "minor": {}
      },
      "contributors_experience": {},
      "hunks_count": {},
      "lines_count": {
        "added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "removed": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_added": {
          "total": {},
          "max": {},
          "avg": {}
        },
        "noop_removed": {
          "total": {},
          "max": {},
          "avg": {}
        }
      }
    },
    "quality": {
      "code_churn": {
        "total_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "net_churn": {
          "count": 0,
          "max": 0,
          "avg": 0
        },
        "added_removed": {
          "added": 0,
          "removed": 0
        },
        "true_churn": {
          "overall": {
            "contribution": 0,
            "churn": 0
          },
          "per_author": {},
          "per_file": {}
        }
      },
      "bugs": {
        "bug_work_percent_by_file": {},
        "overall_bug_work_percent": 0,
        "total_bug_lines": 0,
        "total_lines": 0
      },
      "code_movement": {
        "moved_lines_count": 0,
        "copy_pasted_lines_count": 0,
        "total_changed_lines": 0,
        "moved_lines_percent": 0,
        "copy_pasted_lines_percent": 0
      },
      "test_doc_pct": {
        "test_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "doc_coverage": {
          "files": 0,
          "lines": 0,
          "percent": 0
        },
        "total": {
          "files": 0,
          "lines": 0
        },
        "quality_score": 0.0
      },
      "meaningful_code": {
        "total": {
          "files": 0,
          "lines": 0,
          "meaningful_lines": 0,
          "meaningful_percent": 0
        },
        "quality_score": 0.0,
        "unrealistic_commits": {
          "large_commits": 0,
          "rapid_large_commits": 0,
          "total": 0,
          "skipped_lines": 0
        },
        "auto_generated": {
          "long_sequences": 0,
          "repeated_chars": 0,
          "repetitive_patterns": 0,
          "total": 0,
          "percent": 0
        }
      }
    },
    "timings": {
      "diff_delta": {
        "003random@protonmail.com": {
          "total_diff_delta": 0,
          "total_commits": 1,
          "weekly_velocity": {
            "2024-07-29": {
              "diff_delta": 0,
              "lines_added": 0,
              "lines_updated": 0,
              "lines_deleted": 0,
              "lines_moved": 0,
              "commits": 1,
              "files_changed": 0,
              "active_days": 1,
              "velocity_per_day": 0.0
            }
          }
        }
      },
      "code_provenance": {},
      "developer_hours": {
        "003random@protonmail.com": {
          "total_estimated_hours": 0.61875,
          "total_sessions": 1,
          "weekly_hours": {
            "2024-W31": {
              "estimated_hours": 0.62,
              "sessions": 1,
              "commits": 1,
              "hours_per_day": 0.62
            }
          }
        }
      },
      "code_domain": {},
      "comprehensive_time_analysis": {}
    }
  },
  "developer_stats": {}
},
  "metrics_type": "weekly",
  "processing": {
    "total_commits": 55,
    "total_lines_added": 2011,
    "total_lines_removed": 1252
  }
}
