{
  "project_name": "003random",
  "repository_url": "https://github.com/003random/csp",
  "repository_name": "csp",
  "ecosystem": "github",
  "repo_category": "all",
  "analysis_period": {
    "start_date": "2019-10-14",
    "end_date": "2019-10-14",
    "full_history": false
  },
  "commits": [
    {"hash": "ce216008edfb84b9d0494b1b7f13f7076ca73c1c", "msg": "First commit :D", "author": {"name": "EdOverflow", "email": "contact@edoverflow.com"}, "committer": {"name": "EdOverflow", "email": "contact@edoverflow.com"}, "author_date": "2019-10-14 13:51:06+02:00", "author_timezone": -7200, "committer_date": "2019-10-14 13:51:06+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": [], "project_name": "csp", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/3c2f5dec/3c2f5dec/3c2f5dec/csp", "deletions": 0, "insertions": 119, "lines": 119, "files": 1, "modified_files": [{"old_path": null, "new_path": "csp.go", "filename": "csp.go", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,119 @@\n+package main\n+\n+import (\n+\t\"bufio\"\n+\t\"crypto/tls\"\n+\t\"errors\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"regexp\"\n+\t\"strings\"\n+\t\"sync\"\n+\t\"time\"\n+)\n+\n+/*\n+\tGiven a list of hosts, this small utility fetches all whitelisted\n+\tdomains from the hosts' CSPs. I use this for reconnaissance\n+\tpurposes while bug bounty hunting.\n+\n+\t$ cat hosts.txt\n+\thttp://example.com/\n+\t$ cat hosts.txt | csp\n+\texample.com\n+\tsubdomain.example.com\n+\t...\n+*/\n+\n+// Forgive me, Father, for I have sinned.\n+var r = regexp.MustCompile(\"(([a-zA-Z](-?[a-zA-Z0-9])*)\\\\.)+[a-zA-Z]{2,}\")\n+\n+// Consider using https://github.com/tike/csp in future.\n+\n+// requestCSP requests and extracts CSP for a given URL.\n+func requestCSP(client *http.Client, url string) ([]string, error) {\n+\treq, err := http.NewRequest(http.MethodGet, url, nil)\n+\tif err != nil {\n+\t\treturn nil, fmt.Errorf(\"could not create request: %v\", err)\n+\t}\n+\n+\tresp, err := client.Do(req)\n+\tif err != nil {\n+\t\treturn nil, fmt.Errorf(\"could not send request: %v\", err)\n+\t}\n+\tif resp == nil {\n+\t\treturn nil, errors.New(\"received nil response, cannot analyze\")\n+\t}\n+\tdefer resp.Body.Close()\n+\n+\t_, err = io.Copy(ioutil.Discard, resp.Body)\n+\tif err != nil {\n+\t\treturn nil, fmt.Errorf(\"could not discard response body: %v\", err)\n+\t}\n+\n+\tcsp := resp.Header.Get(\"Content-Security-Policy\")\n+\tresults := r.FindAllString(csp, -1)\n+\n+\treturn results, err\n+}\n+\n+func main() {\n+\tconcurrency := flag.Int(\"c\", 20, \"set the concurrency level\")\n+\tflag.Parse()\n+\n+\turlsChannel := make(chan string)\n+\n+\tvar wg sync.WaitGroup\n+\twg.Add(*concurrency)\n+\tfor i := 0; i < *concurrency; i++ {\n+\t\tgo func() {\n+\t\t\tdefer wg.Done()\n+\n+\t\t\t// Stolen from my mentor, TomNomNom! \ud83d\udc11\n+\t\t\tvar tr = &http.Transport{\n+\t\t\t\tMaxIdleConns:      30,\n+\t\t\t\tIdleConnTimeout:   time.Second,\n+\t\t\t\tDisableKeepAlives: true,\n+\t\t\t\tTLSClientConfig:   &tls.Config{InsecureSkipVerify: true},\n+\t\t\t}\n+\n+\t\t\tclient := &http.Client{\n+\t\t\t\tTransport: tr,\n+\t\t\t}\n+\n+\t\t\tfor url := range urlsChannel {\n+\t\t\t\tres, err := requestCSP(client, url)\n+\t\t\t\tif err != nil {\n+\t\t\t\t\tfmt.Fprintf(os.Stderr, \"could not get CSP: %v\\n\", err)\n+\t\t\t\t\treturn\n+\t\t\t\t}\n+\n+\t\t\t\t// Ensure we do not print out an empty string.\n+\t\t\t\tif len(res) > 0 {\n+\t\t\t\t\tfmt.Println(strings.Join(res, \"\\n\"))\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}()\n+\t}\n+\n+\t/*\n+\t\tRead input from stdin.\n+\t\t$ cat hosts.txt | csp\n+\t*/\n+\tsc := bufio.NewScanner(os.Stdin)\n+\tfor sc.Scan() {\n+\t\thost := strings.ToLower(sc.Text())\n+\t\turlsChannel <- host\n+\t}\n+\n+\tif err := sc.Err(); err != nil {\n+\t\tfmt.Fprintf(os.Stderr, \"Failed to read input: %v\\n\", err)\n+\t}\n+\n+\tclose(urlsChannel)\n+\twg.Wait()\n+}\n", "diff_parsed": {"added": [[1, "package main"], [2, ""], [3, "import ("], [4, "\t\"bufio\""], [5, "\t\"crypto/tls\""], [6, "\t\"errors\""], [7, "\t\"flag\""], [8, "\t\"fmt\""], [9, "\t\"io\""], [10, "\t\"io/ioutil\""], [11, "\t\"net/http\""], [12, "\t\"os\""], [13, "\t\"regexp\""], [14, "\t\"strings\""], [15, "\t\"sync\""], [16, "\t\"time\""], [17, ")"], [18, ""], [19, "/*"], [20, "\tGiven a list of hosts, this small utility fetches all whitelisted"], [21, "\tdomains from the hosts' CSPs. I use this for reconnaissance"], [22, "\tpurposes while bug bounty hunting."], [23, ""], [24, "\t$ cat hosts.txt"], [25, "\thttp://example.com/"], [26, "\t$ cat hosts.txt | csp"], [27, "\texample.com"], [28, "\tsubdomain.example.com"], [29, "\t..."], [30, "*/"], [31, ""], [32, "// Forgive me, Father, for I have sinned."], [33, "var r = regexp.MustCompile(\"(([a-zA-Z](-?[a-zA-Z0-9])*)\\\\.)+[a-zA-Z]{2,}\")"], [34, ""], [35, "// Consider using https://github.com/tike/csp in future."], [36, ""], [37, "// requestCSP requests and extracts CSP for a given URL."], [38, "func requestCSP(client *http.Client, url string) ([]string, error) {"], [39, "\treq, err := http.NewRequest(http.MethodGet, url, nil)"], [40, "\tif err != nil {"], [41, "\t\treturn nil, fmt.Errorf(\"could not create request: %v\", err)"], [42, "\t}"], [43, ""], [44, "\tresp, err := client.Do(req)"], [45, "\tif err != nil {"], [46, "\t\treturn nil, fmt.Errorf(\"could not send request: %v\", err)"], [47, "\t}"], [48, "\tif resp == nil {"], [49, "\t\treturn nil, errors.New(\"received nil response, cannot analyze\")"], [50, "\t}"], [51, "\tdefer resp.Body.Close()"], [52, ""], [53, "\t_, err = io.Copy(ioutil.Discard, resp.Body)"], [54, "\tif err != nil {"], [55, "\t\treturn nil, fmt.Errorf(\"could not discard response body: %v\", err)"], [56, "\t}"], [57, ""], [58, "\tcsp := resp.Header.Get(\"Content-Security-Policy\")"], [59, "\tresults := r.FindAllString(csp, -1)"], [60, ""], [61, "\treturn results, err"], [62, "}"], [63, ""], [64, "func main() {"], [65, "\tconcurrency := flag.Int(\"c\", 20, \"set the concurrency level\")"], [66, "\tflag.Parse()"], [67, ""], [68, "\turlsChannel := make(chan string)"], [69, ""], [70, "\tvar wg sync.WaitGroup"], [71, "\twg.Add(*concurrency)"], [72, "\tfor i := 0; i < *concurrency; i++ {"], [73, "\t\tgo func() {"], [74, "\t\t\tdefer wg.Done()"], [75, ""], [76, "\t\t\t// Stolen from my mentor, TomNomNom! \ud83d\udc11"], [77, "\t\t\tvar tr = &http.Transport{"], [78, "\t\t\t\tMaxIdleConns:      30,"], [79, "\t\t\t\tIdleConnTimeout:   time.Second,"], [80, "\t\t\t\tDisableKeepAlives: true,"], [81, "\t\t\t\tTLSClientConfig:   &tls.Config{InsecureSkipVerify: true},"], [82, "\t\t\t}"], [83, ""], [84, "\t\t\tclient := &http.Client{"], [85, "\t\t\t\tTransport: tr,"], [86, "\t\t\t}"], [87, ""], [88, "\t\t\tfor url := range urlsChannel {"], [89, "\t\t\t\tres, err := requestCSP(client, url)"], [90, "\t\t\t\tif err != nil {"], [91, "\t\t\t\t\tfmt.Fprintf(os.Stderr, \"could not get CSP: %v\\n\", err)"], [92, "\t\t\t\t\treturn"], [93, "\t\t\t\t}"], [94, ""], [95, "\t\t\t\t// Ensure we do not print out an empty string."], [96, "\t\t\t\tif len(res) > 0 {"], [97, "\t\t\t\t\tfmt.Println(strings.Join(res, \"\\n\"))"], [98, "\t\t\t\t}"], [99, "\t\t\t}"], [100, "\t\t}()"], [101, "\t}"], [102, ""], [103, "\t/*"], [104, "\t\tRead input from stdin."], [105, "\t\t$ cat hosts.txt | csp"], [106, "\t*/"], [107, "\tsc := bufio.NewScanner(os.Stdin)"], [108, "\tfor sc.Scan() {"], [109, "\t\thost := strings.ToLower(sc.Text())"], [110, "\t\turlsChannel <- host"], [111, "\t}"], [112, ""], [113, "\tif err := sc.Err(); err != nil {"], [114, "\t\tfmt.Fprintf(os.Stderr, \"Failed to read input: %v\\n\", err)"], [115, "\t}"], [116, ""], [117, "\tclose(urlsChannel)"], [118, "\twg.Wait()"], [119, "}"]], "deleted": []}, "added_lines": 119, "deleted_lines": 0, "source_code": "package main\n\nimport (\n\t\"bufio\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\t\"regexp\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n)\n\n/*\n\tGiven a list of hosts, this small utility fetches all whitelisted\n\tdomains from the hosts' CSPs. I use this for reconnaissance\n\tpurposes while bug bounty hunting.\n\n\t$ cat hosts.txt\n\thttp://example.com/\n\t$ cat hosts.txt | csp\n\texample.com\n\tsubdomain.example.com\n\t...\n*/\n\n// Forgive me, Father, for I have sinned.\nvar r = regexp.MustCompile(\"(([a-zA-Z](-?[a-zA-Z0-9])*)\\\\.)+[a-zA-Z]{2,}\")\n\n// Consider using https://github.com/tike/csp in future.\n\n// requestCSP requests and extracts CSP for a given URL.\nfunc requestCSP(client *http.Client, url string) ([]string, error) {\n\treq, err := http.NewRequest(http.MethodGet, url, nil)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not create request: %v\", err)\n\t}\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not send request: %v\", err)\n\t}\n\tif resp == nil {\n\t\treturn nil, errors.New(\"received nil response, cannot analyze\")\n\t}\n\tdefer resp.Body.Close()\n\n\t_, err = io.Copy(ioutil.Discard, resp.Body)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not discard response body: %v\", err)\n\t}\n\n\tcsp := resp.Header.Get(\"Content-Security-Policy\")\n\tresults := r.FindAllString(csp, -1)\n\n\treturn results, err\n}\n\nfunc main() {\n\tconcurrency := flag.Int(\"c\", 20, \"set the concurrency level\")\n\tflag.Parse()\n\n\turlsChannel := make(chan string)\n\n\tvar wg sync.WaitGroup\n\twg.Add(*concurrency)\n\tfor i := 0; i < *concurrency; i++ {\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\n\t\t\t// Stolen from my mentor, TomNomNom! \ud83d\udc11\n\t\t\tvar tr = &http.Transport{\n\t\t\t\tMaxIdleConns:      30,\n\t\t\t\tIdleConnTimeout:   time.Second,\n\t\t\t\tDisableKeepAlives: true,\n\t\t\t\tTLSClientConfig:   &tls.Config{InsecureSkipVerify: true},\n\t\t\t}\n\n\t\t\tclient := &http.Client{\n\t\t\t\tTransport: tr,\n\t\t\t}\n\n\t\t\tfor url := range urlsChannel {\n\t\t\t\tres, err := requestCSP(client, url)\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Fprintf(os.Stderr, \"could not get CSP: %v\\n\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// Ensure we do not print out an empty string.\n\t\t\t\tif len(res) > 0 {\n\t\t\t\t\tfmt.Println(strings.Join(res, \"\\n\"))\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\t}\n\n\t/*\n\t\tRead input from stdin.\n\t\t$ cat hosts.txt | csp\n\t*/\n\tsc := bufio.NewScanner(os.Stdin)\n\tfor sc.Scan() {\n\t\thost := strings.ToLower(sc.Text())\n\t\turlsChannel <- host\n\t}\n\n\tif err := sc.Err(); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to read input: %v\\n\", err)\n\t}\n\n\tclose(urlsChannel)\n\twg.Wait()\n}\n", "source_code_before": null, "methods": [{"name": "requestCSP", "start_line": 38, "end_line": 62}, {"name": "", "start_line": 73, "end_line": 100}, {"name": "main", "start_line": 64, "end_line": 119}], "methods_before": [], "changed_methods": [{"name": "main", "start_line": 64, "end_line": 119}, {"name": "requestCSP", "start_line": 38, "end_line": 62}, {"name": "", "start_line": 73, "end_line": 100}], "nloc": 79, "complexity": 13, "token_count": 433}], "dmm_unit_size": 0.0, "dmm_unit_complexity": 1.0, "dmm_unit_interfacing": 1.0},
    {"hash": "6249ee9f728baab829b5c5e4b2c731144fa33c82", "msg": "Create README.md", "author": {"name": "EdOverflow", "email": "EdOverflow@users.noreply.github.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2019-10-14 13:58:32+02:00", "author_timezone": -7200, "committer_date": "2019-10-14 13:58:32+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["ce216008edfb84b9d0494b1b7f13f7076ca73c1c"], "project_name": "csp", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/3c2f5dec/3c2f5dec/3c2f5dec/csp", "deletions": 0, "insertions": 52, "lines": 52, "files": 1, "modified_files": [{"old_path": null, "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,52 @@\n+# csp\n+\n+Given a list of hosts, this small utility fetches all whitelisted domains from the hosts' CSPs. I use this for reconnaissance\n+purposes while bug bounty hunting.\n+\n+<a href=\"https://www.buymeacoffee.com/edoverflow\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: auto !important;width: auto !important;\" ></a>\n+\n+# Usage\n+\n+```\n+$ cat hosts.txt\n+http://example.com/\n+$ cat hosts.txt | csp\n+example.com\n+subdomain.example.com\n+...\n+```\n+\n+Set concurrency level using the `-c` flag.\n+\n+```\n+$ csp -h\n+Usage of csp:\n+  -c int\n+    \tset the concurrency level (default 20)\n+$ cat hosts.txt | csp -c 2\n+...\n+```\n+\n+# Installation\n+\n+```\n+$ go get -u github.com/edoverflow/csp\n+```\n+\n+You can also [download a binary](https://github.com/EdOverflow/csp/releases) and put it in your `$PATH` (e.g. in `/usr/bin/`).\n+\n+# Contributing\n+\n+I welcome contributions from the public.\n+\n+### Using the issue tracker \ud83d\udca1\n+\n+The issue tracker is the preferred channel for bug reports and features requests.\n+\n+### Issues and labels \ud83c\udff7\n+\n+The bug tracker utilizes several labels to help organize and identify issues.\n+\n+### Guidelines for bug reports \ud83d\udc1b\n+\n+Use the GitHub issue search \u2014 check if the issue has already been reported.\n", "diff_parsed": {"added": [[1, "# csp"], [2, ""], [3, "Given a list of hosts, this small utility fetches all whitelisted domains from the hosts' CSPs. I use this for reconnaissance"], [4, "purposes while bug bounty hunting."], [5, ""], [6, "<a href=\"https://www.buymeacoffee.com/edoverflow\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: auto !important;width: auto !important;\" ></a>"], [7, ""], [8, "# Usage"], [9, ""], [10, "```"], [11, "$ cat hosts.txt"], [12, "http://example.com/"], [13, "$ cat hosts.txt | csp"], [14, "example.com"], [15, "subdomain.example.com"], [16, "..."], [17, "```"], [18, ""], [19, "Set concurrency level using the `-c` flag."], [20, ""], [21, "```"], [22, "$ csp -h"], [23, "Usage of csp:"], [24, "  -c int"], [25, "    \tset the concurrency level (default 20)"], [26, "$ cat hosts.txt | csp -c 2"], [27, "..."], [28, "```"], [29, ""], [30, "# Installation"], [31, ""], [32, "```"], [33, "$ go get -u github.com/edoverflow/csp"], [34, "```"], [35, ""], [36, "You can also [download a binary](https://github.com/EdOverflow/csp/releases) and put it in your `$PATH` (e.g. in `/usr/bin/`)."], [37, ""], [38, "# Contributing"], [39, ""], [40, "I welcome contributions from the public."], [41, ""], [42, "### Using the issue tracker \ud83d\udca1"], [43, ""], [44, "The issue tracker is the preferred channel for bug reports and features requests."], [45, ""], [46, "### Issues and labels \ud83c\udff7"], [47, ""], [48, "The bug tracker utilizes several labels to help organize and identify issues."], [49, ""], [50, "### Guidelines for bug reports \ud83d\udc1b"], [51, ""], [52, "Use the GitHub issue search \u2014 check if the issue has already been reported."]], "deleted": []}, "added_lines": 52, "deleted_lines": 0, "source_code": "# csp\n\nGiven a list of hosts, this small utility fetches all whitelisted domains from the hosts' CSPs. I use this for reconnaissance\npurposes while bug bounty hunting.\n\n<a href=\"https://www.buymeacoffee.com/edoverflow\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: auto !important;width: auto !important;\" ></a>\n\n# Usage\n\n```\n$ cat hosts.txt\nhttp://example.com/\n$ cat hosts.txt | csp\nexample.com\nsubdomain.example.com\n...\n```\n\nSet concurrency level using the `-c` flag.\n\n```\n$ csp -h\nUsage of csp:\n  -c int\n    \tset the concurrency level (default 20)\n$ cat hosts.txt | csp -c 2\n...\n```\n\n# Installation\n\n```\n$ go get -u github.com/edoverflow/csp\n```\n\nYou can also [download a binary](https://github.com/EdOverflow/csp/releases) and put it in your `$PATH` (e.g. in `/usr/bin/`).\n\n# Contributing\n\nI welcome contributions from the public.\n\n### Using the issue tracker \ud83d\udca1\n\nThe issue tracker is the preferred channel for bug reports and features requests.\n\n### Issues and labels \ud83c\udff7\n\nThe bug tracker utilizes several labels to help organize and identify issues.\n\n### Guidelines for bug reports \ud83d\udc1b\n\nUse the GitHub issue search \u2014 check if the issue has already been reported.\n", "source_code_before": null, "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "23fc7c46839100da9d0a1921a5eb08338f341cfd", "msg": "Create FUNDING.yml", "author": {"name": "EdOverflow", "email": "EdOverflow@users.noreply.github.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2019-10-14 14:00:19+02:00", "author_timezone": -7200, "committer_date": "2019-10-14 14:00:19+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["6249ee9f728baab829b5c5e4b2c731144fa33c82"], "project_name": "csp", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/3c2f5dec/3c2f5dec/3c2f5dec/csp", "deletions": 0, "insertions": 2, "lines": 2, "files": 1, "modified_files": [{"old_path": null, "new_path": ".github/FUNDING.yml", "filename": "FUNDING.yml", "change_type": "ModificationType.ADD", "change_type_name": "ADD", "diff": "@@ -0,0 +1,2 @@\n+liberapay: EdOverflow\n+custom: https://www.buymeacoffee.com/edoverflow\n", "diff_parsed": {"added": [[1, "liberapay: EdOverflow"], [2, "custom: https://www.buymeacoffee.com/edoverflow"]], "deleted": []}, "added_lines": 2, "deleted_lines": 0, "source_code": "liberapay: EdOverflow\ncustom: https://www.buymeacoffee.com/edoverflow\n", "source_code_before": null, "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "62180d012cb8056f895bde409b089d0ced6c5165", "msg": "Update README.md", "author": {"name": "EdOverflow", "email": "EdOverflow@users.noreply.github.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2019-10-14 14:23:37+02:00", "author_timezone": -7200, "committer_date": "2019-10-14 14:23:37+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["23fc7c46839100da9d0a1921a5eb08338f341cfd"], "project_name": "csp", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/3c2f5dec/3c2f5dec/3c2f5dec/csp", "deletions": 0, "insertions": 4, "lines": 4, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -50,3 +50,7 @@ The bug tracker utilizes several labels to help organize and identify issues.\n ### Guidelines for bug reports \ud83d\udc1b\n \n Use the GitHub issue search \u2014 check if the issue has already been reported.\n+\n+# Credit\n+\n+Thank you to [@TomNomNom](https://github.com/tomnomnom), [@jimen0](https://github.com/jimen0), and [@0003random](https://github.com/003random) for their help.\n", "diff_parsed": {"added": [[53, ""], [54, "# Credit"], [55, ""], [56, "Thank you to [@TomNomNom](https://github.com/tomnomnom), [@jimen0](https://github.com/jimen0), and [@0003random](https://github.com/003random) for their help."]], "deleted": []}, "added_lines": 4, "deleted_lines": 0, "source_code": "# csp\n\nGiven a list of hosts, this small utility fetches all whitelisted domains from the hosts' CSPs. I use this for reconnaissance\npurposes while bug bounty hunting.\n\n<a href=\"https://www.buymeacoffee.com/edoverflow\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: auto !important;width: auto !important;\" ></a>\n\n# Usage\n\n```\n$ cat hosts.txt\nhttp://example.com/\n$ cat hosts.txt | csp\nexample.com\nsubdomain.example.com\n...\n```\n\nSet concurrency level using the `-c` flag.\n\n```\n$ csp -h\nUsage of csp:\n  -c int\n    \tset the concurrency level (default 20)\n$ cat hosts.txt | csp -c 2\n...\n```\n\n# Installation\n\n```\n$ go get -u github.com/edoverflow/csp\n```\n\nYou can also [download a binary](https://github.com/EdOverflow/csp/releases) and put it in your `$PATH` (e.g. in `/usr/bin/`).\n\n# Contributing\n\nI welcome contributions from the public.\n\n### Using the issue tracker \ud83d\udca1\n\nThe issue tracker is the preferred channel for bug reports and features requests.\n\n### Issues and labels \ud83c\udff7\n\nThe bug tracker utilizes several labels to help organize and identify issues.\n\n### Guidelines for bug reports \ud83d\udc1b\n\nUse the GitHub issue search \u2014 check if the issue has already been reported.\n\n# Credit\n\nThank you to [@TomNomNom](https://github.com/tomnomnom), [@jimen0](https://github.com/jimen0), and [@0003random](https://github.com/003random) for their help.\n", "source_code_before": "# csp\n\nGiven a list of hosts, this small utility fetches all whitelisted domains from the hosts' CSPs. I use this for reconnaissance\npurposes while bug bounty hunting.\n\n<a href=\"https://www.buymeacoffee.com/edoverflow\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: auto !important;width: auto !important;\" ></a>\n\n# Usage\n\n```\n$ cat hosts.txt\nhttp://example.com/\n$ cat hosts.txt | csp\nexample.com\nsubdomain.example.com\n...\n```\n\nSet concurrency level using the `-c` flag.\n\n```\n$ csp -h\nUsage of csp:\n  -c int\n    \tset the concurrency level (default 20)\n$ cat hosts.txt | csp -c 2\n...\n```\n\n# Installation\n\n```\n$ go get -u github.com/edoverflow/csp\n```\n\nYou can also [download a binary](https://github.com/EdOverflow/csp/releases) and put it in your `$PATH` (e.g. in `/usr/bin/`).\n\n# Contributing\n\nI welcome contributions from the public.\n\n### Using the issue tracker \ud83d\udca1\n\nThe issue tracker is the preferred channel for bug reports and features requests.\n\n### Issues and labels \ud83c\udff7\n\nThe bug tracker utilizes several labels to help organize and identify issues.\n\n### Guidelines for bug reports \ud83d\udc1b\n\nUse the GitHub issue search \u2014 check if the issue has already been reported.\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "38f234a43bb775794a593439da7598f21aa83a06", "msg": "Update README.md", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2019-10-14 15:00:24+02:00", "author_timezone": -7200, "committer_date": "2019-10-14 15:00:24+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["62180d012cb8056f895bde409b089d0ced6c5165"], "project_name": "csp", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/3c2f5dec/3c2f5dec/3c2f5dec/csp", "deletions": 1, "insertions": 1, "lines": 2, "files": 1, "modified_files": [{"old_path": "README.md", "new_path": "README.md", "filename": "README.md", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -53,4 +53,4 @@ Use the GitHub issue search \u2014 check if the issue has already been reported.\n \n # Credit\n \n-Thank you to [@TomNomNom](https://github.com/tomnomnom), [@jimen0](https://github.com/jimen0), and [@0003random](https://github.com/003random) for their help.\n+Thank you to [@TomNomNom](https://github.com/tomnomnom), [@jimen0](https://github.com/jimen0), and [@003random](https://github.com/003random) for their help.\n", "diff_parsed": {"added": [[56, "Thank you to [@TomNomNom](https://github.com/tomnomnom), [@jimen0](https://github.com/jimen0), and [@003random](https://github.com/003random) for their help."]], "deleted": [[56, "Thank you to [@TomNomNom](https://github.com/tomnomnom), [@jimen0](https://github.com/jimen0), and [@0003random](https://github.com/003random) for their help."]]}, "added_lines": 1, "deleted_lines": 1, "source_code": "# csp\n\nGiven a list of hosts, this small utility fetches all whitelisted domains from the hosts' CSPs. I use this for reconnaissance\npurposes while bug bounty hunting.\n\n<a href=\"https://www.buymeacoffee.com/edoverflow\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: auto !important;width: auto !important;\" ></a>\n\n# Usage\n\n```\n$ cat hosts.txt\nhttp://example.com/\n$ cat hosts.txt | csp\nexample.com\nsubdomain.example.com\n...\n```\n\nSet concurrency level using the `-c` flag.\n\n```\n$ csp -h\nUsage of csp:\n  -c int\n    \tset the concurrency level (default 20)\n$ cat hosts.txt | csp -c 2\n...\n```\n\n# Installation\n\n```\n$ go get -u github.com/edoverflow/csp\n```\n\nYou can also [download a binary](https://github.com/EdOverflow/csp/releases) and put it in your `$PATH` (e.g. in `/usr/bin/`).\n\n# Contributing\n\nI welcome contributions from the public.\n\n### Using the issue tracker \ud83d\udca1\n\nThe issue tracker is the preferred channel for bug reports and features requests.\n\n### Issues and labels \ud83c\udff7\n\nThe bug tracker utilizes several labels to help organize and identify issues.\n\n### Guidelines for bug reports \ud83d\udc1b\n\nUse the GitHub issue search \u2014 check if the issue has already been reported.\n\n# Credit\n\nThank you to [@TomNomNom](https://github.com/tomnomnom), [@jimen0](https://github.com/jimen0), and [@003random](https://github.com/003random) for their help.\n", "source_code_before": "# csp\n\nGiven a list of hosts, this small utility fetches all whitelisted domains from the hosts' CSPs. I use this for reconnaissance\npurposes while bug bounty hunting.\n\n<a href=\"https://www.buymeacoffee.com/edoverflow\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: auto !important;width: auto !important;\" ></a>\n\n# Usage\n\n```\n$ cat hosts.txt\nhttp://example.com/\n$ cat hosts.txt | csp\nexample.com\nsubdomain.example.com\n...\n```\n\nSet concurrency level using the `-c` flag.\n\n```\n$ csp -h\nUsage of csp:\n  -c int\n    \tset the concurrency level (default 20)\n$ cat hosts.txt | csp -c 2\n...\n```\n\n# Installation\n\n```\n$ go get -u github.com/edoverflow/csp\n```\n\nYou can also [download a binary](https://github.com/EdOverflow/csp/releases) and put it in your `$PATH` (e.g. in `/usr/bin/`).\n\n# Contributing\n\nI welcome contributions from the public.\n\n### Using the issue tracker \ud83d\udca1\n\nThe issue tracker is the preferred channel for bug reports and features requests.\n\n### Issues and labels \ud83c\udff7\n\nThe bug tracker utilizes several labels to help organize and identify issues.\n\n### Guidelines for bug reports \ud83d\udc1b\n\nUse the GitHub issue search \u2014 check if the issue has already been reported.\n\n# Credit\n\nThank you to [@TomNomNom](https://github.com/tomnomnom), [@jimen0](https://github.com/jimen0), and [@0003random](https://github.com/003random) for their help.\n", "methods": [], "methods_before": [], "changed_methods": [], "nloc": null, "complexity": null, "token_count": null}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null},
    {"hash": "6fda5d7e9cd6a145d8b1e1a36e0d0120c0cbbcc6", "msg": "Update csp.go", "author": {"name": "003random", "email": "003random@protonmail.com"}, "committer": {"name": "GitHub", "email": "noreply@github.com"}, "author_date": "2019-10-14 15:01:00+02:00", "author_timezone": -7200, "committer_date": "2019-10-14 15:01:00+02:00", "committer_timezone": -7200, "branches": "{'master'}", "in_main_branch": true, "merge": false, "parents": ["38f234a43bb775794a593439da7598f21aa83a06"], "project_name": "csp", "project_path": "/Volumes/nVME1T/Py/GitIn/output/temp/003random_all_20250524_145901/3c2f5dec/3c2f5dec/3c2f5dec/csp", "deletions": 0, "insertions": 1, "lines": 1, "files": 1, "modified_files": [{"old_path": "csp.go", "new_path": "csp.go", "filename": "csp.go", "change_type": "ModificationType.MODIFY", "change_type_name": "MODIFY", "diff": "@@ -30,6 +30,7 @@ import (\n */\n \n // Forgive me, Father, for I have sinned.\n+// Father: You have been forgiven, son\n var r = regexp.MustCompile(\"(([a-zA-Z](-?[a-zA-Z0-9])*)\\\\.)+[a-zA-Z]{2,}\")\n \n // Consider using https://github.com/tike/csp in future.\n", "diff_parsed": {"added": [[33, "// Father: You have been forgiven, son"]], "deleted": []}, "added_lines": 1, "deleted_lines": 0, "source_code": "package main\n\nimport (\n\t\"bufio\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\t\"regexp\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n)\n\n/*\n\tGiven a list of hosts, this small utility fetches all whitelisted\n\tdomains from the hosts' CSPs. I use this for reconnaissance\n\tpurposes while bug bounty hunting.\n\n\t$ cat hosts.txt\n\thttp://example.com/\n\t$ cat hosts.txt | csp\n\texample.com\n\tsubdomain.example.com\n\t...\n*/\n\n// Forgive me, Father, for I have sinned.\n// Father: You have been forgiven, son\nvar r = regexp.MustCompile(\"(([a-zA-Z](-?[a-zA-Z0-9])*)\\\\.)+[a-zA-Z]{2,}\")\n\n// Consider using https://github.com/tike/csp in future.\n\n// requestCSP requests and extracts CSP for a given URL.\nfunc requestCSP(client *http.Client, url string) ([]string, error) {\n\treq, err := http.NewRequest(http.MethodGet, url, nil)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not create request: %v\", err)\n\t}\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not send request: %v\", err)\n\t}\n\tif resp == nil {\n\t\treturn nil, errors.New(\"received nil response, cannot analyze\")\n\t}\n\tdefer resp.Body.Close()\n\n\t_, err = io.Copy(ioutil.Discard, resp.Body)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not discard response body: %v\", err)\n\t}\n\n\tcsp := resp.Header.Get(\"Content-Security-Policy\")\n\tresults := r.FindAllString(csp, -1)\n\n\treturn results, err\n}\n\nfunc main() {\n\tconcurrency := flag.Int(\"c\", 20, \"set the concurrency level\")\n\tflag.Parse()\n\n\turlsChannel := make(chan string)\n\n\tvar wg sync.WaitGroup\n\twg.Add(*concurrency)\n\tfor i := 0; i < *concurrency; i++ {\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\n\t\t\t// Stolen from my mentor, TomNomNom! \ud83d\udc11\n\t\t\tvar tr = &http.Transport{\n\t\t\t\tMaxIdleConns:      30,\n\t\t\t\tIdleConnTimeout:   time.Second,\n\t\t\t\tDisableKeepAlives: true,\n\t\t\t\tTLSClientConfig:   &tls.Config{InsecureSkipVerify: true},\n\t\t\t}\n\n\t\t\tclient := &http.Client{\n\t\t\t\tTransport: tr,\n\t\t\t}\n\n\t\t\tfor url := range urlsChannel {\n\t\t\t\tres, err := requestCSP(client, url)\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Fprintf(os.Stderr, \"could not get CSP: %v\\n\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// Ensure we do not print out an empty string.\n\t\t\t\tif len(res) > 0 {\n\t\t\t\t\tfmt.Println(strings.Join(res, \"\\n\"))\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\t}\n\n\t/*\n\t\tRead input from stdin.\n\t\t$ cat hosts.txt | csp\n\t*/\n\tsc := bufio.NewScanner(os.Stdin)\n\tfor sc.Scan() {\n\t\thost := strings.ToLower(sc.Text())\n\t\turlsChannel <- host\n\t}\n\n\tif err := sc.Err(); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to read input: %v\\n\", err)\n\t}\n\n\tclose(urlsChannel)\n\twg.Wait()\n}\n", "source_code_before": "package main\n\nimport (\n\t\"bufio\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\t\"regexp\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n)\n\n/*\n\tGiven a list of hosts, this small utility fetches all whitelisted\n\tdomains from the hosts' CSPs. I use this for reconnaissance\n\tpurposes while bug bounty hunting.\n\n\t$ cat hosts.txt\n\thttp://example.com/\n\t$ cat hosts.txt | csp\n\texample.com\n\tsubdomain.example.com\n\t...\n*/\n\n// Forgive me, Father, for I have sinned.\nvar r = regexp.MustCompile(\"(([a-zA-Z](-?[a-zA-Z0-9])*)\\\\.)+[a-zA-Z]{2,}\")\n\n// Consider using https://github.com/tike/csp in future.\n\n// requestCSP requests and extracts CSP for a given URL.\nfunc requestCSP(client *http.Client, url string) ([]string, error) {\n\treq, err := http.NewRequest(http.MethodGet, url, nil)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not create request: %v\", err)\n\t}\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not send request: %v\", err)\n\t}\n\tif resp == nil {\n\t\treturn nil, errors.New(\"received nil response, cannot analyze\")\n\t}\n\tdefer resp.Body.Close()\n\n\t_, err = io.Copy(ioutil.Discard, resp.Body)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not discard response body: %v\", err)\n\t}\n\n\tcsp := resp.Header.Get(\"Content-Security-Policy\")\n\tresults := r.FindAllString(csp, -1)\n\n\treturn results, err\n}\n\nfunc main() {\n\tconcurrency := flag.Int(\"c\", 20, \"set the concurrency level\")\n\tflag.Parse()\n\n\turlsChannel := make(chan string)\n\n\tvar wg sync.WaitGroup\n\twg.Add(*concurrency)\n\tfor i := 0; i < *concurrency; i++ {\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\n\t\t\t// Stolen from my mentor, TomNomNom! \ud83d\udc11\n\t\t\tvar tr = &http.Transport{\n\t\t\t\tMaxIdleConns:      30,\n\t\t\t\tIdleConnTimeout:   time.Second,\n\t\t\t\tDisableKeepAlives: true,\n\t\t\t\tTLSClientConfig:   &tls.Config{InsecureSkipVerify: true},\n\t\t\t}\n\n\t\t\tclient := &http.Client{\n\t\t\t\tTransport: tr,\n\t\t\t}\n\n\t\t\tfor url := range urlsChannel {\n\t\t\t\tres, err := requestCSP(client, url)\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Fprintf(os.Stderr, \"could not get CSP: %v\\n\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// Ensure we do not print out an empty string.\n\t\t\t\tif len(res) > 0 {\n\t\t\t\t\tfmt.Println(strings.Join(res, \"\\n\"))\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\t}\n\n\t/*\n\t\tRead input from stdin.\n\t\t$ cat hosts.txt | csp\n\t*/\n\tsc := bufio.NewScanner(os.Stdin)\n\tfor sc.Scan() {\n\t\thost := strings.ToLower(sc.Text())\n\t\turlsChannel <- host\n\t}\n\n\tif err := sc.Err(); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to read input: %v\\n\", err)\n\t}\n\n\tclose(urlsChannel)\n\twg.Wait()\n}\n", "methods": [{"name": "requestCSP", "start_line": 39, "end_line": 63}, {"name": "", "start_line": 74, "end_line": 101}, {"name": "main", "start_line": 65, "end_line": 120}], "methods_before": [{"name": "requestCSP", "start_line": 38, "end_line": 62}, {"name": "", "start_line": 73, "end_line": 100}, {"name": "main", "start_line": 64, "end_line": 119}], "changed_methods": [], "nloc": 79, "complexity": 13, "token_count": 433}], "dmm_unit_size": null, "dmm_unit_complexity": null, "dmm_unit_interfacing": null}
  ],
  "process_metrics": {},
  "metrics_type": "weekly",
  "processing": {
    "total_commits": 6,
    "total_lines_added": 179,
    "total_lines_removed": 1
  }
}
